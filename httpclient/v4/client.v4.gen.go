// Package v4 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package v4

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for PwnboxRequestLocation.
const (
	Au     PwnboxRequestLocation = "au"
	Ca     PwnboxRequestLocation = "ca"
	De     PwnboxRequestLocation = "de"
	In     PwnboxRequestLocation = "in"
	Uk     PwnboxRequestLocation = "uk"
	UsEast PwnboxRequestLocation = "us-east"
	UsWest PwnboxRequestLocation = "us-west"
)

// Defines values for TrackErrorResponseStatus.
const (
	Error TrackErrorResponseStatus = "error"
)

// Defines values for UserRanking1.
const (
	Unranked UserRanking1 = "unranked"
)

// Defines values for Free.
const (
	FreeN0 Free = 0
	FreeN1 Free = 1
)

// Defines values for Leaderboard.
const (
	LeaderboardPlayers Leaderboard = "players"
	LeaderboardTeams   Leaderboard = "teams"
)

// Defines values for PeriodPath.
const (
	PeriodPathN1M PeriodPath = "1M"
	PeriodPathN1W PeriodPath = "1W"
	PeriodPathN1Y PeriodPath = "1Y"
	PeriodPathN3M PeriodPath = "3M"
	PeriodPathN6M PeriodPath = "6M"
)

// Defines values for PeriodQuery.
const (
	PeriodQueryN1M PeriodQuery = "1M"
	PeriodQueryN1W PeriodQuery = "1W"
	PeriodQueryN1Y PeriodQuery = "1Y"
	PeriodQueryN3M PeriodQuery = "3M"
	PeriodQueryN6M PeriodQuery = "6M"
)

// Defines values for Product.
const (
	ProductCompetitive   Product = "competitive"
	ProductFortresses    Product = "fortresses"
	ProductLabs          Product = "labs"
	ProductStartingPoint Product = "starting_point"
)

// Defines values for ProductName.
const (
	ProductNameCompetitive   ProductName = "competitive"
	ProductNameFortresses    ProductName = "fortresses"
	ProductNameLabs          ProductName = "labs"
	ProductNameStartingPoint ProductName = "starting_point"
)

// Defines values for ProductPath.
const (
	ProductPathChallenge ProductPath = "challenge"
	ProductPathMachine   ProductPath = "machine"
	ProductPathSherlock  ProductPath = "sherlock"
)

// Defines values for SherlockSortBy.
const (
	SherlockSortByCategory SherlockSortBy = "category"
	SherlockSortByName     SherlockSortBy = "name"
	SherlockSortByRating   SherlockSortBy = "rating"
	SherlockSortBySolves   SherlockSortBy = "solves"
)

// Defines values for ShowCompleted.
const (
	ShowCompletedComplete   ShowCompleted = "complete"
	ShowCompletedIncomplete ShowCompleted = "incomplete"
)

// Defines values for SortBy.
const (
	SortByName           SortBy = "name"
	SortByRating         SortBy = "rating"
	SortByReleaseDate    SortBy = "release-date"
	SortBySystemOwns     SortBy = "system-owns"
	SortByUserDifficulty SortBy = "user-difficulty"
	SortByUserOwns       SortBy = "user-owns"
)

// Defines values for SortType.
const (
	SortTypeAsc  SortType = "asc"
	SortTypeDesc SortType = "desc"
)

// Defines values for Status.
const (
	StatusComplete    Status = "complete"
	StatusIncompleted Status = "incompleted"
)

// Defines values for Todo.
const (
	TodoN1 Todo = 1
)

// Defines values for PostChallengeReviewFormdataBodyStars.
const (
	PostChallengeReviewFormdataBodyStarsN1 PostChallengeReviewFormdataBodyStars = 1
	PostChallengeReviewFormdataBodyStarsN2 PostChallengeReviewFormdataBodyStars = 2
	PostChallengeReviewFormdataBodyStarsN3 PostChallengeReviewFormdataBodyStars = 3
	PostChallengeReviewFormdataBodyStarsN4 PostChallengeReviewFormdataBodyStars = 4
	PostChallengeReviewFormdataBodyStarsN5 PostChallengeReviewFormdataBodyStars = 5
)

// Defines values for GetChallengesParamsStatus.
const (
	GetChallengesParamsStatusComplete    GetChallengesParamsStatus = "complete"
	GetChallengesParamsStatusIncompleted GetChallengesParamsStatus = "incompleted"
)

// Defines values for GetChallengesParamsState.
const (
	GetChallengesParamsStateActive     GetChallengesParamsState = "active"
	GetChallengesParamsStateRetired    GetChallengesParamsState = "retired"
	GetChallengesParamsStateUnreleased GetChallengesParamsState = "unreleased"
)

// Defines values for GetChallengesParamsSortBy.
const (
	GetChallengesParamsSortByName           GetChallengesParamsSortBy = "name"
	GetChallengesParamsSortByRating         GetChallengesParamsSortBy = "rating"
	GetChallengesParamsSortByReleaseDate    GetChallengesParamsSortBy = "release-date"
	GetChallengesParamsSortBySystemOwns     GetChallengesParamsSortBy = "system-owns"
	GetChallengesParamsSortByUserDifficulty GetChallengesParamsSortBy = "user-difficulty"
	GetChallengesParamsSortByUserOwns       GetChallengesParamsSortBy = "user-owns"
)

// Defines values for GetChallengesParamsSortType.
const (
	GetChallengesParamsSortTypeAsc  GetChallengesParamsSortType = "asc"
	GetChallengesParamsSortTypeDesc GetChallengesParamsSortType = "desc"
)

// Defines values for GetChallengesParamsDifficulty.
const (
	GetChallengesParamsDifficultyEasy     GetChallengesParamsDifficulty = "easy"
	GetChallengesParamsDifficultyHard     GetChallengesParamsDifficulty = "hard"
	GetChallengesParamsDifficultyInsane   GetChallengesParamsDifficulty = "insane"
	GetChallengesParamsDifficultyMedium   GetChallengesParamsDifficulty = "medium"
	GetChallengesParamsDifficultyVeryEasy GetChallengesParamsDifficulty = "very-easy"
)

// Defines values for GetChallengesParamsTodo.
const (
	GetChallengesParamsTodoN1 GetChallengesParamsTodo = 1
)

// Defines values for GetConnectionStatusProductnameParamsProductName.
const (
	GetConnectionStatusProductnameParamsProductNameCompetitive   GetConnectionStatusProductnameParamsProductName = "competitive"
	GetConnectionStatusProductnameParamsProductNameFortresses    GetConnectionStatusProductnameParamsProductName = "fortresses"
	GetConnectionStatusProductnameParamsProductNameLabs          GetConnectionStatusProductnameParamsProductName = "labs"
	GetConnectionStatusProductnameParamsProductNameStartingPoint GetConnectionStatusProductnameParamsProductName = "starting_point"
)

// Defines values for GetConnectionsServersParamsProduct.
const (
	GetConnectionsServersParamsProductCompetitive   GetConnectionsServersParamsProduct = "competitive"
	GetConnectionsServersParamsProductFortresses    GetConnectionsServersParamsProduct = "fortresses"
	GetConnectionsServersParamsProductLabs          GetConnectionsServersParamsProduct = "labs"
	GetConnectionsServersParamsProductStartingPoint GetConnectionsServersParamsProduct = "starting_point"
)

// Defines values for GetMachineGraphActivityParamsPeriod.
const (
	GetMachineGraphActivityParamsPeriodN1M GetMachineGraphActivityParamsPeriod = "1M"
	GetMachineGraphActivityParamsPeriodN1W GetMachineGraphActivityParamsPeriod = "1W"
	GetMachineGraphActivityParamsPeriodN1Y GetMachineGraphActivityParamsPeriod = "1Y"
	GetMachineGraphActivityParamsPeriodN3M GetMachineGraphActivityParamsPeriod = "3M"
	GetMachineGraphActivityParamsPeriodN6M GetMachineGraphActivityParamsPeriod = "6M"
)

// Defines values for GetMachineListRetiredPaginatedParamsFree.
const (
	N0 GetMachineListRetiredPaginatedParamsFree = 0
	N1 GetMachineListRetiredPaginatedParamsFree = 1
)

// Defines values for GetMachineListRetiredPaginatedParamsShowCompleted.
const (
	GetMachineListRetiredPaginatedParamsShowCompletedComplete   GetMachineListRetiredPaginatedParamsShowCompleted = "complete"
	GetMachineListRetiredPaginatedParamsShowCompletedIncomplete GetMachineListRetiredPaginatedParamsShowCompleted = "incomplete"
)

// Defines values for GetMachineListRetiredPaginatedParamsSortBy.
const (
	GetMachineListRetiredPaginatedParamsSortByName           GetMachineListRetiredPaginatedParamsSortBy = "name"
	GetMachineListRetiredPaginatedParamsSortByRating         GetMachineListRetiredPaginatedParamsSortBy = "rating"
	GetMachineListRetiredPaginatedParamsSortByReleaseDate    GetMachineListRetiredPaginatedParamsSortBy = "release-date"
	GetMachineListRetiredPaginatedParamsSortBySystemOwns     GetMachineListRetiredPaginatedParamsSortBy = "system-owns"
	GetMachineListRetiredPaginatedParamsSortByUserDifficulty GetMachineListRetiredPaginatedParamsSortBy = "user-difficulty"
	GetMachineListRetiredPaginatedParamsSortByUserOwns       GetMachineListRetiredPaginatedParamsSortBy = "user-owns"
)

// Defines values for GetMachineListRetiredPaginatedParamsSortType.
const (
	GetMachineListRetiredPaginatedParamsSortTypeAsc  GetMachineListRetiredPaginatedParamsSortType = "asc"
	GetMachineListRetiredPaginatedParamsSortTypeDesc GetMachineListRetiredPaginatedParamsSortType = "desc"
)

// Defines values for GetMachineListRetiredPaginatedParamsDifficulty.
const (
	GetMachineListRetiredPaginatedParamsDifficultyEasy     GetMachineListRetiredPaginatedParamsDifficulty = "easy"
	GetMachineListRetiredPaginatedParamsDifficultyHard     GetMachineListRetiredPaginatedParamsDifficulty = "hard"
	GetMachineListRetiredPaginatedParamsDifficultyInsane   GetMachineListRetiredPaginatedParamsDifficulty = "insane"
	GetMachineListRetiredPaginatedParamsDifficultyMedium   GetMachineListRetiredPaginatedParamsDifficulty = "medium"
	GetMachineListRetiredPaginatedParamsDifficultyVeryEasy GetMachineListRetiredPaginatedParamsDifficulty = "very-easy"
)

// Defines values for GetMachineListRetiredPaginatedParamsOs.
const (
	GetMachineListRetiredPaginatedParamsOsFreebsd GetMachineListRetiredPaginatedParamsOs = "freebsd"
	GetMachineListRetiredPaginatedParamsOsLinux   GetMachineListRetiredPaginatedParamsOs = "linux"
	GetMachineListRetiredPaginatedParamsOsOpenbsd GetMachineListRetiredPaginatedParamsOs = "openbsd"
	GetMachineListRetiredPaginatedParamsOsOther   GetMachineListRetiredPaginatedParamsOs = "other"
	GetMachineListRetiredPaginatedParamsOsWindows GetMachineListRetiredPaginatedParamsOs = "windows"
)

// Defines values for GetMachinePaginatedParamsShowCompleted.
const (
	GetMachinePaginatedParamsShowCompletedComplete   GetMachinePaginatedParamsShowCompleted = "complete"
	GetMachinePaginatedParamsShowCompletedIncomplete GetMachinePaginatedParamsShowCompleted = "incomplete"
)

// Defines values for GetMachinePaginatedParamsSortBy.
const (
	GetMachinePaginatedParamsSortByName           GetMachinePaginatedParamsSortBy = "name"
	GetMachinePaginatedParamsSortByRating         GetMachinePaginatedParamsSortBy = "rating"
	GetMachinePaginatedParamsSortByReleaseDate    GetMachinePaginatedParamsSortBy = "release-date"
	GetMachinePaginatedParamsSortBySystemOwns     GetMachinePaginatedParamsSortBy = "system-owns"
	GetMachinePaginatedParamsSortByUserDifficulty GetMachinePaginatedParamsSortBy = "user-difficulty"
	GetMachinePaginatedParamsSortByUserOwns       GetMachinePaginatedParamsSortBy = "user-owns"
)

// Defines values for GetMachinePaginatedParamsSortType.
const (
	GetMachinePaginatedParamsSortTypeAsc  GetMachinePaginatedParamsSortType = "asc"
	GetMachinePaginatedParamsSortTypeDesc GetMachinePaginatedParamsSortType = "desc"
)

// Defines values for GetMachinePaginatedParamsDifficulty.
const (
	GetMachinePaginatedParamsDifficultyEasy     GetMachinePaginatedParamsDifficulty = "easy"
	GetMachinePaginatedParamsDifficultyHard     GetMachinePaginatedParamsDifficulty = "hard"
	GetMachinePaginatedParamsDifficultyInsane   GetMachinePaginatedParamsDifficulty = "insane"
	GetMachinePaginatedParamsDifficultyMedium   GetMachinePaginatedParamsDifficulty = "medium"
	GetMachinePaginatedParamsDifficultyVeryEasy GetMachinePaginatedParamsDifficulty = "very-easy"
)

// Defines values for GetMachinePaginatedParamsOs.
const (
	GetMachinePaginatedParamsOsFreebsd GetMachinePaginatedParamsOs = "freebsd"
	GetMachinePaginatedParamsOsLinux   GetMachinePaginatedParamsOs = "linux"
	GetMachinePaginatedParamsOsOpenbsd GetMachinePaginatedParamsOs = "openbsd"
	GetMachinePaginatedParamsOsOther   GetMachinePaginatedParamsOs = "other"
	GetMachinePaginatedParamsOsWindows GetMachinePaginatedParamsOs = "windows"
)

// Defines values for GetMachineTodoPaginatedParamsSortType.
const (
	GetMachineTodoPaginatedParamsSortTypeAsc  GetMachineTodoPaginatedParamsSortType = "asc"
	GetMachineTodoPaginatedParamsSortTypeDesc GetMachineTodoPaginatedParamsSortType = "desc"
)

// Defines values for GetMachineTodoPaginatedParamsDifficulty.
const (
	GetMachineTodoPaginatedParamsDifficultyEasy     GetMachineTodoPaginatedParamsDifficulty = "easy"
	GetMachineTodoPaginatedParamsDifficultyHard     GetMachineTodoPaginatedParamsDifficulty = "hard"
	GetMachineTodoPaginatedParamsDifficultyInsane   GetMachineTodoPaginatedParamsDifficulty = "insane"
	GetMachineTodoPaginatedParamsDifficultyMedium   GetMachineTodoPaginatedParamsDifficulty = "medium"
	GetMachineTodoPaginatedParamsDifficultyVeryEasy GetMachineTodoPaginatedParamsDifficulty = "very-easy"
)

// Defines values for GetMachineTodoPaginatedParamsShowCompleted.
const (
	GetMachineTodoPaginatedParamsShowCompletedComplete   GetMachineTodoPaginatedParamsShowCompleted = "complete"
	GetMachineTodoPaginatedParamsShowCompletedIncomplete GetMachineTodoPaginatedParamsShowCompleted = "incomplete"
)

// Defines values for GetMachineTodoPaginatedParamsOs.
const (
	GetMachineTodoPaginatedParamsOsFreebsd GetMachineTodoPaginatedParamsOs = "freebsd"
	GetMachineTodoPaginatedParamsOsLinux   GetMachineTodoPaginatedParamsOs = "linux"
	GetMachineTodoPaginatedParamsOsOpenbsd GetMachineTodoPaginatedParamsOs = "openbsd"
	GetMachineTodoPaginatedParamsOsOther   GetMachineTodoPaginatedParamsOs = "other"
	GetMachineTodoPaginatedParamsOsWindows GetMachineTodoPaginatedParamsOs = "windows"
)

// Defines values for GetMachineUnreleasedParamsDifficulty.
const (
	GetMachineUnreleasedParamsDifficultyEasy     GetMachineUnreleasedParamsDifficulty = "easy"
	GetMachineUnreleasedParamsDifficultyHard     GetMachineUnreleasedParamsDifficulty = "hard"
	GetMachineUnreleasedParamsDifficultyInsane   GetMachineUnreleasedParamsDifficulty = "insane"
	GetMachineUnreleasedParamsDifficultyMedium   GetMachineUnreleasedParamsDifficulty = "medium"
	GetMachineUnreleasedParamsDifficultyVeryEasy GetMachineUnreleasedParamsDifficulty = "very-easy"
)

// Defines values for GetMachineUnreleasedParamsOs.
const (
	GetMachineUnreleasedParamsOsFreebsd GetMachineUnreleasedParamsOs = "freebsd"
	GetMachineUnreleasedParamsOsLinux   GetMachineUnreleasedParamsOs = "linux"
	GetMachineUnreleasedParamsOsOpenbsd GetMachineUnreleasedParamsOs = "openbsd"
	GetMachineUnreleasedParamsOsOther   GetMachineUnreleasedParamsOs = "other"
	GetMachineUnreleasedParamsOsWindows GetMachineUnreleasedParamsOs = "windows"
)

// Defines values for GetRankingsCountryBestParamsPeriod.
const (
	GetRankingsCountryBestParamsPeriodN1M GetRankingsCountryBestParamsPeriod = "1M"
	GetRankingsCountryBestParamsPeriodN1W GetRankingsCountryBestParamsPeriod = "1W"
	GetRankingsCountryBestParamsPeriodN1Y GetRankingsCountryBestParamsPeriod = "1Y"
	GetRankingsCountryBestParamsPeriodN3M GetRankingsCountryBestParamsPeriod = "3M"
	GetRankingsCountryBestParamsPeriodN6M GetRankingsCountryBestParamsPeriod = "6M"
)

// Defines values for GetRankingsCountryOverviewParamsPeriod.
const (
	GetRankingsCountryOverviewParamsPeriodN1M GetRankingsCountryOverviewParamsPeriod = "1M"
	GetRankingsCountryOverviewParamsPeriodN1W GetRankingsCountryOverviewParamsPeriod = "1W"
	GetRankingsCountryOverviewParamsPeriodN1Y GetRankingsCountryOverviewParamsPeriod = "1Y"
	GetRankingsCountryOverviewParamsPeriodN3M GetRankingsCountryOverviewParamsPeriod = "3M"
	GetRankingsCountryOverviewParamsPeriodN6M GetRankingsCountryOverviewParamsPeriod = "6M"
)

// Defines values for GetRankingsTeamBestParamsPeriod.
const (
	GetRankingsTeamBestParamsPeriodN1M GetRankingsTeamBestParamsPeriod = "1M"
	GetRankingsTeamBestParamsPeriodN1W GetRankingsTeamBestParamsPeriod = "1W"
	GetRankingsTeamBestParamsPeriodN1Y GetRankingsTeamBestParamsPeriod = "1Y"
	GetRankingsTeamBestParamsPeriodN3M GetRankingsTeamBestParamsPeriod = "3M"
	GetRankingsTeamBestParamsPeriodN6M GetRankingsTeamBestParamsPeriod = "6M"
)

// Defines values for GetRankingsTeamBestIdParamsPeriod.
const (
	GetRankingsTeamBestIdParamsPeriodN1M GetRankingsTeamBestIdParamsPeriod = "1M"
	GetRankingsTeamBestIdParamsPeriodN1W GetRankingsTeamBestIdParamsPeriod = "1W"
	GetRankingsTeamBestIdParamsPeriodN1Y GetRankingsTeamBestIdParamsPeriod = "1Y"
	GetRankingsTeamBestIdParamsPeriodN3M GetRankingsTeamBestIdParamsPeriod = "3M"
	GetRankingsTeamBestIdParamsPeriodN6M GetRankingsTeamBestIdParamsPeriod = "6M"
)

// Defines values for GetRankingsTeamOverviewParamsPeriod.
const (
	GetRankingsTeamOverviewParamsPeriodN1M GetRankingsTeamOverviewParamsPeriod = "1M"
	GetRankingsTeamOverviewParamsPeriodN1W GetRankingsTeamOverviewParamsPeriod = "1W"
	GetRankingsTeamOverviewParamsPeriodN1Y GetRankingsTeamOverviewParamsPeriod = "1Y"
	GetRankingsTeamOverviewParamsPeriodN3M GetRankingsTeamOverviewParamsPeriod = "3M"
	GetRankingsTeamOverviewParamsPeriodN6M GetRankingsTeamOverviewParamsPeriod = "6M"
)

// Defines values for GetRankingsTeamOverviewIdParamsPeriod.
const (
	GetRankingsTeamOverviewIdParamsPeriodN1M GetRankingsTeamOverviewIdParamsPeriod = "1M"
	GetRankingsTeamOverviewIdParamsPeriodN1W GetRankingsTeamOverviewIdParamsPeriod = "1W"
	GetRankingsTeamOverviewIdParamsPeriodN1Y GetRankingsTeamOverviewIdParamsPeriod = "1Y"
	GetRankingsTeamOverviewIdParamsPeriodN3M GetRankingsTeamOverviewIdParamsPeriod = "3M"
	GetRankingsTeamOverviewIdParamsPeriodN6M GetRankingsTeamOverviewIdParamsPeriod = "6M"
)

// Defines values for GetRankingsUserBestParamsPeriod.
const (
	GetRankingsUserBestParamsPeriodN1M GetRankingsUserBestParamsPeriod = "1M"
	GetRankingsUserBestParamsPeriodN1W GetRankingsUserBestParamsPeriod = "1W"
	GetRankingsUserBestParamsPeriodN1Y GetRankingsUserBestParamsPeriod = "1Y"
	GetRankingsUserBestParamsPeriodN3M GetRankingsUserBestParamsPeriod = "3M"
	GetRankingsUserBestParamsPeriodN6M GetRankingsUserBestParamsPeriod = "6M"
)

// Defines values for GetRankingsUserOverviewParamsPeriod.
const (
	GetRankingsUserOverviewParamsPeriodN1M GetRankingsUserOverviewParamsPeriod = "1M"
	GetRankingsUserOverviewParamsPeriodN1W GetRankingsUserOverviewParamsPeriod = "1W"
	GetRankingsUserOverviewParamsPeriodN1Y GetRankingsUserOverviewParamsPeriod = "1Y"
	GetRankingsUserOverviewParamsPeriodN3M GetRankingsUserOverviewParamsPeriod = "3M"
	GetRankingsUserOverviewParamsPeriodN6M GetRankingsUserOverviewParamsPeriod = "6M"
)

// Defines values for GetReviewParamsProduct.
const (
	GetReviewParamsProductChallenge GetReviewParamsProduct = "challenge"
	GetReviewParamsProductMachine   GetReviewParamsProduct = "machine"
	GetReviewParamsProductSherlock  GetReviewParamsProduct = "sherlock"
)

// Defines values for GetReviewPaginatedParamsProduct.
const (
	GetReviewPaginatedParamsProductChallenge GetReviewPaginatedParamsProduct = "challenge"
	GetReviewPaginatedParamsProductMachine   GetReviewPaginatedParamsProduct = "machine"
	GetReviewPaginatedParamsProductSherlock  GetReviewPaginatedParamsProduct = "sherlock"
)

// Defines values for GetSearchFetchParamsTags.
const (
	GetSearchFetchParamsTagsChallenges GetSearchFetchParamsTags = "challenges"
	GetSearchFetchParamsTagsMachines   GetSearchFetchParamsTags = "machines"
	GetSearchFetchParamsTagsTeams      GetSearchFetchParamsTags = "teams"
	GetSearchFetchParamsTagsUsers      GetSearchFetchParamsTags = "users"
)

// Defines values for GetSeasonLeaderboardParamsLeaderboard.
const (
	GetSeasonLeaderboardParamsLeaderboardPlayers GetSeasonLeaderboardParamsLeaderboard = "players"
	GetSeasonLeaderboardParamsLeaderboardTeams   GetSeasonLeaderboardParamsLeaderboard = "teams"
)

// Defines values for GetSeasonLeaderboardTopParamsPeriod.
const (
	GetSeasonLeaderboardTopParamsPeriodN1M GetSeasonLeaderboardTopParamsPeriod = "1M"
	GetSeasonLeaderboardTopParamsPeriodN1W GetSeasonLeaderboardTopParamsPeriod = "1W"
	GetSeasonLeaderboardTopParamsPeriodN1Y GetSeasonLeaderboardTopParamsPeriod = "1Y"
	GetSeasonLeaderboardTopParamsPeriodN3M GetSeasonLeaderboardTopParamsPeriod = "3M"
	GetSeasonLeaderboardTopParamsPeriodN6M GetSeasonLeaderboardTopParamsPeriod = "6M"
)

// Defines values for GetSeasonLeaderboardTopParamsLeaderboard.
const (
	GetSeasonLeaderboardTopParamsLeaderboardPlayers GetSeasonLeaderboardTopParamsLeaderboard = "players"
	GetSeasonLeaderboardTopParamsLeaderboardTeams   GetSeasonLeaderboardTopParamsLeaderboard = "teams"
)

// Defines values for GetSherlocksParamsSortType.
const (
	GetSherlocksParamsSortTypeAsc  GetSherlocksParamsSortType = "asc"
	GetSherlocksParamsSortTypeDesc GetSherlocksParamsSortType = "desc"
)

// Defines values for GetSherlocksParamsDifficulty.
const (
	GetSherlocksParamsDifficultyEasy     GetSherlocksParamsDifficulty = "easy"
	GetSherlocksParamsDifficultyHard     GetSherlocksParamsDifficulty = "hard"
	GetSherlocksParamsDifficultyInsane   GetSherlocksParamsDifficulty = "insane"
	GetSherlocksParamsDifficultyMedium   GetSherlocksParamsDifficulty = "medium"
	GetSherlocksParamsDifficultyVeryEasy GetSherlocksParamsDifficulty = "very-easy"
)

// Defines values for GetSherlocksParamsState.
const (
	GetSherlocksParamsStateActive     GetSherlocksParamsState = "active"
	GetSherlocksParamsStateRetired    GetSherlocksParamsState = "retired"
	GetSherlocksParamsStateUnreleased GetSherlocksParamsState = "unreleased"
)

// Defines values for GetSherlocksParamsSortBy.
const (
	GetSherlocksParamsSortByCategory GetSherlocksParamsSortBy = "category"
	GetSherlocksParamsSortByName     GetSherlocksParamsSortBy = "name"
	GetSherlocksParamsSortByRating   GetSherlocksParamsSortBy = "rating"
	GetSherlocksParamsSortBySolves   GetSherlocksParamsSortBy = "solves"
)

// Defines values for GetSherlocksParamsStatus.
const (
	Complete    GetSherlocksParamsStatus = "complete"
	Incompleted GetSherlocksParamsStatus = "incompleted"
)

// Defines values for GetTeamGraphParamsPeriod.
const (
	GetTeamGraphParamsPeriodN1M GetTeamGraphParamsPeriod = "1M"
	GetTeamGraphParamsPeriodN1W GetTeamGraphParamsPeriod = "1W"
	GetTeamGraphParamsPeriodN1Y GetTeamGraphParamsPeriod = "1Y"
	GetTeamGraphParamsPeriodN3M GetTeamGraphParamsPeriod = "3M"
	GetTeamGraphParamsPeriodN6M GetTeamGraphParamsPeriod = "6M"
)

// Defines values for GetUserProfileGraphParamsPeriod.
const (
	GetUserProfileGraphParamsPeriodN1M GetUserProfileGraphParamsPeriod = "1M"
	GetUserProfileGraphParamsPeriodN1W GetUserProfileGraphParamsPeriod = "1W"
	GetUserProfileGraphParamsPeriodN1Y GetUserProfileGraphParamsPeriod = "1Y"
	GetUserProfileGraphParamsPeriodN3M GetUserProfileGraphParamsPeriod = "3M"
	GetUserProfileGraphParamsPeriodN6M GetUserProfileGraphParamsPeriod = "6M"
)

// Defines values for PostTodoUpdateParamsProduct.
const (
	PostTodoUpdateParamsProductChallenge PostTodoUpdateParamsProduct = "challenge"
	PostTodoUpdateParamsProductMachine   PostTodoUpdateParamsProduct = "machine"
	PostTodoUpdateParamsProductSherlock  PostTodoUpdateParamsProduct = "sherlock"
)

// AcademyDifficulty defines model for AcademyDifficulty.
type AcademyDifficulty struct {
	Color string `json:"color,omitempty"`
	Id    int    `json:"id,omitempty"`
	Level int    `json:"level,omitempty"`
	Text  string `json:"text,omitempty"`
	Title string `json:"title,omitempty"`
}

// AcademyModule Academy Module Item
type AcademyModule struct {
	Avatar     string            `json:"avatar,omitempty"`
	Difficulty AcademyDifficulty `json:"difficulty,omitempty"`
	Id         int               `json:"id,omitempty"`
	Logo       string            `json:"logo,omitempty"`
	Name       string            `json:"name,omitempty"`
	Tier       AcademyTiers      `json:"tier,omitempty"`
	Url        string            `json:"url,omitempty"`
}

// AcademyModulesItems defines model for AcademyModulesItems.
type AcademyModulesItems = []AcademyModule

// AcademyTiers defines model for AcademyTiers.
type AcademyTiers struct {
	Color  string `json:"color,omitempty"`
	Name   string `json:"name,omitempty"`
	Number int    `json:"number,omitempty"`
}

// ActiveMachineInfo defines model for ActiveMachineInfo.
type ActiveMachineInfo struct {
	Avatar      string `json:"avatar,omitempty"`
	ExpiresAt   string `json:"expires_at,omitempty"`
	Id          int    `json:"id,omitempty"`
	Ip          string `json:"ip"`
	IsSpawning  bool   `json:"isSpawning,omitempty"`
	LabServer   string `json:"lab_server,omitempty"`
	Name        string `json:"name,omitempty"`
	TierId      string `json:"tier_id"`
	Type        string `json:"type,omitempty"`
	Voted       string `json:"voted"`
	Voting      string `json:"voting"`
	VpnServerId int    `json:"vpn_server_id"`
}

// ActiveMachineInfoWrapper defines model for ActiveMachineInfoWrapper.
type ActiveMachineInfoWrapper = ActiveMachineInfo

// ActiveMachineResponse defines model for ActiveMachineResponse.
type ActiveMachineResponse struct {
	Info ActiveMachineInfoWrapper `json:"info"`
}

// Announcement Schema definition for Announcement
type Announcement struct {
	CreatedAt time.Time `json:"created_at,omitempty"`
	Id        int       `json:"id,omitempty"`
	Title     string    `json:"title,omitempty"`
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// AnnouncementItem defines model for AnnouncementItem.
type AnnouncementItem struct {
	CreatedAt string `json:"created_at,omitempty"`
	Id        int    `json:"id,omitempty"`
	Text      string `json:"text,omitempty"`
	Title     string `json:"title,omitempty"`
	UpdatedAt string `json:"updated_at,omitempty"`
}

// AnnouncementItems defines model for AnnouncementItems.
type AnnouncementItems = []AnnouncementItem

// AnnouncementResponse defines model for AnnouncementResponse.
type AnnouncementResponse struct {
	Announcements AnnouncementItems `json:"announcements,omitempty"`
}

// ArenaOwnError Schema definition for Own Error Response
type ArenaOwnError struct {
	Message string `json:"message,omitempty"`
}

// AssignedServerConnectionsServers Schema definition for Assigned Server
type AssignedServerConnectionsServers struct {
	CurrentClients       int    `json:"current_clients,omitempty"`
	FriendlyName         string `json:"friendly_name,omitempty"`
	Id                   int    `json:"id,omitempty"`
	Location             string `json:"location,omitempty"`
	LocationTypeFriendly string `json:"location_type_friendly,omitempty"`
	ProLabId             int    `json:"pro_lab_id,omitempty"`
}

// BadRequestError Schema definition for Bad Request Error
type BadRequestError struct {
	Message string `json:"message,omitempty"`
}

// Badge Schema definition for Badge
type Badge struct {
	BadgeCategoryId int     `json:"badge_category_id,omitempty"`
	Color           string  `json:"color"`
	DescriptionEn   string  `json:"description_en,omitempty"`
	Icon            string  `json:"icon,omitempty"`
	Id              int     `json:"id,omitempty"`
	Name            string  `json:"name,omitempty"`
	Rarity          float32 `json:"rarity,omitempty"`
	UsersCount      int     `json:"users_count,omitempty"`
}

// BadgeCategories defines model for BadgeCategories.
type BadgeCategories = []BadgeCategory

// BadgeCategory defines model for BadgeCategory.
type BadgeCategory struct {
	Badges      BadgeCategoryItems `json:"badges,omitempty"`
	Description string             `json:"description,omitempty"`
	Id          int                `json:"id,omitempty"`
	Name        string             `json:"name,omitempty"`
}

// BadgeCategoryItems defines model for BadgeCategoryItems.
type BadgeCategoryItems = []Badge

// BadgesResponse Schema definition for Badges Response
type BadgesResponse struct {
	Categories BadgeCategories `json:"categories,omitempty"`
}

// BaseTask defines model for BaseTask.
type BaseTask struct {
	Completed      bool        `json:"completed,omitempty"`
	Description    string      `json:"description,omitempty"`
	Hint           string      `json:"hint"`
	Id             int         `json:"id,omitempty"`
	MaskedFlag     string      `json:"masked_flag,omitempty"`
	Options        ObjectArray `json:"options,omitempty"`
	PrerequisiteId int         `json:"prerequisite_id"`
	TaskType       TaskType    `json:"task_type,omitempty"`
	Title          string      `json:"title,omitempty"`
	Type           TaskType    `json:"type,omitempty"`
}

// BloodInfo Schema definition for Blood Info
type BloodInfo struct {
	BloodDifference string        `json:"blood_difference,omitempty"`
	CreatedAt       string        `json:"created_at,omitempty"`
	User            UserBasicInfo `json:"user"`
}

// Bloods defines model for Bloods.
type Bloods struct {
	Challenges BloodsChallengesItems `json:"challenges,omitempty"`
	Machines   BloodsMachinesItems   `json:"machines,omitempty"`
}

// BloodsChallengesItems defines model for BloodsChallengesItems.
type BloodsChallengesItems = []UserProfileBloodsChallenges

// BloodsMachinesItems defines model for BloodsMachinesItems.
type BloodsMachinesItems = []UserProfileBloodsMachines

// BloodsObtained defines model for BloodsObtained.
type BloodsObtained struct {
	BloodsObtained int `json:"bloods_obtained,omitempty"`
	FlagsPawned    int `json:"flags_pawned,omitempty"`
}

// CareerCompaniesDataItems defines model for CareerCompaniesDataItems.
type CareerCompaniesDataItems = []CareerCompaniesItem

// CareerCompaniesItem defines model for CareerCompaniesItem.
type CareerCompaniesItem struct {
	CareerLogo string  `json:"career_logo"`
	Featured   bool    `json:"featured,omitempty"`
	Id         int     `json:"id,omitempty"`
	JobOffers  float32 `json:"job_offers,omitempty"`
	Logo       string  `json:"logo"`
	Name       string  `json:"name,omitempty"`
}

// CareerCompaniesResponse defines model for CareerCompaniesResponse.
type CareerCompaniesResponse struct {
	Data CareerCompaniesDataItems `json:"data,omitempty"`
}

// CareerCompany defines model for CareerCompany.
type CareerCompany struct {
	Description string `json:"description,omitempty"`
	Featured    bool   `json:"featured,omitempty"`
	Id          int    `json:"id,omitempty"`
	LatestPost  string `json:"latest_post"`
	Logo        string `json:"logo,omitempty"`
	Name        string `json:"name,omitempty"`
	Url         string `json:"url,omitempty"`
}

// CareerCompanyData defines model for CareerCompanyData.
type CareerCompanyData struct {
	Company CareerCompany `json:"company,omitempty"`
	Jobs    CareerJobs    `json:"jobs,omitempty"`
}

// CareerCompanyResponse defines model for CareerCompanyResponse.
type CareerCompanyResponse struct {
	Data CareerCompanyData `json:"data,omitempty"`
	Meta MetaAlt           `json:"meta,omitempty"`
}

// CareerFeaturedData defines model for CareerFeaturedData.
type CareerFeaturedData = []CareerFeaturedItems

// CareerFeaturedItems defines model for CareerFeaturedItems.
type CareerFeaturedItems struct {
	Id   int    `json:"id,omitempty"`
	Logo string `json:"logo,omitempty"`
	Name string `json:"name,omitempty"`
}

// CareerFeaturedResponse Schema definition for Career Featured Response
type CareerFeaturedResponse struct {
	Data CareerFeaturedData `json:"data,omitempty"`
}

// CareerHistoryResponse Schema definition for Career History Response
type CareerHistoryResponse struct {
	Data StringArray `json:"data,omitempty"`
	Meta MetaAlt     `json:"meta,omitempty"`
}

// CareerInfoData defines model for CareerInfoData.
type CareerInfoData struct {
	ApplicationUrl       string       `json:"application_url"`
	Applied              bool         `json:"applied,omitempty"`
	Company              CompanyBasic `json:"company,omitempty"`
	CompanyLogo          string       `json:"company_logo,omitempty"`
	Country              string       `json:"country,omitempty"`
	CreatedAt            string       `json:"created_at,omitempty"`
	Description          string       `json:"description,omitempty"`
	ExternalEmployerName string       `json:"external_employer_name"`
	ExternalLink         string       `json:"external_link"`
	HasApplicationUrl    bool         `json:"has_application_url,omitempty"`
	Id                   int          `json:"id,omitempty"`
	MinimumRankId        float32      `json:"minimum_rank_id,omitempty"`
	MinimumRankName      string       `json:"minimum_rank_name,omitempty"`
	OtherJobs            ObjectArray  `json:"other_jobs,omitempty"`
	Remote               bool         `json:"remote"`
	Title                string       `json:"title,omitempty"`
	UpdatedAt            string       `json:"updated_at,omitempty"`
	WorkType             string       `json:"work_type,omitempty"`
}

// CareerInfoResponse defines model for CareerInfoResponse.
type CareerInfoResponse struct {
	Data CareerInfoData `json:"data,omitempty"`
}

// CareerJobs defines model for CareerJobs.
type CareerJobs = []CareerJobsItem

// CareerJobsItem defines model for CareerJobsItem.
type CareerJobsItem struct {
	ApplicationUrl       string       `json:"application_url"`
	Applied              bool         `json:"applied,omitempty"`
	Company              CompanyBasic `json:"company,omitempty"`
	CompanyLogo          string       `json:"company_logo,omitempty"`
	Country              string       `json:"country,omitempty"`
	CreatedAt            string       `json:"created_at,omitempty"`
	ExternalEmployerName string       `json:"external_employer_name"`
	ExternalLink         string       `json:"external_link"`
	HasApplicationUrl    bool         `json:"has_application_url,omitempty"`
	Id                   int          `json:"id,omitempty"`
	MinimumRankId        float32      `json:"minimum_rank_id,omitempty"`
	MinimumRankName      string       `json:"minimum_rank_name,omitempty"`
	Remote               string       `json:"remote"`
	Title                string       `json:"title,omitempty"`
	UpdatedAt            string       `json:"updated_at,omitempty"`
	WorkType             string       `json:"work_type,omitempty"`
}

// CareerProfileData defines model for CareerProfileData.
type CareerProfileData struct {
	Freelance string      `json:"freelance"`
	FullTime  string      `json:"full_time"`
	OptIn     bool        `json:"opt_in,omitempty"`
	Skills    StringArray `json:"skills,omitempty"`
}

// CareerProfileResponse Schema definition for Career Profile Response
type CareerProfileResponse struct {
	Data CareerProfileData `json:"data,omitempty"`
}

// CareerRequestsResponse defines model for CareerRequestsResponse.
type CareerRequestsResponse struct {
	Data ObjectArray `json:"data,omitempty"`
	Meta MetaAlt     `json:"meta,omitempty"`
}

// CareerSearchData defines model for CareerSearchData.
type CareerSearchData = []CareerSearchItem

// CareerSearchItem defines model for CareerSearchItem.
type CareerSearchItem struct {
	ApplicationUrl       string       `json:"application_url"`
	Applied              bool         `json:"applied,omitempty"`
	Company              CompanyBasic `json:"company,omitempty"`
	CompanyLogo          string       `json:"company_logo,omitempty"`
	Country              string       `json:"country"`
	CreatedAt            time.Time    `json:"created_at,omitempty"`
	ExternalEmployerName string       `json:"external_employer_name"`
	ExternalLink         string       `json:"external_link"`
	HasApplicationUrl    bool         `json:"has_application_url,omitempty"`
	Id                   int          `json:"id,omitempty"`
	MinimumRankId        int          `json:"minimum_rank_id,omitempty"`
	MinimumRankName      string       `json:"minimum_rank_name,omitempty"`
	Remote               string       `json:"remote"`
	Title                string       `json:"title,omitempty"`
	UpdatedAt            time.Time    `json:"updated_at,omitempty"`
	WorkType             string       `json:"work_type"`
}

// CareerSearchResponse Schema definition for Career Search Response
type CareerSearchResponse struct {
	Data CareerSearchData `json:"data,omitempty"`
	Meta MetaAlt          `json:"meta,omitempty"`
}

// CareerStatsData defines model for CareerStatsData.
type CareerStatsData struct {
	NewToday       int `json:"new_today,omitempty"`
	TotalJobOffers int `json:"total_job_offers,omitempty"`
}

// CareerStatsResponse Schema definition for Career Stats Response
type CareerStatsResponse struct {
	Data CareerStatsData `json:"data,omitempty"`
}

// CategoriesItem defines model for CategoriesItem.
type CategoriesItem struct {
	Icon string `json:"icon"`
	Id   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}

// CategoriesListInfo defines model for CategoriesListInfo.
type CategoriesListInfo = []CategoriesItem

// CategoriesListResponse Schema definition for Categories List Response
type CategoriesListResponse struct {
	Info CategoriesListInfo `json:"info,omitempty"`
}

// ChallengActivityActivities defines model for ChallengActivityActivities.
type ChallengActivityActivities = []ChallengeActivity

// Challenge Schema definition for Challenge
type Challenge struct {
	AuthUserHasReviewed  bool            `json:"authUserHasReviewed,omitempty"`
	AuthUserSolve        bool            `json:"authUserSolve,omitempty"`
	AuthUserSolveTime    string          `json:"authUserSolveTime"`
	CanAccessWalkthough  bool            `json:"can_access_walkthough,omitempty"`
	CategoryName         string          `json:"category_name,omitempty"`
	Creator2Avatar       string          `json:"creator2_avatar"`
	Creator2Id           int             `json:"creator2_id"`
	Creator2Name         string          `json:"creator2_name"`
	CreatorAvatar        string          `json:"creator_avatar,omitempty"`
	CreatorId            int             `json:"creator_id,omitempty"`
	CreatorName          string          `json:"creator_name,omitempty"`
	Description          string          `json:"description,omitempty"`
	Difficulty           string          `json:"difficulty,omitempty"`
	DifficultyChart      DifficultyChart `json:"difficulty_chart,omitempty"`
	DislikeByAuthUser    bool            `json:"dislikeByAuthUser,omitempty"`
	Dislikes             int             `json:"dislikes,omitempty"`
	Docker               bool            `json:"docker"`
	DockerIp             string          `json:"docker_ip"`
	DockerPorts          string          `json:"docker_ports"`
	DockerStatus         string          `json:"docker_status"`
	Download             bool            `json:"download,omitempty"`
	FileName             string          `json:"file_name,omitempty"`
	FileSize             string          `json:"file_size,omitempty"`
	FirstBloodTime       string          `json:"first_blood_time,omitempty"`
	FirstBloodUser       string          `json:"first_blood_user,omitempty"`
	FirstBloodUserAvatar string          `json:"first_blood_user_avatar,omitempty"`
	FirstBloodUserId     int             `json:"first_blood_user_id,omitempty"`
	HasChangelog         bool            `json:"has_changelog,omitempty"`
	Id                   int             `json:"id,omitempty"`
	IsRespected          bool            `json:"isRespected,omitempty"`
	IsRespected2         bool            `json:"isRespected2"`
	IsTodo               bool            `json:"isTodo,omitempty"`
	LikeByAuthUser       bool            `json:"likeByAuthUser,omitempty"`
	Likes                int             `json:"likes,omitempty"`
	Name                 string          `json:"name,omitempty"`

	// PlayInfo Alternate structure of PlayInfo used in Sherlocks and Challenges
	PlayInfo                PlayInfoAlt      `json:"play_info,omitempty"`
	PlayMethods             StringArray      `json:"play_methods,omitempty"`
	Points                  Challenge_Points `json:"points,omitempty"`
	Recommended             int              `json:"recommended,omitempty"`
	ReleaseDate             time.Time        `json:"release_date,omitempty"`
	Released                int              `json:"released,omitempty"`
	Retired                 bool             `json:"retired,omitempty"`
	ReviewsCount            int              `json:"reviews_count,omitempty"`
	Sha256                  string           `json:"sha256,omitempty"`
	ShowGoVip               bool             `json:"show_go_vip,omitempty"`
	Solves                  int              `json:"solves,omitempty"`
	Stars                   float32          `json:"stars,omitempty"`
	State                   string           `json:"state,omitempty"`
	Tags                    StringArray      `json:"tags,omitempty"`
	UserCanReview           bool             `json:"user_can_review,omitempty"`
	UserSubmittedDifficulty int              `json:"user_submitted_difficulty,omitempty"`
}

// ChallengePoints0 defines model for .
type ChallengePoints0 = int

// ChallengePoints1 defines model for .
type ChallengePoints1 = string

// Challenge_Points defines model for Challenge.Points.
type Challenge_Points struct {
	union json.RawMessage
}

// ChallengeActivity Schema definition for Challenge Activity
type ChallengeActivity struct {
	CreatedAt  time.Time `json:"created_at,omitempty"`
	Date       string    `json:"date,omitempty"`
	DateDiff   string    `json:"date_diff,omitempty"`
	Type       string    `json:"type,omitempty"`
	UserAvatar string    `json:"user_avatar,omitempty"`
	UserId     int       `json:"user_id,omitempty"`
	UserName   string    `json:"user_name,omitempty"`
}

// ChallengeActivityInfo defines model for ChallengeActivityInfo.
type ChallengeActivityInfo struct {
	Activity ChallengActivityActivities `json:"activity,omitempty"`
}

// ChallengeActivityResponse Schema definition for Challenge Activity Response
type ChallengeActivityResponse struct {
	Info ChallengeActivityInfo `json:"info,omitempty"`
}

// ChallengeCategories defines model for ChallengeCategories.
type ChallengeCategories struct {
	AvgUserSolved        float32 `json:"avg_user_solved,omitempty"`
	CompletionPercentage float32 `json:"completion_percentage,omitempty"`
	Name                 string  `json:"name,omitempty"`
	OwnedFlags           float32 `json:"owned_flags,omitempty"`
	TotalFlags           float32 `json:"total_flags,omitempty"`
}

// ChallengeCategoriesData defines model for ChallengeCategoriesData.
type ChallengeCategoriesData = []ChallengeCategoriesDetailsItem

// ChallengeCategoriesDetails Schema definition for Challenge Categories Details
type ChallengeCategoriesDetails struct {
	Data   ChallengeCategoriesData `json:"data,omitempty"`
	Status bool                    `json:"status,omitempty"`
}

// ChallengeCategoriesDetailsItem defines model for ChallengeCategoriesDetailsItem.
type ChallengeCategoriesDetailsItem struct {
	AllTeamsAvgPercentage float32 `json:"all_teams_avg_percentage,omitempty"`
	Id                    int     `json:"id,omitempty"`
	Name                  string  `json:"name,omitempty"`
	TeamPercentage        float32 `json:"team_percentage,omitempty"`
}

// ChallengeCategoriesItems defines model for ChallengeCategoriesItems.
type ChallengeCategoriesItems struct {
	AvgUserSolved        float32 `json:"avg_user_solved,omitempty"`
	CompletionPercentage int     `json:"completion_percentage,omitempty"`
	Name                 string  `json:"name,omitempty"`
	OwnedFlags           int     `json:"owned_flags,omitempty"`
	TotalFlags           int     `json:"total_flags,omitempty"`
}

// ChallengeChangelogIdResponse Schema definition for Challenge Changelog Id Response
type ChallengeChangelogIdResponse struct {
	Data   StringArray `json:"data,omitempty"`
	Status bool        `json:"status,omitempty"`
}

// ChallengeDifficulties defines model for ChallengeDifficulties.
type ChallengeDifficulties struct {
	CompletionPercentage float32 `json:"completion_percentage,omitempty"`
	Name                 string  `json:"name,omitempty"`
	OwnedChallenges      float32 `json:"owned_challenges,omitempty"`
	TotalChallenges      float32 `json:"total_challenges,omitempty"`
}

// ChallengeList Schema definition for Challenge List
type ChallengeList struct {
	AuthUserHasReviewed bool             `json:"auth_user_has_reviewed,omitempty"`
	Avatar              string           `json:"avatar"`
	CategoryId          int              `json:"category_id,omitempty"`
	CategoryName        string           `json:"category_name,omitempty"`
	Difficulty          string           `json:"difficulty,omitempty"`
	DifficultyChart     DifficultyChart  `json:"difficulty_chart,omitempty"`
	Id                  int              `json:"id,omitempty"`
	IsOwned             bool             `json:"is_owned,omitempty"`
	Name                string           `json:"name,omitempty"`
	Pinned              bool             `json:"pinned,omitempty"`
	PlayMethods         StringArray      `json:"play_methods,omitempty"`
	Rating              float32          `json:"rating"`
	RatingCount         int              `json:"rating_count,omitempty"`
	ReleaseDate         time.Time        `json:"release_date,omitempty"`
	Retires             ChallengeRetires `json:"retires"`
	Solves              int              `json:"solves,omitempty"`
	State               string           `json:"state,omitempty"`
	UserDifficulty      string           `json:"user_difficulty,omitempty"`
}

// ChallengeListData defines model for ChallengeListData.
type ChallengeListData = []ChallengeList

// ChallengeListResponse Schema definition for Challenge List Response
type ChallengeListResponse struct {
	Data ChallengeListData `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// ChallengeOwnRequest Schema definition for Own Request
type ChallengeOwnRequest struct {
	ChallengeId int    `json:"challenge_id"`
	Difficulty  int    `json:"difficulty"`
	Flag        string `json:"flag"`
}

// ChallengeOwns defines model for ChallengeOwns.
type ChallengeOwns struct {
	// Category Schema definition for Common Id Name
	Category            CommonIdName `json:"category,omitempty"`
	ChallengeCategoryId int          `json:"challenge_category_id,omitempty"`
	Id                  int          `json:"id,omitempty"`
	Name                string       `json:"name,omitempty"`
}

// ChallengeRecommendedResponse Schema definition for Challenge Recommended Response
type ChallengeRecommendedResponse struct {
	// Card1 Schema definition for Recommended Card
	Card1 RecommendedCard `json:"card1,omitempty"`

	// Card2 Schema definition for Recommended Card
	Card2 RecommendedCard `json:"card2,omitempty"`
	State StringArray     `json:"state,omitempty"`
}

// ChallengeRecommendedRetiredResponse Schema definition for Challenge Recommended Retired Response
type ChallengeRecommendedRetiredResponse struct {
	// Card1 Schema definition for Recommended Card Retired
	Card1 RecommendedCardRetired `json:"card1,omitempty"`

	// Card2 Schema definition for Recommended Card Retired
	Card2 RecommendedCardRetired `json:"card2,omitempty"`
}

// ChallengeResponse Schema definition for Challenge Id Response
type ChallengeResponse struct {
	// Challenge Schema definition for Challenge
	Challenge Challenge `json:"challenge,omitempty"`
}

// ChallengeRetires defines model for ChallengeRetires.
type ChallengeRetires struct {
	Difficulty string `json:"difficulty,omitempty"`
	Name       string `json:"name,omitempty"`
}

// ChallengeReviewsUserIdResponse Schema definition for Challenge Reviews User Id Response
type ChallengeReviewsUserIdResponse struct {
	Info string `json:"info"`
}

// ChallengeStartResponse Schema definition for Challenge Start Response
type ChallengeStartResponse struct {
	Id      int    `json:"id,omitempty"`
	Message string `json:"message,omitempty"`
}

// ChallengeSuggestedData defines model for ChallengeSuggestedData.
type ChallengeSuggestedData struct {
	ChallengeCategoryName string      `json:"challenge_category_name,omitempty"`
	Id                    int         `json:"id,omitempty"`
	Name                  string      `json:"name,omitempty"`
	PlayMethods           StringArray `json:"play_methods,omitempty"`
	UrlName               string      `json:"url_name,omitempty"`
}

// ChallengeSuggestedResponse Schema definition for Challenge Suggested Response
type ChallengeSuggestedResponse struct {
	Data    ChallengeSuggestedData `json:"data,omitempty"`
	Message string                 `json:"message,omitempty"`
	Status  bool                   `json:"status,omitempty"`
}

// ChallengeWriteupResponse Schema definition for Challenge Writeup Response
type ChallengeWriteupResponse struct {
	Data WriteupData `json:"data,omitempty"`
}

// Change Schema definition for Change
type Change struct {
	ChangelogId int    `json:"changelog_id,omitempty"`
	Id          int    `json:"id,omitempty"`
	Text        string `json:"text,omitempty"`
	Type        string `json:"type,omitempty"`
}

// ChangeLog Schema definition for Change Log
type ChangeLog struct {
	Changes     Changes   `json:"changes,omitempty"`
	CreatedAt   time.Time `json:"created_at,omitempty"`
	Description string    `json:"description"`
	Id          int       `json:"id,omitempty"`
	Version     string    `json:"version,omitempty"`
}

// ChangeLogsItems defines model for ChangeLogsItems.
type ChangeLogsItems = []ChangeLog

// ChangeLogsResponse Schema definition for Change Logs Response
type ChangeLogsResponse struct {
	Changelogs ChangeLogsItems `json:"changelogs,omitempty"`
}

// Changes defines model for Changes.
type Changes = []Change

// CommonIdName Schema definition for Common Id Name
type CommonIdName struct {
	Id   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}

// Company Schema definition for Company
type Company struct {
	Description string `json:"description,omitempty"`
	Id          int    `json:"id,omitempty"`
	Image       string `json:"image,omitempty"`
	Name        string `json:"name,omitempty"`
	Url         string `json:"url,omitempty"`
}

// CompanyBasic defines model for CompanyBasic.
type CompanyBasic struct {
	Id   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
	Url  string `json:"url,omitempty"`
}

// Connection defines model for Connection.
type Connection struct {
	Down          float32 `json:"down,omitempty"`
	Ip4           string  `json:"ip4,omitempty"`
	Ip6           string  `json:"ip6,omitempty"`
	Name          string  `json:"name,omitempty"`
	ThroughPwnbox bool    `json:"through_pwnbox,omitempty"`
	Up            float32 `json:"up,omitempty"`
}

// ConnectionCompetitive defines model for ConnectionCompetitive.
type ConnectionCompetitive struct {
	// AssignedServer Schema definition for Assigned Server
	AssignedServer       ServerConnection  `json:"assigned_server"`
	Available            bool              `json:"available,omitempty"`
	CanAccess            bool              `json:"can_access,omitempty"`
	LocationTypeFriendly string            `json:"location_type_friendly,omitempty"`
	Machine              ConnectionMachine `json:"machine,omitempty"`
}

// ConnectionDataMachine defines model for ConnectionDataMachine.
type ConnectionDataMachine struct {
	AvatarThumbUrl string `json:"avatar_thumb_url,omitempty"`
	Id             int    `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
}

// ConnectionLab defines model for ConnectionLab.
type ConnectionLab struct {
	// AssignedServer Schema definition for Assigned Server
	AssignedServer       ServerConnection `json:"assigned_server"`
	CanAccess            bool             `json:"can_access,omitempty"`
	LocationTypeFriendly string           `json:"location_type_friendly,omitempty"`
}

// ConnectionMachine defines model for ConnectionMachine.
type ConnectionMachine struct {
	AvatarThumbUrl string `json:"avatar_thumb_url,omitempty"`
	Id             int    `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
}

// ConnectionProlab defines model for ConnectionProlab.
type ConnectionProlab struct {
	// AssignedServer Schema definition for Assigned Server
	AssignedServer ServerConnection    `json:"assigned_server"`
	CanAccess      bool                `json:"can_access,omitempty"`
	Fullhouse      ConnectionProlabLab `json:"fullhouse,omitempty"`
	Solar          ConnectionProlabLab `json:"solar,omitempty"`
}

// ConnectionProlabLab defines model for ConnectionProlabLab.
type ConnectionProlabLab struct {
	// AssignedServer Schema definition for Assigned Server
	AssignedServer       ServerConnection `json:"assigned_server"`
	CanAccess            bool             `json:"can_access,omitempty"`
	LocationTypeFriendly string           `json:"location_type_friendly"`

	// ProLab Schema definition for Common Id Name
	ProLab CommonIdName `json:"pro_lab,omitempty"`
}

// ConnectionServer defines model for ConnectionServer.
type ConnectionServer struct {
	FriendlyName string `json:"friendly_name,omitempty"`
	Hostname     string `json:"hostname,omitempty"`
	Id           int    `json:"id,omitempty"`
	ProLabId     int    `json:"pro_lab_id,omitempty"`
}

// ConnectionServerSwitchResponse Schema definition for Connection Server Switch Response
type ConnectionServerSwitchResponse struct {
	// Data Schema definition for Assigned Server
	Data    ServerConnection `json:"data"`
	Message string           `json:"message,omitempty"`
	Status  bool             `json:"status,omitempty"`
}

// ConnectionStatusItem defines model for ConnectionStatusItem.
type ConnectionStatusItem struct {
	Connection           Connection       `json:"connection,omitempty"`
	ConnectionType       string           `json:"connection_type,omitempty"`
	LocationTypeFriendly string           `json:"location_type_friendly,omitempty"`
	Server               ConnectionServer `json:"server,omitempty"`
	Type                 string           `json:"type,omitempty"`
}

// ConnectionStatusProductData defines model for ConnectionStatusProductData.
type ConnectionStatusProductData struct {
	Connection           Connection       `json:"connection,omitempty"`
	LocationTypeFriendly string           `json:"location_type_friendly,omitempty"`
	Server               ConnectionServer `json:"server,omitempty"`
}

// ConnectionStatusProductResponse defines model for ConnectionStatusProductResponse.
type ConnectionStatusProductResponse struct {
	Data   ConnectionStatusProductData `json:"data,omitempty"`
	Status bool                        `json:"status,omitempty"`
	Type   string                      `json:"type,omitempty"`
}

// ConnectionStatusResponse Schema definition for Connection Status Response
type ConnectionStatusResponse = []ConnectionStatusItem

// ConnectionsData defines model for ConnectionsData.
type ConnectionsData struct {
	Fortresses    ConnectionLab         `json:"fortresses,omitempty"`
	Lab           ConnectionLab         `json:"lab,omitempty"`
	ProLabs       ConnectionProlab      `json:"pro_labs,omitempty"`
	ReleaseArena  ConnectionCompetitive `json:"release_arena,omitempty"`
	StartingPoint ConnectionLab         `json:"starting_point,omitempty"`
}

// ConnectionsResponse Schema definition for Connections Response
type ConnectionsResponse struct {
	Data   ConnectionsData `json:"data,omitempty"`
	Status bool            `json:"status,omitempty"`
}

// ConnectionsServerData defines model for ConnectionsServerData.
type ConnectionsServerData struct {
	// Assigned Schema definition for Assigned Server
	Assigned AssignedServerConnectionsServers `json:"assigned"`
	Disabled bool                             `json:"disabled,omitempty"`

	// Options Schema definition for Options
	Options Options `json:"options,omitempty"`
}

// ConnectionsServerResponse Schema definition for Connections Server Response
type ConnectionsServerResponse struct {
	Data   ConnectionsServerData `json:"data,omitempty"`
	Status bool                  `json:"status,omitempty"`
}

// ConnectionsServersProlabData defines model for ConnectionsServersProlabData.
type ConnectionsServersProlabData struct {
	// Assigned Schema definition for Assigned Server
	Assigned AssignedServerConnectionsServers `json:"assigned"`

	// Options Schema definition for Options
	Options Options `json:"options,omitempty"`
}

// ConnectionsServersProlabResponse defines model for ConnectionsServersProlabResponse.
type ConnectionsServersProlabResponse struct {
	Data   ConnectionsServersProlabData `json:"data,omitempty"`
	Status bool                         `json:"status,omitempty"`
}

// ContentStatsResponse Schema definition for Content Stats Response
type ContentStatsResponse struct {
	Challenges int `json:"challenges,omitempty"`
	Machines   int `json:"machines,omitempty"`
}

// Country defines model for Country.
type Country struct {
	Code string `json:"code,omitempty"`
	Name string `json:"name,omitempty"`
}

// DashboardPlayers Schema definition for Dashboard Players
type DashboardPlayers struct {
	OnlinePlayers string `json:"online_players,omitempty"`
}

// DashboardTabloid defines model for DashboardTabloid.
type DashboardTabloid struct {
	Owns TabloidOwns `json:"owns,omitempty"`
}

// DesignatedLevel Schema definition for Designated Level
type DesignatedLevel struct {
	Category    string `json:"category,omitempty"`
	Description string `json:"description,omitempty"`
	Level       int    `json:"level,omitempty"`
	Team        string `json:"team,omitempty"`
}

// DifficultyChart defines model for DifficultyChart.
type DifficultyChart struct {
	union json.RawMessage
}

// DifficultyChart0 defines model for .
type DifficultyChart0 = []interface{}

// DifficultyChart1 defines model for .
type DifficultyChart1 struct {
	CounterBitHard   int `json:"counterBitHard,omitempty"`
	CounterBrainFuck int `json:"counterBrainFuck,omitempty"`
	CounterCake      int `json:"counterCake,omitempty"`
	CounterEasy      int `json:"counterEasy,omitempty"`
	CounterExHard    int `json:"counterExHard,omitempty"`
	CounterHard      int `json:"counterHard,omitempty"`
	CounterMedium    int `json:"counterMedium,omitempty"`
	CounterTooEasy   int `json:"counterTooEasy,omitempty"`
	CounterTooHard   int `json:"counterTooHard,omitempty"`
	CounterVeryEasy  int `json:"counterVeryEasy,omitempty"`
}

// EmptyArray defines model for EmptyArray.
type EmptyArray = []interface{}

// FaqItem Schema definition for Faq Item
type FaqItem struct {
	Answer   string `json:"answer,omitempty"`
	Generic  bool   `json:"generic,omitempty"`
	Question string `json:"question,omitempty"`
}

// Flag Schema definition for Flag
type Flag struct {
	Id     int    `json:"id,omitempty"`
	Owned  bool   `json:"owned,omitempty"`
	Points int    `json:"points,omitempty"`
	Title  string `json:"title,omitempty"`
}

// FlagRatingTask defines model for FlagRatingTask.
type FlagRatingTask struct {
	Completed      bool        `json:"completed,omitempty"`
	Description    string      `json:"description,omitempty"`
	FlagRating     int         `json:"flag_rating"`
	Hint           string      `json:"hint"`
	Id             int         `json:"id,omitempty"`
	MaskedFlag     string      `json:"masked_flag,omitempty"`
	Options        ObjectArray `json:"options,omitempty"`
	PrerequisiteId int         `json:"prerequisite_id"`
	TaskType       TaskType    `json:"task_type,omitempty"`
	Title          string      `json:"title,omitempty"`
	Type           TaskType    `json:"type,omitempty"`
}

// FlagRatingTaskExtension defines model for FlagRatingTaskExtension.
type FlagRatingTaskExtension struct {
	FlagRating int `json:"flag_rating"`
}

// FlagsItems defines model for FlagsItems.
type FlagsItems = []Flag

// FlagsToNextRank defines model for FlagsToNextRank.
type FlagsToNextRank struct {
	union json.RawMessage
}

// FlagsToNextRank0 defines model for .
type FlagsToNextRank0 struct {
	Obtained int `json:"obtained,omitempty"`
	Total    int `json:"total,omitempty"`
}

// FlagsToNextRank1 defines model for .
type FlagsToNextRank1 = []interface{}

// FollowerItems defines model for FollowerItems.
type FollowerItems = []TopUserItem

// Fortress Schema definition for Fortress
type Fortress struct {
	CoverImageUrl string `json:"cover_image_url,omitempty"`
	Id            int    `json:"id,omitempty"`
	Image         string `json:"image,omitempty"`
	Name          string `json:"name,omitempty"`
	New           bool   `json:"new,omitempty"`
	NumberOfFlags int    `json:"number_of_flags,omitempty"`
}

// FortressData Schema definition for Fortress Data
type FortressData struct {
	// Company Schema definition for Company
	Company              Company    `json:"company,omitempty"`
	CompletionMessage    string     `json:"completion_message"`
	CoverImageUrl        string     `json:"cover_image_url,omitempty"`
	Description          string     `json:"description,omitempty"`
	Flags                FlagsItems `json:"flags,omitempty"`
	HasCompletionMessage bool       `json:"has_completion_message,omitempty"`
	Id                   int        `json:"id,omitempty"`
	Image                string     `json:"image,omitempty"`
	Ip                   string     `json:"ip,omitempty"`
	Name                 string     `json:"name,omitempty"`
	PlayersCompleted     int        `json:"players_completed,omitempty"`
	Points               string     `json:"points,omitempty"`
	ProgressPercent      float32    `json:"progress_percent,omitempty"`
	ResetVotes           int        `json:"reset_votes,omitempty"`

	// UserAvailability Schema definition for User Availability
	UserAvailability UserAvailability `json:"user_availability,omitempty"`
}

// FortressIdResponse Schema definition for Fortress Id Response
type FortressIdResponse struct {
	// Data Schema definition for Fortress Data
	Data   FortressData `json:"data,omitempty"`
	Status bool         `json:"status,omitempty"`
}

// FortressesResponse Schema definition for Fortresses Response
type FortressesResponse struct {
	Data   map[string]Fortress `json:"data,omitempty"`
	Status bool                `json:"status,omitempty"`
}

// GameResetResponse Vote Reset Game
type GameResetResponse struct {
	Message string `json:"message,omitempty"`
	Status  bool   `json:"status,omitempty"`
}

// Generic400Message defines model for Generic400Message.
type Generic400Message struct {
	Message string `json:"message,omitempty"`
	Status  bool   `json:"status,omitempty"`
}

// GroupItems defines model for GroupItems.
type GroupItems = []SeasonRewardGroupItem

// Growths defines model for Growths.
type Growths struct {
	ComparedToDate time.Time `json:"compared_to_date,omitempty"`
	Points         int       `json:"points,omitempty"`
	PointsGrowth   float32   `json:"points_growth,omitempty"`
	PreviousPoints int       `json:"previous_points,omitempty"`
	PreviousRank   int       `json:"previous_rank,omitempty"`
	Rank           int       `json:"rank,omitempty"`
	RankGrowth     float32   `json:"rank_growth,omitempty"`
}

// HelpfulReviews defines model for HelpfulReviews.
type HelpfulReviews struct {
	Id       int `json:"id,omitempty"`
	ReviewId int `json:"review_id,omitempty"`
	UserId   int `json:"user_id,omitempty"`
}

// HelpfulReviewsItems defines model for HelpfulReviewsItems.
type HelpfulReviewsItems = []HelpfulReviews

// HomeBannerItem defines model for HomeBannerItem.
type HomeBannerItem struct {
	Image     string `json:"image,omitempty"`
	Link      string `json:"link,omitempty"`
	NewWindow bool   `json:"new_window,omitempty"`
}

// HomeBannerItems defines model for HomeBannerItems.
type HomeBannerItems = []HomeBannerItem

// HomeBannerResponse Schema definition for Home Banner Response
type HomeBannerResponse struct {
	Data HomeBannerItems `json:"data,omitempty"`
}

// HomeProgresTracksCardItem defines model for HomeProgresTracksCardItem.
type HomeProgresTracksCardItem struct {
	Avatar     string  `json:"avatar,omitempty"`
	Difficulty string  `json:"difficulty,omitempty"`
	Id         int     `json:"id,omitempty"`
	Name       string  `json:"name,omitempty"`
	Percentage float32 `json:"percentage,omitempty"`
	Points     int     `json:"points,omitempty"`
	Url        string  `json:"url,omitempty"`
}

// HomeProgressMachineCard Schema definition for Home Machine Card
type HomeProgressMachineCard = []HomeProgressMachineCardItem

// HomeProgressMachineCardItem defines model for HomeProgressMachineCardItem.
type HomeProgressMachineCardItem struct {
	Avatar     string  `json:"avatar,omitempty"`
	Difficulty string  `json:"difficulty,omitempty"`
	Id         int     `json:"id,omitempty"`
	Name       string  `json:"name,omitempty"`
	Os         string  `json:"os,omitempty"`
	Points     float32 `json:"points"`
	RootFlag   int     `json:"root_flag,omitempty"`
	Url        string  `json:"url,omitempty"`
	UserFlag   int     `json:"user_flag,omitempty"`
}

// HomeProgressProlabCard Schema definition for Home Prolab Card
type HomeProgressProlabCard = []HomeProgressProlabItems

// HomeProgressProlabItems defines model for HomeProgressProlabItems.
type HomeProgressProlabItems struct {
	Avatar     string  `json:"avatar"`
	Difficulty string  `json:"difficulty,omitempty"`
	Id         int     `json:"id,omitempty"`
	Identifier string  `json:"identifier,omitempty"`
	Name       string  `json:"name,omitempty"`
	Percentage float32 `json:"percentage,omitempty"`
	Points     string  `json:"points,omitempty"`
}

// HomeProgressTracksCard Schema definition for Home Tracks Card
type HomeProgressTracksCard map[string]HomeProgresTracksCardItem

// HomeRecommendedChallengeCard Schema definition for Home Challenge Card
type HomeRecommendedChallengeCard = []HomeRecommendedChallengeItems

// HomeRecommendedChallengeItems defines model for HomeRecommendedChallengeItems.
type HomeRecommendedChallengeItems struct {
	Avatar     string `json:"avatar,omitempty"`
	CategoryID int    `json:"categoryID,omitempty"`
	Difficulty string `json:"difficulty,omitempty"`
	Id         int    `json:"id,omitempty"`
	Name       string `json:"name,omitempty"`
	Points     int    `json:"points"`
	Type       string `json:"type,omitempty"`
	Url        string `json:"url,omitempty"`
	UrlName    string `json:"urlName,omitempty"`
}

// HomeRecommendedData defines model for HomeRecommendedData.
type HomeRecommendedData struct {
	// Challenges Schema definition for Home Challenge Card
	Challenges HomeRecommendedChallengeCard `json:"challenges,omitempty"`

	// Machines Schema definition for Home Machine Card
	Machines HomeRecommendedMachineCard `json:"machines,omitempty"`

	// Prolabs Schema definition for Home Prolab Card
	Prolabs HomeRecommendedProlabCard `json:"prolabs,omitempty"`

	// Sherlocks Schema definition for Home Tracks Card
	Sherlocks HomeRecommendedSherlocksCard `json:"sherlocks,omitempty"`

	// Sps Schema definition for Home Sps Card
	Sps SpsCard `json:"sps,omitempty"`

	// Tracks Schema definition for Home Tracks Card
	Tracks HomeRecommendedTracksCard `json:"tracks,omitempty"`
}

// HomeRecommendedMachineCard Schema definition for Home Machine Card
type HomeRecommendedMachineCard = []HomeRecommendedMachineCardItem

// HomeRecommendedMachineCardItem defines model for HomeRecommendedMachineCardItem.
type HomeRecommendedMachineCardItem struct {
	Avatar     string  `json:"avatar,omitempty"`
	Difficulty string  `json:"difficulty,omitempty"`
	Id         int     `json:"id,omitempty"`
	Name       string  `json:"name,omitempty"`
	Os         string  `json:"os,omitempty"`
	Points     float32 `json:"points"`
	Type       string  `json:"type,omitempty"`
	Url        string  `json:"url,omitempty"`
}

// HomeRecommendedProlabCard Schema definition for Home Prolab Card
type HomeRecommendedProlabCard = []HomeRecommendedProlabCardItem

// HomeRecommendedProlabCardItem defines model for HomeRecommendedProlabCardItem.
type HomeRecommendedProlabCardItem struct {
	Avatar     string `json:"avatar"`
	Difficulty string `json:"difficulty,omitempty"`
	Id         int    `json:"id,omitempty"`
	Identifier string `json:"identifier,omitempty"`
	Name       string `json:"name,omitempty"`
	Points     int    `json:"points,omitempty"`
	Type       string `json:"type,omitempty"`
	Url        string `json:"url,omitempty"`
}

// HomeRecommendedRepsonse Schema definition for Home Recommended Repsonse
type HomeRecommendedRepsonse struct {
	Data HomeRecommendedData `json:"data,omitempty"`
}

// HomeRecommendedSherlocksCard Schema definition for Home Tracks Card
type HomeRecommendedSherlocksCard = []HomeRecommendedSherlocksCardItem

// HomeRecommendedSherlocksCardItem defines model for HomeRecommendedSherlocksCardItem.
type HomeRecommendedSherlocksCardItem struct {
	Avatar     string `json:"avatar,omitempty"`
	CategoryID int    `json:"categoryID,omitempty"`
	Difficulty string `json:"difficulty,omitempty"`
	Id         int    `json:"id,omitempty"`
	Name       string `json:"name,omitempty"`
	Type       string `json:"type,omitempty"`
	Url        string `json:"url,omitempty"`
	UrlName    string `json:"urlName,omitempty"`
}

// HomeRecommendedTracksCard Schema definition for Home Tracks Card
type HomeRecommendedTracksCard = []HomeRecommendedTracksCardItem

// HomeRecommendedTracksCardItem defines model for HomeRecommendedTracksCardItem.
type HomeRecommendedTracksCardItem struct {
	Avatar     string `json:"avatar,omitempty"`
	Difficulty string `json:"difficulty,omitempty"`
	Id         int    `json:"id,omitempty"`
	Name       string `json:"name,omitempty"`
	Points     int    `json:"points,omitempty"`
	Progress   int    `json:"progress,omitempty"`
	Url        string `json:"url,omitempty"`
}

// HomeTodoChallengeCard Schema definition for Home Challenge Card
type HomeTodoChallengeCard = []HomeTodoChallengeCardItem

// HomeTodoChallengeCardItem defines model for HomeTodoChallengeCardItem.
type HomeTodoChallengeCardItem struct {
	Avatar              string `json:"avatar,omitempty"`
	ChallengeCategoryId int    `json:"challenge_category_id,omitempty"`
	Difficulty          string `json:"difficulty,omitempty"`
	Id                  int    `json:"id,omitempty"`
	Name                string `json:"name,omitempty"`
	Points              string `json:"points"`
	Url                 string `json:"url,omitempty"`
	UrlName             string `json:"url_name,omitempty"`
}

// HomeTodoMachineCard Schema definition for Home Machine Card
type HomeTodoMachineCard = []HomeTodoMachineCardItem

// HomeTodoMachineCardItem defines model for HomeTodoMachineCardItem.
type HomeTodoMachineCardItem struct {
	Avatar       string  `json:"avatar,omitempty"`
	Difficulty   string  `json:"difficulty,omitempty"`
	Id           int     `json:"id,omitempty"`
	Name         string  `json:"name,omitempty"`
	Os           string  `json:"os,omitempty"`
	Points       float32 `json:"points"`
	RootFlag     bool    `json:"root_flag,omitempty"`
	RootFlagOnly bool    `json:"root_flag_only,omitempty"`
	Url          string  `json:"url,omitempty"`
	UserFlag     bool    `json:"user_flag,omitempty"`
}

// HomeTodoProlabCard Schema definition for Home Prolab Card
type HomeTodoProlabCard = []HomeTodoProlabCardItem

// HomeTodoProlabCardItem defines model for HomeTodoProlabCardItem.
type HomeTodoProlabCardItem struct {
	Avatar     string  `json:"avatar"`
	Difficulty string  `json:"difficulty,omitempty"`
	Id         int     `json:"id,omitempty"`
	Identifier string  `json:"identifier,omitempty"`
	Name       string  `json:"name,omitempty"`
	Points     string  `json:"points,omitempty"`
	Progress   float32 `json:"progress,omitempty"`
	Url        string  `json:"url,omitempty"`
}

// HomeUserProgressData defines model for HomeUserProgressData.
type HomeUserProgressData struct {
	Fortresses HomeUserProgressFortressesCard `json:"fortresses,omitempty"`

	// Machines Schema definition for Home Machine Card
	Machines HomeProgressMachineCard `json:"machines,omitempty"`

	// Prolabs Schema definition for Home Prolab Card
	Prolabs HomeProgressProlabCard `json:"prolabs,omitempty"`

	// Sps Schema definition for Home Sps Card
	Sps SpsCard `json:"sps,omitempty"`

	// Tracks Schema definition for Home Tracks Card
	Tracks HomeProgressTracksCard `json:"tracks,omitempty"`
}

// HomeUserProgressFortressItem defines model for HomeUserProgressFortressItem.
type HomeUserProgressFortressItem struct {
	Avatar     string  `json:"avatar,omitempty"`
	Id         int     `json:"id,omitempty"`
	Name       string  `json:"name,omitempty"`
	Percentage float32 `json:"percentage,omitempty"`
	Points     int     `json:"points,omitempty"`
	Url        string  `json:"url,omitempty"`
}

// HomeUserProgressFortressesCard defines model for HomeUserProgressFortressesCard.
type HomeUserProgressFortressesCard map[string]HomeUserProgressFortressItem

// HomeUserProgressResponse Schema definition for Home User Progress Response
type HomeUserProgressResponse struct {
	Data HomeUserProgressData `json:"data,omitempty"`
}

// HomeUserTodoData defines model for HomeUserTodoData.
type HomeUserTodoData struct {
	// Challenges Schema definition for Home Challenge Card
	Challenges HomeTodoChallengeCard `json:"challenges,omitempty"`

	// Machines Schema definition for Home Machine Card
	Machines HomeTodoMachineCard `json:"machines,omitempty"`

	// Prolabs Schema definition for Home Prolab Card
	Prolabs HomeTodoProlabCard `json:"prolabs,omitempty"`

	// Tracks Schema definition for Home Tracks Card
	Tracks HomeRecommendedTracksCard `json:"tracks,omitempty"`
}

// HomeUserTodoRepsonse Schema definition for Home User Todo Repsonse
type HomeUserTodoRepsonse struct {
	Data HomeUserTodoData `json:"data,omitempty"`
}

// InfoArray defines model for InfoArray.
type InfoArray = []Item

// IntArray defines model for IntArray.
type IntArray = []int

// Item defines model for Item.
type Item struct {
	Id int `json:"id,omitempty"`
}

// KeyedProLabMileStone defines model for KeyedProLabMileStone.
type KeyedProLabMileStone struct {
	Description        string  `json:"description,omitempty"`
	Icon               string  `json:"icon,omitempty"`
	IsMilestoneReached bool    `json:"isMilestoneReached,omitempty"`
	Percent            float32 `json:"percent,omitempty"`
	Rarity             float32 `json:"rarity,omitempty"`
	Text               string  `json:"text,omitempty"`
}

// KeyedProlabMileStoneItems defines model for KeyedProlabMileStoneItems.
type KeyedProlabMileStoneItems = []KeyedProLabMileStone

// LabCategory Schema definition for Lab Category
type LabCategory struct {
	Code     string `json:"code,omitempty"`
	Location string `json:"location,omitempty"`
	Name     string `json:"name,omitempty"`
}

// LabListCategoriesItems defines model for LabListCategoriesItems.
type LabListCategoriesItems = []LabCategory

// LabListResponse Schema definition for Lab List Response
type LabListResponse struct {
	Disabled         bool                   `json:"disabled,omitempty"`
	LabCategories    LabListCategoriesItems `json:"lab_categories,omitempty"`
	LabCategoryCode  string                 `json:"lab_category_code,omitempty"`
	ReleaseArenaLabs LabListCategoriesItems `json:"release_arena_labs,omitempty"`
	ServerId         int                    `json:"server_id,omitempty"`
	Servers          LabListServersItems    `json:"servers,omitempty"`
}

// LabListServersItems defines model for LabListServersItems.
type LabListServersItems = []LabServer

// LabMasterItems defines model for LabMasterItems.
type LabMasterItems = []UserIdNameThumb

// LabServer Schema definition for Lab Server
type LabServer struct {
	CurrentClients int    `json:"current_clients,omitempty"`
	FriendlyName   string `json:"friendly_name,omitempty"`
	Id             int    `json:"id,omitempty"`
}

// Label Schema definition for Label
type Label struct {
	Color string `json:"color,omitempty"`
	Name  string `json:"name,omitempty"`
}

// LabelItems defines model for LabelItems.
type LabelItems = []Label

// Links Schema definition for Links
type Links struct {
	First string `json:"first,omitempty"`
	Last  string `json:"last,omitempty"`
	Next  string `json:"next"`
	Prev  string `json:"prev"`
}

// Machine Schema definition for Machine
type Machine struct {
	AvatarThumbUrl string `json:"avatar_thumb_url,omitempty"`
	Id             int    `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
	Os             string `json:"os,omitempty"`
}

// MachineAcitivtyItem defines model for MachineAcitivtyItem.
type MachineAcitivtyItem struct {
	BloodType  string `json:"blood_type"`
	CreatedAt  string `json:"created_at,omitempty"`
	Date       string `json:"date,omitempty"`
	DateDiff   string `json:"date_diff,omitempty"`
	Type       string `json:"type,omitempty"`
	UserAvatar string `json:"user_avatar,omitempty"`
	UserId     int    `json:"user_id,omitempty"`
	UserName   string `json:"user_name,omitempty"`
}

// MachineActivityIdResponse Schema definition for Machine Activity Id Response
type MachineActivityIdResponse struct {
	Info MachineActivityInfo `json:"info,omitempty"`
}

// MachineActivityInfo defines model for MachineActivityInfo.
type MachineActivityInfo struct {
	Activity MachineActivityItems `json:"activity,omitempty"`
	Server   string               `json:"server,omitempty"`
}

// MachineActivityItems defines model for MachineActivityItems.
type MachineActivityItems = []MachineAcitivtyItem

// MachineAttackDetails Schema definition for Machine Attack Details
type MachineAttackDetails struct {
	MachineAttackPaths TeamMachineAttackPaths `json:"machine_attack_paths,omitempty"`

	// MachineOwns Schema definition for Machine Owns Card
	MachineOwns MachineOwnsCard `json:"machine_owns,omitempty"`
}

// MachineAttackPathItem defines model for MachineAttackPathItem.
type MachineAttackPathItem struct {
	AvgUniversitysSolved float32 `json:"avg_universitys_solved,omitempty"`
	Name                 string  `json:"name,omitempty"`
	Solved               float32 `json:"solved,omitempty"`
	Total                float32 `json:"total,omitempty"`
}

// MachineAttackPaths defines model for MachineAttackPaths.
type MachineAttackPaths struct {
	EnterpriseNetwork       MachineAttackPathItem `json:"Enterprise Network,omitempty"`
	Forensics               MachineAttackPathItem `json:"Forensics,omitempty"`
	IoT                     MachineAttackPathItem `json:"IoT,omitempty"`
	Mobile                  MachineAttackPathItem `json:"Mobile,omitempty"`
	NicheTechnologies       MachineAttackPathItem `json:"Niche Technologies,omitempty"`
	Person                  MachineAttackPathItem `json:"Person,omitempty"`
	Reconnaissance          MachineAttackPathItem `json:"Reconnaissance,omitempty"`
	SecurityOperations      MachineAttackPathItem `json:"Security Operations,omitempty"`
	VulnerabilityAssessment MachineAttackPathItem `json:"Vulnerability Assessment,omitempty"`
	WebApplication          MachineAttackPathItem `json:"Web Application,omitempty"`
}

// MachineCard1 Schema definition for Machine Card
type MachineCard1 struct {
	Avatar         string        `json:"avatar,omitempty"`
	DifficultyText string        `json:"difficultyText,omitempty"`
	Id             int           `json:"id,omitempty"`
	IsTodo         bool          `json:"isTodo,omitempty"`
	Maker          UserBasicInfo `json:"maker"`
	Maker2         UserBasicInfo `json:"maker2"`
	Name           string        `json:"name,omitempty"`
	Os             string        `json:"os,omitempty"`
	Points         int           `json:"points,omitempty"`
	Release        time.Time     `json:"release,omitempty"`
	Retired        int           `json:"retired,omitempty"`
	RetiredId      int           `json:"retired_id,omitempty"`
	TypeCard       string        `json:"typeCard,omitempty"`
}

// MachineCard2 Schema definition for Machine Card
type MachineCard2 struct {
	AuthUserInRootOwns bool            `json:"authUserInRootOwns,omitempty"`
	AuthUserInUserOwns bool            `json:"authUserInUserOwns,omitempty"`
	Avatar             string          `json:"avatar,omitempty"`
	DifficultyText     string          `json:"difficultyText,omitempty"`
	FeedbackForChart   DifficultyChart `json:"feedbackForChart,omitempty"`
	Id                 int             `json:"id,omitempty"`
	Name               string          `json:"name,omitempty"`
	Os                 string          `json:"os,omitempty"`
	Points             int             `json:"points,omitempty"`
	Release            time.Time       `json:"release,omitempty"`
	Retired            int             `json:"retired,omitempty"`
	RetiredDate        time.Time       `json:"retired_date"`
	RootOwnsCount      int             `json:"root_owns_count,omitempty"`
	Stars              float32         `json:"stars,omitempty"`
	TypeCard           string          `json:"typeCard,omitempty"`
	UserOwnsCount      int             `json:"user_owns_count,omitempty"`
}

// MachineChangeLogItem defines model for MachineChangeLogItem.
type MachineChangeLogItem struct {
	CreatedAt   string `json:"created_at,omitempty"`
	Description string `json:"description,omitempty"`
	Id          int    `json:"id,omitempty"`
	MachineId   int    `json:"machine_id,omitempty"`
	Released    int    `json:"released,omitempty"`
	Title       string `json:"title,omitempty"`
	Type        string `json:"type,omitempty"`
	UpdatedAt   string `json:"updated_at,omitempty"`
	UserId      int    `json:"user_id,omitempty"`
}

// MachineChangeLogItems defines model for MachineChangeLogItems.
type MachineChangeLogItems = []MachineChangeLogItem

// MachineChangelogIdResponse Schema definition for Machine Changelog Id Response
type MachineChangelogIdResponse struct {
	Info MachineChangeLogItems `json:"info,omitempty"`
}

// MachineCreatorResponse Schema definition for Machine Creator Resposne
type MachineCreatorResponse struct {
	Cocreators UserBasicInfoItemsWithRespect `json:"cocreators"`
	Creator    UserBasicInfoItemsWithRespect `json:"creator"`
}

// MachineData Schema definition for Machine Data
type MachineData struct {
	Active              bool               `json:"active"`
	AuthUserHasReviewed bool               `json:"authUserHasReviewed,omitempty"`
	AuthUserInRootOwns  bool               `json:"authUserInRootOwns,omitempty"`
	AuthUserInUserOwns  bool               `json:"authUserInUserOwns,omitempty"`
	Avatar              string             `json:"avatar,omitempty"`
	Difficulty          int                `json:"difficulty,omitempty"`
	DifficultyText      string             `json:"difficultyText,omitempty"`
	EasyMonth           int                `json:"easy_month,omitempty"`
	FeedbackForChart    DifficultyChart    `json:"feedbackForChart,omitempty"`
	Free                bool               `json:"free,omitempty"`
	Id                  int                `json:"id,omitempty"`
	Ip                  string             `json:"ip"`
	IsTodo              MachineData_IsTodo `json:"isTodo,omitempty"`
	IsCompetitive       bool               `json:"is_competitive,omitempty"`
	Labels              LabelItems         `json:"labels,omitempty"`
	Name                string             `json:"name,omitempty"`
	Os                  string             `json:"os,omitempty"`
	PlayInfo            MachinePlayInfo    `json:"playInfo,omitempty"`
	Points              int                `json:"points,omitempty"`
	Poweroff            int                `json:"poweroff,omitempty"`
	Recommended         int                `json:"recommended,omitempty"`
	Release             time.Time          `json:"release,omitempty"`
	RootOwnsCount       int                `json:"root_owns_count,omitempty"`
	SpFlag              int                `json:"sp_flag,omitempty"`
	Star                float32            `json:"star,omitempty"`
	StaticPoints        int                `json:"static_points,omitempty"`
	UserOwnsCount       int                `json:"user_owns_count,omitempty"`
}

// MachineDataIsTodo0 defines model for .
type MachineDataIsTodo0 = bool

// MachineDataIsTodo1 defines model for .
type MachineDataIsTodo1 = int

// MachineData_IsTodo defines model for MachineData.IsTodo.
type MachineData_IsTodo struct {
	union json.RawMessage
}

// MachineGraphActivityIdResponse Schema definition for Machine Graph Activity Id Response
type MachineGraphActivityIdResponse struct {
	Info MachineGraphActivityInfo `json:"info,omitempty"`
}

// MachineGraphActivityInfo defines model for MachineGraphActivityInfo.
type MachineGraphActivityInfo struct {
	Periods    PeriodsStringArray `json:"periods,omitempty"`
	Resets     IntArray           `json:"resets,omitempty"`
	SystemOwns IntArray           `json:"system_owns,omitempty"`
	UserOwns   IntArray           `json:"user_owns,omitempty"`
}

// MachineGraphMatrixIdResponse Schema definition for Machine Graph Matrix Id Response
type MachineGraphMatrixIdResponse struct {
	Info MachineGraphMatrixInfo `json:"info,omitempty"`
}

// MachineGraphMatrixInfo defines model for MachineGraphMatrixInfo.
type MachineGraphMatrixInfo struct {
	Aggregate MatrixInfo `json:"aggregate,omitempty"`
	Maker     MatrixInfo `json:"maker,omitempty"`
	User      MatrixInfo `json:"user,omitempty"`
}

// MachineGraphOwnsDifficultyIdResponse Schema definition for Machine Graph Owns Difficulty Id Response
type MachineGraphOwnsDifficultyIdResponse struct {
	Info MachineGraphOwnsDifficultyInfoItems `json:"info,omitempty"`
}

// MachineGraphOwnsDifficultyInfoItem defines model for MachineGraphOwnsDifficultyInfoItem.
type MachineGraphOwnsDifficultyInfoItem struct {
	Root int `json:"root,omitempty"`
	User int `json:"user,omitempty"`
}

// MachineGraphOwnsDifficultyInfoItems defines model for MachineGraphOwnsDifficultyInfoItems.
type MachineGraphOwnsDifficultyInfoItems struct {
	N1  MachineGraphOwnsDifficultyInfoItem `json:"1,omitempty"`
	N10 MachineGraphOwnsDifficultyInfoItem `json:"10,omitempty"`
	N2  MachineGraphOwnsDifficultyInfoItem `json:"2,omitempty"`
	N3  MachineGraphOwnsDifficultyInfoItem `json:"3,omitempty"`
	N4  MachineGraphOwnsDifficultyInfoItem `json:"4,omitempty"`
	N5  MachineGraphOwnsDifficultyInfoItem `json:"5,omitempty"`
	N6  MachineGraphOwnsDifficultyInfoItem `json:"6,omitempty"`
	N7  MachineGraphOwnsDifficultyInfoItem `json:"7,omitempty"`
	N8  MachineGraphOwnsDifficultyInfoItem `json:"8,omitempty"`
	N9  MachineGraphOwnsDifficultyInfoItem `json:"9,omitempty"`
}

// MachineOwns defines model for MachineOwns.
type MachineOwns struct {
	Solved float32 `json:"solved,omitempty"`
	Total  float32 `json:"total,omitempty"`
}

// MachineOwnsCard Schema definition for Machine Owns Card
type MachineOwnsCard struct {
	Solved int `json:"solved,omitempty"`
	Total  int `json:"total,omitempty"`
}

// MachineOwnsItems defines model for MachineOwnsItems.
type MachineOwnsItems = []MachineOwnsTopItem

// MachineOwnsTabloid defines model for MachineOwnsTabloid.
type MachineOwnsTabloid struct {
	AvatarThumpUrl string `json:"avatar_thump_url,omitempty"`
	AvatarUrl      string `json:"avatar_url,omitempty"`
	Id             int    `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
}

// MachineOwnsTopIdResponse Schema definition for Machine Owns Top Id Response
type MachineOwnsTopIdResponse struct {
	Info MachineOwnsItems `json:"info,omitempty"`
}

// MachineOwnsTopItem defines model for MachineOwnsTopItem.
type MachineOwnsTopItem struct {
	Avatar      string `json:"avatar,omitempty"`
	Id          int    `json:"id,omitempty"`
	IsRootBlood bool   `json:"is_root_blood,omitempty"`
	IsUserBlood bool   `json:"is_user_blood,omitempty"`
	Name        string `json:"name,omitempty"`
	OwnDate     string `json:"own_date,omitempty"`
	Position    int    `json:"position,omitempty"`
	RankId      int    `json:"rank_id,omitempty"`
	RankText    string `json:"rank_text,omitempty"`
	RootOwnTime string `json:"root_own_time,omitempty"`
	UserOwnDate string `json:"user_own_date,omitempty"`
	UserOwnTime string `json:"user_own_time,omitempty"`
}

// MachinePlayInfo defines model for MachinePlayInfo.
type MachinePlayInfo struct {
	ExpiresAt string `json:"expires_at"`
	IsActive  bool   `json:"isActive"`
}

// MachineProfileInfo Schema definition for Machine Profile Info
type MachineProfileInfo struct {
	AcademyModules             AcademyModulesItems `json:"academy_modules"`
	Active                     bool                `json:"active,omitempty"`
	AuthUserFirstRootTime      string              `json:"authUserFirstRootTime"`
	AuthUserFirstUserTime      string              `json:"authUserFirstUserTime"`
	AuthUserHasReviewed        bool                `json:"authUserHasReviewed,omitempty"`
	AuthUserHasSubmittedMatrix bool                `json:"authUserHasSubmittedMatrix,omitempty"`
	AuthUserInRootOwns         bool                `json:"authUserInRootOwns,omitempty"`
	AuthUserInUserOwns         bool                `json:"authUserInUserOwns,omitempty"`
	Avatar                     string              `json:"avatar,omitempty"`
	CanAccessWalkthrough       bool                `json:"can_access_walkthrough,omitempty"`
	DifficultyText             string              `json:"difficultyText,omitempty"`
	FeedbackForChart           DifficultyChart     `json:"feedbackForChart,omitempty"`
	Free                       bool                `json:"free,omitempty"`
	HasChangelog               bool                `json:"has_changelog,omitempty"`
	Id                         int                 `json:"id,omitempty"`
	InfoStatus                 string              `json:"info_status"`
	Ip                         string              `json:"ip"`
	IsGuidedEnabled            bool                `json:"isGuidedEnabled,omitempty"`
	IsSingleFlag               bool                `json:"isSingleFlag,omitempty"`
	IsTodo                     bool                `json:"isTodo,omitempty"`
	MachineMode                string              `json:"machine_mode"`

	// Maker Schema definition for Maker
	Maker Maker `json:"maker"`

	// Maker2 Schema definition for Maker
	Maker2  Maker  `json:"maker2"`
	Name    string `json:"name,omitempty"`
	Os      string `json:"os,omitempty"`
	OwnRank int    `json:"ownRank"`

	// PlayInfo Schema definition for Play Info
	PlayInfo             PlayInfoCasing `json:"playInfo,omitempty"`
	Points               int            `json:"points,omitempty"`
	PriceTier            int            `json:"priceTier,omitempty"`
	Recommended          bool           `json:"recommended,omitempty"`
	Release              time.Time      `json:"release,omitempty"`
	RequiredSubscription string         `json:"requiredSubscription"`
	Retired              bool           `json:"retired,omitempty"`
	ReviewsCount         int            `json:"reviews_count,omitempty"`

	// RootBlood Schema definition for Blood Info
	RootBlood           BloodInfo `json:"rootBlood,omitempty"`
	RootOwnsCount       int       `json:"root_owns_count,omitempty"`
	SeasonId            int       `json:"season_id"`
	ShowGoVip           bool      `json:"show_go_vip,omitempty"`
	ShowGoVipServer     bool      `json:"show_go_vip_server,omitempty"`
	SpFlag              int       `json:"sp_flag,omitempty"`
	Stars               float32   `json:"stars,omitempty"`
	StartMode           string    `json:"start_mode,omitempty"`
	StaticPoints        int       `json:"static_points,omitempty"`
	SwitchServerWarning string    `json:"switchServerWarning"`
	Synopsis            string    `json:"synopsis"`

	// UserBlood Schema definition for Blood Info
	UserBlood     BloodInfo `json:"userBlood,omitempty"`
	UserCanReview bool      `json:"user_can_review,omitempty"`
	UserOwnsCount int       `json:"user_owns_count,omitempty"`
}

// MachineProfileResponse Schema definition for Machine Profile Response
type MachineProfileResponse struct {
	// Info Schema definition for Machine Profile Info
	Info MachineProfileInfo `json:"info,omitempty"`
}

// MachineRecommendedRetiredCard defines model for MachineRecommendedRetiredCard.
type MachineRecommendedRetiredCard struct {
	Avatar           string          `json:"avatar,omitempty"`
	DifficultyText   string          `json:"difficultyText,omitempty"`
	FeedbackForChart DifficultyChart `json:"feedbackForChart,omitempty"`
	Id               int             `json:"id,omitempty"`
	Name             string          `json:"name,omitempty"`
	Os               string          `json:"os,omitempty"`
	Release          string          `json:"release,omitempty"`
	Retired          int             `json:"retired,omitempty"`
	RetiredDate      string          `json:"retired_date,omitempty"`
}

// MachineRecommendedRetiredResponse Schema definition for Machine Recommended Retired Response
type MachineRecommendedRetiredResponse struct {
	Card1 MachineRecommendedRetiredCard `json:"card1,omitempty"`
	Card2 MachineRecommendedRetiredCard `json:"card2,omitempty"`
}

// MachineRetiring defines model for MachineRetiring.
type MachineRetiring struct {
	Avatar         string `json:"avatar,omitempty"`
	DifficultyText string `json:"difficulty_text,omitempty"`
	Id             int    `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
	Os             string `json:"os,omitempty"`
}

// MachineReview Schema definition for Machine Review
type MachineReview struct {
	Id       int  `json:"id,omitempty"`
	Reviewed bool `json:"reviewed,omitempty"`
}

// MachineReviewMessageItems defines model for MachineReviewMessageItems.
type MachineReviewMessageItems = []MachineReview

// MachineReviewRequest Schema definition for Machine Review Request
type MachineReviewRequest struct {
	Headline string  `json:"headline"`
	Id       int     `json:"id"`
	Review   string  `json:"review"`
	Stars    float32 `json:"stars"`
}

// MachineReviewResponse Schema definition for Machine Review Response
type MachineReviewResponse struct {
	Message MachineReviewMessageItems `json:"message,omitempty"`
}

// MachineReviewsMessageItem defines model for MachineReviewsMessageItem.
type MachineReviewsMessageItem struct {
	AuthUserInHelpfulReviews bool                `json:"authUserInHelpfulReviews,omitempty"`
	CreatedAt                string              `json:"created_at,omitempty"`
	Difficulty               int                 `json:"difficulty"`
	Featured                 int                 `json:"featured,omitempty"`
	Headline                 string              `json:"headline"`
	HelpfulReviews           HelpfulReviewsItems `json:"helpful_reviews,omitempty"`
	HelpfulReviewsCount      float32             `json:"helpful_reviews_count,omitempty"`
	Id                       int                 `json:"id,omitempty"`
	Message                  string              `json:"message"`
	Released                 float32             `json:"released,omitempty"`
	Review                   string              `json:"review"`
	Stars                    float32             `json:"stars,omitempty"`
	Title                    string              `json:"title"`
	User                     UserBasicInfo       `json:"user"`
	UserId                   int                 `json:"user_id,omitempty"`
}

// MachineReviewsResponse defines model for MachineReviewsResponse.
type MachineReviewsResponse struct {
	Average float32                     `json:"average,omitempty"`
	Count   float32                     `json:"count,omitempty"`
	Message MaschineReviewsMessageItems `json:"message,omitempty"`
}

// MachineReviewsUserIdResponse Schema definition for Machine Reviews User Id Response
type MachineReviewsUserIdResponse struct {
	Message string `json:"message"`
}

// MachineTagIdResponse Schema definition for Machine Tag Id Response
type MachineTagIdResponse struct {
	Info MachineTagInfo `json:"info,omitempty"`
}

// MachineTagInfo defines model for MachineTagInfo.
type MachineTagInfo = []MachineTagItems

// MachineTagItems defines model for MachineTagItems.
type MachineTagItems struct {
	Category string `json:"category,omitempty"`
	Id       int    `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
}

// MachineTagsListResponse Schema definition for Machine Tags List Response
type MachineTagsListResponse struct {
	Info MachinetagsListInfoItems `json:"info,omitempty"`
}

// MachineTasksData defines model for MachineTasksData.
type MachineTasksData = []MachineTasksData_Item

// MachineTasksData_Item defines model for MachineTasksData.Item.
type MachineTasksData_Item struct {
	union json.RawMessage
}

// MachineTasksResponse defines model for MachineTasksResponse.
type MachineTasksResponse struct {
	Data MachineTasksData `json:"data,omitempty"`
}

// MachineUnreleasedData defines model for MachineUnreleasedData.
type MachineUnreleasedData struct {
	Avatar         string             `json:"avatar,omitempty"`
	CoCreators     UserBasicInfoItems `json:"coCreators"`
	Difficulty     int                `json:"difficulty,omitempty"`
	DifficultyText string             `json:"difficulty_text,omitempty"`
	FirstCreator   UserBasicInfoItems `json:"firstCreator"`
	Id             int                `json:"id,omitempty"`
	Name           string             `json:"name,omitempty"`
	Os             string             `json:"os,omitempty"`
	Release        time.Time          `json:"release,omitempty"`
	Retiring       MachineRetiring    `json:"retiring,omitempty"`
}

// MachineUnreleasedDataItems defines model for MachineUnreleasedDataItems.
type MachineUnreleasedDataItems = []MachineUnreleasedData

// MachineUnreleasedResponse Schema definition for Machine Unreleased Response
type MachineUnreleasedResponse struct {
	Data MachineUnreleasedDataItems `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// MachineWalkthroughIdResponse Schema definition for Machine Walkthrough Id Response
type MachineWalkthroughIdResponse struct {
	Message MachineWalkthroughMessage `json:"message,omitempty"`
}

// MachineWalkthroughMessage defines model for MachineWalkthroughMessage.
type MachineWalkthroughMessage struct {
	Official    MachineWalkthroughMessageOfficial      `json:"official,omitempty"`
	UnderReview string                                 `json:"under_review"`
	Video       MachineWalkthroughMessageVideo         `json:"video"`
	Writeups    MachineWalkthroughMessageWriteupsItems `json:"writeups,omitempty"`
}

// MachineWalkthroughMessageOfficial defines model for MachineWalkthroughMessageOfficial.
type MachineWalkthroughMessageOfficial struct {
	DislikedByUser             float32 `json:"dislikedByUser"`
	Filename                   string  `json:"filename,omitempty"`
	LikedByUser                bool    `json:"likedByUser"`
	Rating                     float32 `json:"rating,omitempty"`
	Sha256                     string  `json:"sha256,omitempty"`
	ThresholdForDisplayReached int     `json:"threshold_for_display_reached,omitempty"`
	TotalRatings               int     `json:"total_ratings,omitempty"`
}

// MachineWalkthroughMessageVideo defines model for MachineWalkthroughMessageVideo.
type MachineWalkthroughMessageVideo = MachineWalkthroughVideo

// MachineWalkthroughMessageWriteupsItem defines model for MachineWalkthroughMessageWriteupsItem.
type MachineWalkthroughMessageWriteupsItem struct {
	CreatedAt      string `json:"created_at,omitempty"`
	DislikedByUser string `json:"disliked_by_user"`
	Id             int    `json:"id,omitempty"`
	LanguageCode   string `json:"language_code"`
	LanguageName   string `json:"language_name"`
	LikedByUser    string `json:"liked_by_user"`
	Rating         int    `json:"rating,omitempty"`
	TotalRatings   int    `json:"total_ratings,omitempty"`
	Url            string `json:"url,omitempty"`
	UserAvatar     string `json:"user_avatar,omitempty"`
	UserId         int    `json:"user_id,omitempty"`
	UserName       string `json:"user_name,omitempty"`
}

// MachineWalkthroughMessageWriteupsItems defines model for MachineWalkthroughMessageWriteupsItems.
type MachineWalkthroughMessageWriteupsItems = []MachineWalkthroughMessageWriteupsItem

// MachineWalkthroughOfficialFeedbackChoicesResponse defines model for MachineWalkthroughOfficialFeedbackChoicesResponse.
type MachineWalkthroughOfficialFeedbackChoicesResponse struct {
	FeedbackChoices StringArray `json:"feedback_choices,omitempty"`
}

// MachineWalkthroughRandomResponse defines model for MachineWalkthroughRandomResponse.
type MachineWalkthroughRandomResponse struct {
	Message UserBasicInfo `json:"message"`
}

// MachineWalkthroughVideo defines model for MachineWalkthroughVideo.
type MachineWalkthroughVideo struct {
	CreatorAvatar string `json:"creator_avatar,omitempty"`
	CreatorId     int    `json:"creator_id,omitempty"`
	CreatorName   string `json:"creator_name,omitempty"`
	YoutubeId     string `json:"youtube_id,omitempty"`
}

// MachineWalkthroughsLanguageListItem defines model for MachineWalkthroughsLanguageListItem.
type MachineWalkthroughsLanguageListItem struct {
	FullName  string `json:"full_name,omitempty"`
	Id        int    `json:"id,omitempty"`
	ShortName string `json:"short_name,omitempty"`
}

// MachineWalkthroughsLanguageListItems defines model for MachineWalkthroughsLanguageListItems.
type MachineWalkthroughsLanguageListItems = []MachineWalkthroughsLanguageListItem

// MachineWalkthroughsLanguageListResponse Schema definition for Machine Walkthroughs Language List Response
type MachineWalkthroughsLanguageListResponse struct {
	Info MachineWalkthroughsLanguageListItems `json:"info,omitempty"`
}

// MachinesAdventureItem defines model for MachinesAdventureItem.
type MachinesAdventureItem struct {
	Completed   bool     `json:"completed,omitempty"`
	Description string   `json:"description"`
	FlagRating  float32  `json:"flag_rating"`
	Hint        string   `json:"hint"`
	Id          int      `json:"id"`
	MaskedFlag  string   `json:"masked_flag,omitempty"`
	Title       string   `json:"title,omitempty"`
	Type        TaskType `json:"type,omitempty"`
}

// MachinesAdventureItems defines model for MachinesAdventureItems.
type MachinesAdventureItems = []MachinesAdventureItem

// MachinesAdventureResponse defines model for MachinesAdventureResponse.
type MachinesAdventureResponse struct {
	Data MachinesAdventureItems `json:"data,omitempty"`
}

// MachinetagsListInfoItems defines model for MachinetagsListInfoItems.
type MachinetagsListInfoItems = []TagCategory

// Maker Schema definition for Maker
type Maker struct {
	Avatar      string `json:"avatar"`
	Id          int    `json:"id"`
	IsRespected bool   `json:"isRespected"`
	Name        string `json:"name"`
}

// MaschineReviewsMessageItems defines model for MaschineReviewsMessageItems.
type MaschineReviewsMessageItems = []MachineReviewsMessageItem

// MatrixInfo defines model for MatrixInfo.
type MatrixInfo struct {
	Ctf    float32 `json:"ctf,omitempty"`
	Custom float32 `json:"custom,omitempty"`
	Cve    float32 `json:"cve,omitempty"`
	Enum   float32 `json:"enum,omitempty"`
	Real   float32 `json:"real,omitempty"`
}

// Message Schema definition for Message
type Message struct {
	// Message Return message
	Message string `json:"message,omitempty"`
}

// Messagesuccess Schema definition for Message
type Messagesuccess struct {
	// Message Return message and success
	Message string `json:"message,omitempty"`
	Success bool   `json:"success,omitempty"`
}

// Meta Schema definition for Meta
type Meta struct {
	CurrentPage int             `json:"current_page,omitempty"`
	From        int             `json:"from,omitempty"`
	LastPage    int             `json:"last_page,omitempty"`
	Links       PaginationLinks `json:"links,omitempty"`
	Path        string          `json:"path,omitempty"`
	PerPage     int             `json:"per_page,omitempty"`
	To          int             `json:"to,omitempty"`
	Total       int             `json:"total,omitempty"`
}

// MetaAlt defines model for MetaAlt.
type MetaAlt struct {
	CurrentPage int `json:"currentPage,omitempty"`
	Pages       int `json:"pages,omitempty"`
}

// NavigationMainData defines model for NavigationMainData.
type NavigationMainData struct {
	Ranking       NavigationMainRanking        `json:"ranking,omitempty"`
	SeasonRanking NavigationNmainSeasonRanking `json:"season_ranking,omitempty"`
	SsoLinked     bool                         `json:"sso_linked,omitempty"`
}

// NavigationMainRanking defines model for NavigationMainRanking.
type NavigationMainRanking struct {
	CurrentXp  float32 `json:"current_xp,omitempty"`
	Id         int     `json:"id,omitempty"`
	Name       string  `json:"name,omitempty"`
	NextRankXp float32 `json:"next_rank_xp,omitempty"`
}

// NavigationMainResponse Schema definition for Navigation Main Response
type NavigationMainResponse struct {
	Data NavigationMainData `json:"data,omitempty"`
}

// NavigationNmainSeasonRanking defines model for NavigationNmainSeasonRanking.
type NavigationNmainSeasonRanking struct {
	// LatestSeason Schema definition for Common Id Name
	LatestSeason   CommonIdName   `json:"latest_season,omitempty"`
	League         string         `json:"league,omitempty"`
	Rank           int            `json:"rank,omitempty"`
	RankSuffix     string         `json:"rank_suffix,omitempty"`
	UpcomingSeason UpcomingSeason `json:"upcoming_season,omitempty"`
}

// NoticeDataItems defines model for NoticeDataItems.
type NoticeDataItems = []NoticesItem

// NoticesItem defines model for NoticesItem.
type NoticesItem struct {
	Dismissible bool   `json:"dismissible,omitempty"`
	Id          int    `json:"id,omitempty"`
	Message     string `json:"message,omitempty"`
	Type        string `json:"type,omitempty"`
	Url         string `json:"url,omitempty"`
	UrlExact    bool   `json:"url_exact,omitempty"`
}

// NoticesResponse Schema definition for Notices Response
type NoticesResponse struct {
	Data NoticeDataItems `json:"data,omitempty"`
}

// ObjectArray defines model for ObjectArray.
type ObjectArray = []map[string]interface{}

// OfficialWriteup defines model for OfficialWriteup.
type OfficialWriteup struct {
	Filename string `json:"filename,omitempty"`
	Sha256   string `json:"sha256,omitempty"`
	Url      string `json:"url,omitempty"`
	VideoUrl string `json:"video_url"`
}

// OpenVpn Schema definition for Open Vpn
type OpenVpn = openapi_types.File

// OperatingSystems defines model for OperatingSystems.
type OperatingSystems struct {
	CompletionPercentage float32 `json:"completion_percentage,omitempty"`
	Name                 string  `json:"name,omitempty"`
	OwnedMachines        float32 `json:"owned_machines,omitempty"`
	TotalMachines        float32 `json:"total_machines,omitempty"`
}

// OperatyingSystemsItems defines model for OperatyingSystemsItems.
type OperatyingSystemsItems = []OperatingSystems

// Options Schema definition for Options
type Options map[string]map[string]ServerGroup

// OwnMachineErrorResponse Schema definition for Own Machine Error Response
type OwnMachineErrorResponse struct {
	Message string `json:"message,omitempty"`
	Status  int    `json:"status,omitempty"`
}

// OwnRequest Schema definition for Own Request
type OwnRequest struct {
	Difficulty int    `json:"difficulty,omitempty"`
	Flag       string `json:"flag"`
	Id         int    `json:"id"`
}

// OwnResponse Schema definition for Own Response
type OwnResponse struct {
	Message string `json:"message,omitempty"`
	Status  int    `json:"status,omitempty"`
}

// OwnStats Schema definition for Own Stats
type OwnStats struct {
	ChallengeOwns int               `json:"challenge_owns,omitempty"`
	FirstBloods   int               `json:"first_bloods,omitempty"`
	Rank          int               `json:"rank,omitempty"`
	Respects      int               `json:"respects,omitempty"`
	SystemOwns    int               `json:"system_owns,omitempty"`
	UserOwns      int               `json:"user_owns,omitempty"`
	Weekly        map[string]Weekly `json:"weekly,omitempty"`
}

// OwnsItems defines model for OwnsItems.
type OwnsItems struct {
	Challenge       ChallengeOwns      `json:"challenge,omitempty"`
	ChallengeId     int                `json:"challenge_id,omitempty"`
	CreatedAt       string             `json:"created_at,omitempty"`
	DeletedAt       interface{}        `json:"deleted_at,omitempty"`
	DeletedIndexFix int                `json:"deleted_index_fix,omitempty"`
	Id              int                `json:"id,omitempty"`
	Machine         MachineOwnsTabloid `json:"machine,omitempty"`
	MachineFlagId   int                `json:"machine_flag_id,omitempty"`
	MachineId       int                `json:"machine_id,omitempty"`
	SpFlag          int                `json:"sp_flag,omitempty"`
	SyncSource      interface{}        `json:"sync_source,omitempty"`
	UpdatedAt       string             `json:"updated_at,omitempty"`
	User            UserOwnsUser       `json:"user,omitempty"`
	UserId          int                `json:"user_id,omitempty"`
	VpnServerId     int                `json:"vpn_server_id,omitempty"`
}

// PaginatedMachineData Schema definition for Paginated Machine Data
type PaginatedMachineData struct {
	Data PaginatedMachineDataItems `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// PaginatedMachineDataItems defines model for PaginatedMachineDataItems.
type PaginatedMachineDataItems = []MachineData

// PaginationLink Schema definition for Pagination Link
type PaginationLink struct {
	Active bool   `json:"active,omitempty"`
	Label  string `json:"label,omitempty"`
	Url    string `json:"url"`
}

// PaginationLinks defines model for PaginationLinks.
type PaginationLinks = []PaginationLink

// PeriodsStringArray defines model for PeriodsStringArray.
type PeriodsStringArray = []StringArray

// PlayInfo Schema definition for Play Info
type PlayInfo struct {
	ActivePlayerCount int       `json:"active_player_count,omitempty"`
	ExpiresAt         time.Time `json:"expires_at"`
	IsActive          bool      `json:"is_active"`
	IsSpawned         bool      `json:"is_spawned"`
	IsSpawning        bool      `json:"is_spawning"`
}

// PlayInfoAlt Alternate structure of PlayInfo used in Sherlocks and Challenges
type PlayInfoAlt struct {
	ExpiresAt time.Time `json:"expires_at"`
	Ip        string    `json:"ip"`
	Ports     IntArray  `json:"ports,omitempty"`
	Status    string    `json:"status"`
}

// PlayInfoCasing Schema definition for Play Info
type PlayInfoCasing struct {
	ActivePlayerCount int       `json:"active_player_count,omitempty"`
	ExpiresAt         time.Time `json:"expires_at"`
	IsActive          bool      `json:"isActive"`
	IsSpawned         bool      `json:"isSpawned"`
	IsSpawning        bool      `json:"isSpawning"`
}

// PorfileContentProfile defines model for PorfileContentProfile.
type PorfileContentProfile struct {
	Content PorfileContentProfileContent `json:"content,omitempty"`
}

// PorfileContentProfileContent defines model for PorfileContentProfileContent.
type PorfileContentProfileContent struct {
	Challenges []interface{}              `json:"challenges,omitempty"`
	Machines   ProfileContentMachineItems `json:"machines,omitempty"`
	Writeups   []interface{}              `json:"writeups,omitempty"`
}

// ProductFlagsResponse Schema definition for Prodcut Flags Response
type ProductFlagsResponse struct {
	Data   FlagsItems `json:"data,omitempty"`
	Status bool       `json:"status,omitempty"`
}

// ProfileBadgesIdRepsonse Schema definition for Profile Badges Id Repsonse
type ProfileBadgesIdRepsonse struct {
	Badges ProfileBadgesItems `json:"badges,omitempty"`
}

// ProfileBadgesItem defines model for ProfileBadgesItem.
type ProfileBadgesItem struct {
	Id    int                    `json:"id,omitempty"`
	Pivot ProfileBadgesItemPivot `json:"pivot,omitempty"`
}

// ProfileBadgesItemPivot defines model for ProfileBadgesItemPivot.
type ProfileBadgesItemPivot struct {
	CreatedAt string `json:"created_at,omitempty"`
}

// ProfileBadgesItems defines model for ProfileBadgesItems.
type ProfileBadgesItems = []ProfileBadgesItem

// ProfileChartMachineAttackCard Schema definition for Profile Chart Machine Attack Card
type ProfileChartMachineAttackCard struct {
	AvgUserSolved float32 `json:"avg_user_solved,omitempty"`
	Solved        int     `json:"solved,omitempty"`
	Total         int     `json:"total,omitempty"`
}

// ProfileChartMachineAttackIdResponse Schema definition for Profile Chart Machine Attack Id Response
type ProfileChartMachineAttackIdResponse struct {
	Profile ProfileChartMachineAttackProfile `json:"profile,omitempty"`
}

// ProfileChartMachineAttackProfile defines model for ProfileChartMachineAttackProfile.
type ProfileChartMachineAttackProfile struct {
	MachineAttackPaths ProfileChartMachineAttackProfileMachineAttackPaths `json:"machine_attack_paths,omitempty"`

	// MachineOwns Schema definition for Machine Owns Card
	MachineOwns MachineOwnsCard `json:"machine_owns,omitempty"`
}

// ProfileChartMachineAttackProfileMachineAttackPaths defines model for ProfileChartMachineAttackProfileMachineAttackPaths.
type ProfileChartMachineAttackProfileMachineAttackPaths struct {
	// EnterpriseNetwork Schema definition for Profile Chart Machine Attack Card
	EnterpriseNetwork ProfileChartMachineAttackCard `json:"Enterprise Network,omitempty"`

	// Injections Schema definition for Profile Chart Machine Attack Card
	Injections ProfileChartMachineAttackCard `json:"Injections,omitempty"`

	// PasswordCracking Schema definition for Profile Chart Machine Attack Card
	PasswordCracking ProfileChartMachineAttackCard `json:"Password Cracking,omitempty"`

	// PasswordReuse Schema definition for Profile Chart Machine Attack Card
	PasswordReuse ProfileChartMachineAttackCard `json:"Password Reuse,omitempty"`

	// Reconnaissance Schema definition for Profile Chart Machine Attack Card
	Reconnaissance ProfileChartMachineAttackCard `json:"Reconnaissance,omitempty"`

	// SecurityTools Schema definition for Profile Chart Machine Attack Card
	SecurityTools ProfileChartMachineAttackCard `json:"Security Tools,omitempty"`

	// SoftwareOSExploitation Schema definition for Profile Chart Machine Attack Card
	SoftwareOSExploitation ProfileChartMachineAttackCard `json:"Software & OS exploitation,omitempty"`

	// SourceCodeAnalysis Schema definition for Profile Chart Machine Attack Card
	SourceCodeAnalysis ProfileChartMachineAttackCard `json:"Source Code Analysis,omitempty"`

	// VulnerabilityAssessment Schema definition for Profile Chart Machine Attack Card
	VulnerabilityAssessment ProfileChartMachineAttackCard `json:"Vulnerability Assessment,omitempty"`

	// WebApplication Schema definition for Profile Chart Machine Attack Card
	WebApplication ProfileChartMachineAttackCard `json:"Web Application,omitempty"`
}

// ProfileContentIdResponse Schema definition for Profile Content Id Response
type ProfileContentIdResponse struct {
	Profile PorfileContentProfile `json:"profile,omitempty"`
}

// ProfileContentMachineItems defines model for ProfileContentMachineItems.
type ProfileContentMachineItems = []ProfileContentMachinesItem

// ProfileContentMachinesItem defines model for ProfileContentMachinesItem.
type ProfileContentMachinesItem struct {
	Difficulty    string `json:"difficulty,omitempty"`
	Id            int    `json:"id,omitempty"`
	MachineAvatar string `json:"machine_avatar,omitempty"`
	Name          string `json:"name,omitempty"`
	Os            string `json:"os,omitempty"`
	Rating        string `json:"rating,omitempty"`
	SystemOwns    int    `json:"system_owns,omitempty"`
	UserOwns      int    `json:"user_owns,omitempty"`
}

// ProfileGraopPeriodProfile defines model for ProfileGraopPeriodProfile.
type ProfileGraopPeriodProfile struct {
	GraphData ProfileGraphData `json:"graphData,omitempty"`
}

// ProfileGraphData defines model for ProfileGraphData.
type ProfileGraphData struct {
	ChallengeOwns IntArray `json:"challenge_owns,omitempty"`
	FirstBloods   IntArray `json:"first_bloods,omitempty"`
	Respects      IntArray `json:"respects,omitempty"`
	SystemOwns    IntArray `json:"system_owns,omitempty"`
	UserOwns      IntArray `json:"user_owns,omitempty"`
}

// ProfileGraphPeriodIdResponse Schema definition for Profile Graph Period Id Response
type ProfileGraphPeriodIdResponse struct {
	Profile ProfileGraopPeriodProfile `json:"profile,omitempty"`
}

// ProfileIdRepsonse Schema definition for Profile Id Repsonse
type ProfileIdRepsonse struct {
	UserStats ProfileUserStats `json:"userStats,omitempty"`
}

// ProfileProgressChallengeItems defines model for ProfileProgressChallengeItems.
type ProfileProgressChallengeItems = []ChallengeCategoriesItems

// ProfileProgressChallengeOwns defines model for ProfileProgressChallengeOwns.
type ProfileProgressChallengeOwns struct {
	Percentage float32 `json:"percentage,omitempty"`
	Solved     int     `json:"solved,omitempty"`
	Total      int     `json:"total,omitempty"`
}

// ProfileProgressChallengesIdRepsonse Schema definition for Profile Progress Challenges Id Repsonse
type ProfileProgressChallengesIdRepsonse struct {
	Profile ProfileProgressProfile `json:"profile,omitempty"`
}

// ProfileProgressFortressIdRepsonse Schema definition for Profile Progress Fortress Id Repsonse
type ProfileProgressFortressIdRepsonse struct {
	Profile ProfileProgressFortressProfile `json:"profile,omitempty"`
}

// ProfileProgressFortressProfile defines model for ProfileProgressFortressProfile.
type ProfileProgressFortressProfile struct {
	Fortresses ProfileProgressProfileFortresses `json:"fortresses,omitempty"`
}

// ProfileProgressFortressProfileItem defines model for ProfileProgressFortressProfileItem.
type ProfileProgressFortressProfileItem struct {
	Avatar               string `json:"avatar,omitempty"`
	CompletionPercentage int    `json:"completion_percentage,omitempty"`
	Name                 string `json:"name,omitempty"`
	OwnedFlags           int    `json:"owned_flags,omitempty"`
	TotalFlags           int    `json:"total_flags,omitempty"`
}

// ProfileProgressProLabProfile defines model for ProfileProgressProLabProfile.
type ProfileProgressProLabProfile struct {
	Prolabs ProfileProgressProlabItems `json:"prolabs,omitempty"`
}

// ProfileProgressProLabResponse Schema definition for Profile Progress Prolab Response
type ProfileProgressProLabResponse struct {
	Profile ProfileProgressProLabProfile `json:"profile,omitempty"`
}

// ProfileProgressProfile defines model for ProfileProgressProfile.
type ProfileProgressProfile struct {
	ChallengeCategories   ProfileProgressChallengeItems `json:"challenge_categories,omitempty"`
	ChallengeDifficulties ChallengeDifficulties         `json:"challenge_difficulties,omitempty"`
	ChallengeOwns         ProfileProgressChallengeOwns  `json:"challenge_owns,omitempty"`
	SolvedTasks           int                           `json:"solved_tasks,omitempty"`
}

// ProfileProgressProfileFortresses defines model for ProfileProgressProfileFortresses.
type ProfileProgressProfileFortresses = []ProfileProgressFortressProfileItem

// ProfileProgressProlabItem defines model for ProfileProgressProlabItem.
type ProfileProgressProlabItem struct {
	AverageRatings       float32 `json:"average_ratings"`
	CompletionPercentage int     `json:"completion_percentage,omitempty"`
	Name                 string  `json:"name,omitempty"`
	OwnedFlags           int     `json:"owned_flags,omitempty"`
	TotalFlags           int     `json:"total_flags,omitempty"`
	TotalMachines        int     `json:"total_machines,omitempty"`
}

// ProfileProgressProlabItems defines model for ProfileProgressProlabItems.
type ProfileProgressProlabItems = []ProfileProgressProlabItem

// ProfileUserStats defines model for ProfileUserStats.
type ProfileUserStats struct {
	CurrentRankProgress float32                `json:"current_rank_progress,omitempty"`
	Growths             Growths                `json:"growths,omitempty"`
	Id                  int                    `json:"id,omitempty"`
	Name                string                 `json:"name,omitempty"`
	NextRank            string                 `json:"next_rank,omitempty"`
	NextRankPoints      float32                `json:"next_rank_points,omitempty"`
	Points              int                    `json:"points,omitempty"`
	Rank                string                 `json:"rank,omitempty"`
	RankId              int                    `json:"rank_id,omitempty"`
	RankOwnership       float32                `json:"rank_ownership,omitempty"`
	RankRequirement     int                    `json:"rank_requirement,omitempty"`
	Ranking             int                    `json:"ranking,omitempty"`
	RankingGraphStats   RankingGraphStats      `json:"rankingGraphStats,omitempty"`
	Respects            int                    `json:"respects,omitempty"`
	SsoId               bool                   `json:"sso_id,omitempty"`
	Subscription        string                 `json:"subscription,omitempty"`
	SystemBloods        int                    `json:"system_bloods,omitempty"`
	SystemOwns          int                    `json:"system_owns,omitempty"`
	Team                ProfileUserTeamWrapper `json:"team"`
	UniversityName      string                 `json:"university_name"`
	UserBloods          int                    `json:"user_bloods,omitempty"`
	UserOwns            int                    `json:"user_owns,omitempty"`
}

// ProfileUserTeamInfo defines model for ProfileUserTeamInfo.
type ProfileUserTeamInfo struct {
	Avatar  string `json:"avatar,omitempty"`
	Name    string `json:"name,omitempty"`
	Ranking int    `json:"ranking,omitempty"`
}

// ProfileUserTeamWrapper defines model for ProfileUserTeamWrapper.
type ProfileUserTeamWrapper struct {
	union json.RawMessage
}

// Prolab Schema definition for Prolab
type Prolab struct {
	CoverImgUrl                string    `json:"cover_img_url"`
	DesignatedCategory         string    `json:"designated_category,omitempty"`
	Id                         int       `json:"id,omitempty"`
	Identifier                 string    `json:"identifier,omitempty"`
	LabServersCount            int       `json:"lab_servers_count,omitempty"`
	Level                      int       `json:"level,omitempty"`
	Mini                       bool      `json:"mini,omitempty"`
	Name                       string    `json:"name,omitempty"`
	New                        bool      `json:"new,omitempty"`
	Ownership                  float32   `json:"ownership,omitempty"`
	ProFlagsCount              int       `json:"pro_flags_count,omitempty"`
	ProMachinesCount           int       `json:"pro_machines_count,omitempty"`
	ReleaseAt                  time.Time `json:"release_at,omitempty"`
	SkillLevel                 string    `json:"skill_level,omitempty"`
	State                      string    `json:"state,omitempty"`
	Team                       string    `json:"team,omitempty"`
	UserEligibleForCertificate bool      `json:"user_eligible_for_certificate,omitempty"`
}

// ProlabData Schema definition for Prolab Data
type ProlabData struct {
	ActiveUsers      int            `json:"active_users,omitempty"`
	CanInteract      bool           `json:"can_interact,omitempty"`
	CoverImageUrl    string         `json:"cover_image_url"`
	Description      string         `json:"description,omitempty"`
	EntryPoints      StringArray    `json:"entry_points,omitempty"`
	Id               int            `json:"id,omitempty"`
	Identifier       string         `json:"identifier,omitempty"`
	LabMasters       LabMasterItems `json:"lab_masters,omitempty"`
	LabServersCount  int            `json:"lab_servers_count,omitempty"`
	Mini             bool           `json:"mini,omitempty"`
	Name             string         `json:"name,omitempty"`
	ProFlagsCount    int            `json:"pro_flags_count,omitempty"`
	ProMachinesCount int            `json:"pro_machines_count,omitempty"`
	State            string         `json:"state,omitempty"`
	Version          string         `json:"version,omitempty"`
	VideoUrl         string         `json:"video_url"`
	Writeup          string         `json:"writeup"`
}

// ProlabDataItems defines model for ProlabDataItems.
type ProlabDataItems = []Prolab

// ProlabFaqData defines model for ProlabFaqData.
type ProlabFaqData = []FaqItem

// ProlabIdFaqResponse Schema definition for Prolab Id Faq Response
type ProlabIdFaqResponse struct {
	Data   ProlabFaqData `json:"data,omitempty"`
	Status bool          `json:"status,omitempty"`
}

// ProlabIdInfoResponse Schema definition for Prolab Id Info Response
type ProlabIdInfoResponse struct {
	// Data Schema definition for Prolab Data
	Data   ProlabData `json:"data,omitempty"`
	Status bool       `json:"status,omitempty"`
}

// ProlabIdMachineResponse Schema definition for Prolab Id Machine Response
type ProlabIdMachineResponse struct {
	Data   ProlabMachineData `json:"data,omitempty"`
	Status bool              `json:"status,omitempty"`
}

// ProlabIdOverviewResponse Schema definition for Prolab Id Overview Response
type ProlabIdOverviewResponse struct {
	// Data Schema definition for Prolab Overview Data
	Data   ProlabOverviewData `json:"data,omitempty"`
	Status bool               `json:"status,omitempty"`
}

// ProlabIdReviewsOverviewResponse Schema definition for Prolab Id Reviews Overview Response
type ProlabIdReviewsOverviewResponse struct {
	// Data Schema definition for Prolab Reviews Overview Data
	Data   ProlabReviewsOverviewData `json:"data,omitempty"`
	Status bool                      `json:"status,omitempty"`
}

// ProlabIdReviewsResponse Schema definition for Prolab Id Reviews Response
type ProlabIdReviewsResponse struct {
	Data ProlabReviewData `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// ProlabMachineData defines model for ProlabMachineData.
type ProlabMachineData = []Machine

// ProlabOverviewData Schema definition for Prolab Overview Data
type ProlabOverviewData struct {
	// DesignatedLevel Schema definition for Designated Level
	DesignatedLevel  DesignatedLevel `json:"designated_level,omitempty"`
	Excerpt          string          `json:"excerpt"`
	Id               int             `json:"id,omitempty"`
	Identifier       string          `json:"identifier,omitempty"`
	LabMasters       LabMasterItems  `json:"lab_masters,omitempty"`
	Mini             bool            `json:"mini,omitempty"`
	Name             string          `json:"name,omitempty"`
	NewVersion       bool            `json:"new_version,omitempty"`
	OverviewImageUrl string          `json:"overview_image_url"`
	ProFlagsCount    int             `json:"pro_flags_count,omitempty"`
	ProMachinesCount int             `json:"pro_machines_count,omitempty"`
	SkillLevel       string          `json:"skill_level,omitempty"`

	// SocialLinks Schema definition for Social Links
	SocialLinks        SocialLinks `json:"social_links,omitempty"`
	State              string      `json:"state,omitempty"`
	UserEligibleToPlay bool        `json:"user_eligible_to_play,omitempty"`
	Version            string      `json:"version,omitempty"`
}

// ProlabProgressData defines model for ProlabProgressData.
type ProlabProgressData struct {
	KeyedProLabMileStone              KeyedProlabMileStoneItems `json:"keyed_pro_lab_mile_stone,omitempty"`
	Ownership                         float32                   `json:"ownership,omitempty"`
	OwnershipRequiredForCertification float32                   `json:"ownership_required_for_certification,omitempty"`
	UserEligibleForCertificate        bool                      `json:"user_eligible_for_certificate,omitempty"`
}

// ProlabProgressResponse defines model for ProlabProgressResponse.
type ProlabProgressResponse struct {
	Data   ProlabProgressData `json:"data,omitempty"`
	Status bool               `json:"status,omitempty"`
}

// ProlabRatingData defines model for ProlabRatingData.
type ProlabRatingData struct {
	Rating string `json:"rating,omitempty"`
}

// ProlabRatingResponse defines model for ProlabRatingResponse.
type ProlabRatingResponse struct {
	Data ProlabRatingData `json:"data,omitempty"`
}

// ProlabReviewData defines model for ProlabReviewData.
type ProlabReviewData = []ReviewProlab

// ProlabReviewOverviewFeedbackItems defines model for ProlabReviewOverviewFeedbackItems.
type ProlabReviewOverviewFeedbackItems = []ReviewOverview

// ProlabReviewsOverviewData Schema definition for Prolab Reviews Overview Data
type ProlabReviewsOverviewData struct {
	Feedbacks            ProlabReviewOverviewFeedbackItems `json:"feedbacks,omitempty"`
	TotalNumberOfRatings int                               `json:"total_number_of_ratings,omitempty"`
	UsersAverageRating   float32                           `json:"users_average_rating,omitempty"`
}

// ProlabSubscription defines model for ProlabSubscription.
type ProlabSubscription struct {
	Active             bool   `json:"active,omitempty"`
	EndsAt             string `json:"ends_at"`
	Name               string `json:"name"`
	RenewsAt           string `json:"renews_at"`
	SubscriptionPeriod string `json:"subscription_period,omitempty"`
	Type               string `json:"type"`
}

// ProlabSubscriptionResponse defines model for ProlabSubscriptionResponse.
type ProlabSubscriptionResponse struct {
	Data   ProlabSubscription `json:"data,omitempty"`
	Status bool               `json:"status,omitempty"`
}

// ProlabsData Inner container for Prolabs response
type ProlabsData struct {
	Count int             `json:"count,omitempty"`
	Labs  ProlabDataItems `json:"labs,omitempty"`
}

// ProlabsResponse Schema definition for Prolabs Response
type ProlabsResponse struct {
	// Data Inner container for Prolabs response
	Data   ProlabsData `json:"data,omitempty"`
	Status bool        `json:"status,omitempty"`
}

// PublicUserProfileBasic defines model for PublicUserProfileBasic.
type PublicUserProfileBasic struct {
	AvatarThumb string `json:"avatar_thumb,omitempty"`
	Id          int    `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
	Public      int    `json:"public,omitempty"`
}

// PwnboxRequest Schema definition for Pwnbox Request
type PwnboxRequest struct {
	Location PwnboxRequestLocation `json:"location"`
}

// PwnboxRequestLocation defines model for PwnboxRequest.Location.
type PwnboxRequestLocation string

// PwnboxStartData Schema definition for Pwnbox Start Data
type PwnboxStartData struct {
	CreatedAt           time.Time `json:"created_at,omitempty"`
	ExpiresAt           time.Time `json:"expires_at,omitempty"`
	FlockId             int       `json:"flock_id,omitempty"`
	Hostname            string    `json:"hostname,omitempty"`
	Id                  int       `json:"id,omitempty"`
	IsReady             bool      `json:"is_ready"`
	LifeRemaining       int       `json:"life_remaining,omitempty"`
	Location            string    `json:"location,omitempty"`
	ProxyUrl            string    `json:"proxy_url,omitempty"`
	Status              string    `json:"status,omitempty"`
	UpdatedAt           time.Time `json:"updated_at,omitempty"`
	Username            string    `json:"username"`
	VncPassword         string    `json:"vnc_password"`
	VncViewOnlyPassword string    `json:"vnc_view_only_password"`
}

// PwnboxStartResponse Schema definition for Pwnbox Start Response
type PwnboxStartResponse struct {
	// Data Schema definition for Pwnbox Start Data
	Data PwnboxStartData `json:"data,omitempty"`
}

// PwnboxStatusNotRunningResponse Schema definition for Pwnbox Status Not Running Response
type PwnboxStatusNotRunningResponse struct {
	Message string `json:"message"`
}

// PwnboxStatusRUnningData defines model for PwnboxStatusRUnningData.
type PwnboxStatusRUnningData struct {
	CreatedAt           time.Time `json:"created_at,omitempty"`
	ExpiresAt           time.Time `json:"expires_at,omitempty"`
	FlockId             int       `json:"flock_id,omitempty"`
	Hostname            string    `json:"hostname,omitempty"`
	Id                  int       `json:"id,omitempty"`
	IsReady             bool      `json:"is_ready,omitempty"`
	LifeRemaining       int       `json:"life_remaining,omitempty"`
	Location            string    `json:"location,omitempty"`
	ProxyUrl            string    `json:"proxy_url,omitempty"`
	SpectateUrl         string    `json:"spectate_url,omitempty"`
	Status              string    `json:"status,omitempty"`
	UpdatedAt           time.Time `json:"updated_at,omitempty"`
	Username            string    `json:"username,omitempty"`
	VncPassword         string    `json:"vnc_password,omitempty"`
	VncViewOnlyPassword string    `json:"vnc_view_only_password,omitempty"`
}

// PwnboxStatusRunningResponse Schema definition for Pwnbox Status Running Response
type PwnboxStatusRunningResponse struct {
	Data PwnboxStatusRUnningData `json:"data"`
}

// PwnboxUsageResponse Schema definition for Pwnbox Usage Response
type PwnboxUsageResponse struct {
	ActiveMinutes int `json:"active_minutes,omitempty"`
	Allowed       int `json:"allowed,omitempty"`
	Minutes       int `json:"minutes,omitempty"`
	Remaining     int `json:"remaining,omitempty"`
	Sessions      int `json:"sessions,omitempty"`
	Total         int `json:"total,omitempty"`
	Used          int `json:"used,omitempty"`
}

// RankingCountryMemberData defines model for RankingCountryMemberData.
type RankingCountryMemberData struct {
	CountryName string                      `json:"country_name,omitempty"`
	Rankings    RankingCountryRankingsItems `json:"rankings,omitempty"`
}

// RankingCountryRankingsItems defines model for RankingCountryRankingsItems.
type RankingCountryRankingsItems = []RankingsItem

// RankingDataTeamProperties defines model for RankingDataTeamProperties.
type RankingDataTeamProperties struct {
	AvatarUrl  string `json:"avatar_url,omitempty"`
	Id         int    `json:"id,omitempty"`
	Name       string `json:"name,omitempty"`
	Rank       int    `json:"rank,omitempty"`
	RankGrowth string `json:"rank_growth,omitempty"`
}

// RankingDataUserProperties defines model for RankingDataUserProperties.
type RankingDataUserProperties struct {
	Avatar     string `json:"avatar,omitempty"`
	Id         int    `json:"id,omitempty"`
	Name       string `json:"name,omitempty"`
	Rank       int    `json:"rank,omitempty"`
	RankGrowth string `json:"rank_growth,omitempty"`
}

// RankingGraphStats defines model for RankingGraphStats.
type RankingGraphStats struct {
	ChartData    IntArray `json:"chart_data,omitempty"`
	PointsDiff   int      `json:"points_diff,omitempty"`
	PointsGrowth float32  `json:"points_growth,omitempty"`
	RanksDiff    int      `json:"ranks_diff,omitempty"`
}

// RankingTeam defines model for RankingTeam.
type RankingTeam struct {
	AvatarThumbUrl string `json:"avatar_thumb_url,omitempty"`
	AvatarUrl      string `json:"avatar_url,omitempty"`
	Id             int    `json:"id,omitempty"`
	Name           string `json:"name,omitempty"`
}

// RankingUserDataItems defines model for RankingUserDataItems.
type RankingUserDataItems = []RankingsUserData

// RankingUserInfo defines model for RankingUserInfo.
type RankingUserInfo struct {
	Avatar      string `json:"avatar,omitempty"`
	AvatarThumb string `json:"avatar_thumb,omitempty"`
	Id          int    `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
}

// RankingUserRankBracketData defines model for RankingUserRankBracketData.
type RankingUserRankBracketData struct {
	CurrentBracket       string  `json:"current_bracket,omitempty"`
	NextBracket          string  `json:"next_bracket,omitempty"`
	Points               int     `json:"points,omitempty"`
	PointsForNextBracket float32 `json:"points_for_next_bracket,omitempty"`
	Rank                 int     `json:"rank,omitempty"`
}

// RankingsBracketData defines model for RankingsBracketData.
type RankingsBracketData struct {
	CurrentBracket       string `json:"current_bracket,omitempty"`
	NextBracket          string `json:"next_bracket"`
	Points               int    `json:"points,omitempty"`
	PointsForNextBracket int    `json:"points_for_next_bracket"`
	Rank                 int    `json:"rank,omitempty"`
}

// RankingsCountrRankingBracketResponse defines model for RankingsCountrRankingBracketResponse.
type RankingsCountrRankingBracketResponse struct {
	Data   RankingsBracketData `json:"data,omitempty"`
	Status bool                `json:"status,omitempty"`
}

// RankingsCountries defines model for RankingsCountries.
type RankingsCountries struct {
	Data   RankingsCountriesItems `json:"data,omitempty"`
	Status bool                   `json:"status,omitempty"`
}

// RankingsCountriesItem defines model for RankingsCountriesItem.
type RankingsCountriesItem struct {
	ChallengeOwns int    `json:"challenge_owns,omitempty"`
	Country       string `json:"country,omitempty"`
	Fortress      int    `json:"fortress,omitempty"`
	Members       int    `json:"members,omitempty"`
	Name          string `json:"name,omitempty"`
	Points        int    `json:"points,omitempty"`
	Rank          int    `json:"rank,omitempty"`
	RanksDiff     int    `json:"ranks_diff,omitempty"`
	RootBloods    int    `json:"root_bloods,omitempty"`
	RootOwns      int    `json:"root_owns,omitempty"`
	UserBloods    int    `json:"user_bloods,omitempty"`
	UserOwns      int    `json:"user_owns,omitempty"`
}

// RankingsCountriesItems defines model for RankingsCountriesItems.
type RankingsCountriesItems = []RankingsCountriesItem

// RankingsCountryBest defines model for RankingsCountryBest.
type RankingsCountryBest struct {
	Data   RankingsCountryData `json:"data,omitempty"`
	Status bool                `json:"status,omitempty"`
}

// RankingsCountryData defines model for RankingsCountryData.
type RankingsCountryData struct {
	Date          string   `json:"date,omitempty"`
	Rank          int      `json:"rank,omitempty"`
	RankChartData IntArray `json:"rank_chart_data,omitempty"`
}

// RankingsCountryMembersResponse defines model for RankingsCountryMembersResponse.
type RankingsCountryMembersResponse struct {
	Data   RankingCountryMemberData `json:"data,omitempty"`
	Status bool                     `json:"status,omitempty"`
}

// RankingsCountryOverviewData defines model for RankingsCountryOverviewData.
type RankingsCountryOverviewData struct {
	ChartData    IntArray `json:"chart_data,omitempty"`
	Country      Country  `json:"country,omitempty"`
	PointsDiff   int      `json:"points_diff,omitempty"`
	PointsGrowth string   `json:"points_growth,omitempty"`
	RanksDiff    int      `json:"ranks_diff,omitempty"`
}

// RankingsCountryOverviewResponse defines model for RankingsCountryOverviewResponse.
type RankingsCountryOverviewResponse struct {
	Data   RankingsCountryOverviewData `json:"data,omitempty"`
	Status bool                        `json:"status,omitempty"`
}

// RankingsData defines model for RankingsData.
type RankingsData struct {
	Team RankingDataTeamProperties `json:"team,omitempty"`
	User RankingDataUserProperties `json:"user,omitempty"`
}

// RankingsItem defines model for RankingsItem.
type RankingsItem struct {
	AvatarThumb     string  `json:"avatar_thumb,omitempty"`
	ChallengeBloods int     `json:"challenge_bloods,omitempty"`
	ChallengeOwns   int     `json:"challenge_owns,omitempty"`
	Country         string  `json:"country,omitempty"`
	Fortress        int     `json:"fortress,omitempty"`
	Id              int     `json:"id,omitempty"`
	Level           string  `json:"level,omitempty"`
	Name            string  `json:"name,omitempty"`
	Points          int     `json:"points,omitempty"`
	Rank            int     `json:"rank,omitempty"`
	RanksDiff       float32 `json:"ranks_diff"`
	RootBloods      int     `json:"root_bloods,omitempty"`
	RootOwns        int     `json:"root_owns,omitempty"`
	UserBloods      int     `json:"user_bloods,omitempty"`
	UserOwns        int     `json:"user_owns,omitempty"`
}

// RankingsResponse defines model for RankingsResponse.
type RankingsResponse struct {
	Data   RankingsData `json:"data,omitempty"`
	Status bool         `json:"status,omitempty"`
}

// RankingsTeamBestData defines model for RankingsTeamBestData.
type RankingsTeamBestData struct {
	Date          openapi_types.Date `json:"date,omitempty"`
	Rank          int                `json:"rank,omitempty"`
	RankChartData IntArray           `json:"rank_chart_data,omitempty"`
}

// RankingsTeamBestResponse Schema definition for Rankings Team Best Response
type RankingsTeamBestResponse struct {
	Data   RankingsTeamBestData `json:"data,omitempty"`
	Status bool                 `json:"status,omitempty"`
}

// RankingsTeamItem defines model for RankingsTeamItem.
type RankingsTeamItem struct {
	AvatarThumbUrl  string `json:"avatar_thumb_url,omitempty"`
	ChallengeBloods int    `json:"challenge_bloods,omitempty"`
	ChallengeOwns   int    `json:"challenge_owns,omitempty"`
	Country         string `json:"country"`
	Fortress        int    `json:"fortress,omitempty"`
	Id              int    `json:"id,omitempty"`
	Name            string `json:"name,omitempty"`
	Points          int    `json:"points,omitempty"`
	Rank            int    `json:"rank,omitempty"`
	RanksDiff       int    `json:"ranks_diff"`
	RootBloods      int    `json:"root_bloods,omitempty"`
	RootOwns        int    `json:"root_owns,omitempty"`
	UserBloods      int    `json:"user_bloods,omitempty"`
	UserOwns        int    `json:"user_owns,omitempty"`
}

// RankingsTeamItems defines model for RankingsTeamItems.
type RankingsTeamItems = []RankingsTeamItem

// RankingsTeamOverviewData defines model for RankingsTeamOverviewData.
type RankingsTeamOverviewData struct {
	ChartData    IntArray    `json:"chart_data,omitempty"`
	PointsDiff   int         `json:"points_diff,omitempty"`
	PointsGrowth string      `json:"points_growth,omitempty"`
	RanksDiff    int         `json:"ranks_diff"`
	Team         RankingTeam `json:"team,omitempty"`
}

// RankingsTeamOverviewResponse Schema definition for Rankings Team Overview Response
type RankingsTeamOverviewResponse struct {
	Data   RankingsTeamOverviewData `json:"data,omitempty"`
	Status bool                     `json:"status,omitempty"`
}

// RankingsTeamRankingBacketData defines model for RankingsTeamRankingBacketData.
type RankingsTeamRankingBacketData struct {
	CurrentBracket       string `json:"current_bracket,omitempty"`
	NextBracket          string `json:"next_bracket"`
	Points               int    `json:"points,omitempty"`
	PointsForNextBracket int    `json:"points_for_next_bracket"`
	Rank                 int    `json:"rank,omitempty"`
}

// RankingsTeamRankingBracketResponse Schema definition for Rankings Team Ranking Bracket Response
type RankingsTeamRankingBracketResponse struct {
	Data   RankingsTeamRankingBacketData `json:"data,omitempty"`
	Status bool                          `json:"status,omitempty"`
}

// RankingsTeamResponse Schema definition for Rankings Team Response
type RankingsTeamResponse struct {
	Data   RankingsTeamItems `json:"data,omitempty"`
	Status bool              `json:"status,omitempty"`
}

// RankingsUniversitiesItem defines model for RankingsUniversitiesItem.
type RankingsUniversitiesItem struct {
	ChallengeBloods int    `json:"challenge_bloods,omitempty"`
	ChallengeOwns   int    `json:"challenge_owns,omitempty"`
	Country         string `json:"country,omitempty"`
	Fortress        int    `json:"fortress,omitempty"`
	Id              int    `json:"id,omitempty"`
	Name            string `json:"name,omitempty"`
	Points          int    `json:"points,omitempty"`
	Rank            int    `json:"rank,omitempty"`
	RanksDiff       int    `json:"ranks_diff,omitempty"`
	RootBloods      int    `json:"root_bloods,omitempty"`
	RootOwns        int    `json:"root_owns,omitempty"`
	Students        int    `json:"students,omitempty"`
	UserBloods      int    `json:"user_bloods,omitempty"`
	UserOwns        int    `json:"user_owns,omitempty"`
}

// RankingsUniversitiesItems defines model for RankingsUniversitiesItems.
type RankingsUniversitiesItems = []RankingsUniversitiesItem

// RankingsUniversitiesResponse defines model for RankingsUniversitiesResponse.
type RankingsUniversitiesResponse struct {
	Data   RankingsUniversitiesItems `json:"data,omitempty"`
	Status bool                      `json:"status,omitempty"`
}

// RankingsUniversityRankingBracketByIdResponse defines model for RankingsUniversityRankingBracketByIdResponse.
type RankingsUniversityRankingBracketByIdResponse struct {
	Data   RankingsBracketData `json:"data,omitempty"`
	Status bool                `json:"status,omitempty"`
}

// RankingsUserBestData defines model for RankingsUserBestData.
type RankingsUserBestData struct {
	Date          string   `json:"date,omitempty"`
	Rank          float32  `json:"rank,omitempty"`
	RankChartData IntArray `json:"rank_chart_data,omitempty"`
}

// RankingsUserBestResponse defines model for RankingsUserBestResponse.
type RankingsUserBestResponse struct {
	Data   RankingsUserBestData `json:"data,omitempty"`
	Status bool                 `json:"status,omitempty"`
}

// RankingsUserData defines model for RankingsUserData.
type RankingsUserData struct {
	AvatarThumb     string `json:"avatar_thumb,omitempty"`
	ChallengeBloods int    `json:"challenge_bloods,omitempty"`
	ChallengeOwns   int    `json:"challenge_owns,omitempty"`
	Country         string `json:"country"`
	Fortress        int    `json:"fortress,omitempty"`
	Id              int    `json:"id,omitempty"`
	Level           string `json:"level,omitempty"`
	Name            string `json:"name,omitempty"`
	Points          int    `json:"points,omitempty"`
	Rank            int    `json:"rank,omitempty"`
	RanksDiff       int    `json:"ranks_diff"`
	RootBloods      int    `json:"root_bloods,omitempty"`
	RootOwns        int    `json:"root_owns,omitempty"`
	UserBloods      int    `json:"user_bloods,omitempty"`
	UserOwns        int    `json:"user_owns,omitempty"`
}

// RankingsUserOverviewData defines model for RankingsUserOverviewData.
type RankingsUserOverviewData struct {
	ChartData    IntArray        `json:"chart_data,omitempty"`
	PointsDiff   float32         `json:"points_diff,omitempty"`
	PointsGrowth string          `json:"points_growth,omitempty"`
	RanksDiff    float32         `json:"ranks_diff,omitempty"`
	User         RankingUserInfo `json:"user,omitempty"`
}

// RankingsUserOverviewResponse defines model for RankingsUserOverviewResponse.
type RankingsUserOverviewResponse struct {
	Data   RankingsUserOverviewData `json:"data,omitempty"`
	Status bool                     `json:"status,omitempty"`
}

// RankingsUserRankingBracketResponse defines model for RankingsUserRankingBracketResponse.
type RankingsUserRankingBracketResponse struct {
	Data   RankingUserRankBracketData `json:"data,omitempty"`
	Status bool                       `json:"status,omitempty"`
}

// RankingsUsersResponse Schema definition for Rankings Users Response
type RankingsUsersResponse struct {
	Data   RankingUserDataItems `json:"data,omitempty"`
	Status bool                 `json:"status,omitempty"`
}

// RecommendedCard Schema definition for Recommended Card
type RecommendedCard struct {
	CategoryName      string  `json:"category_name,omitempty"`
	Difficulty        string  `json:"difficulty,omitempty"`
	Id                int     `json:"id,omitempty"`
	Name              string  `json:"name,omitempty"`
	Rating            float32 `json:"rating,omitempty"`
	ReleaseDate       string  `json:"release_date,omitempty"`
	RetireChallengeId int     `json:"retire_challenge_id,omitempty"`
	Retired           bool    `json:"retired,omitempty"`
	State             string  `json:"state,omitempty"`
	UrlName           string  `json:"url_name,omitempty"`
}

// RecommendedCardRetired Schema definition for Recommended Card Retired
type RecommendedCardRetired struct {
	CategoryName string `json:"category_name,omitempty"`
	Difficulty   string `json:"difficulty,omitempty"`
	Id           int    `json:"id,omitempty"`
	Name         string `json:"name,omitempty"`
	ReleaseDate  string `json:"release_date,omitempty"`
	Retired      bool   `json:"retired,omitempty"`
	State        string `json:"state,omitempty"`
	UrlName      string `json:"url_name,omitempty"`
}

// RecommendedMachineResponse Schema definition for Recommended Machine Response
type RecommendedMachineResponse struct {
	// Card1 Schema definition for Machine Card
	Card1 MachineCard1 `json:"card1,omitempty"`

	// Card2 Schema definition for Machine Card
	Card2 MachineCard2 `json:"card2,omitempty"`
	State StringArray  `json:"state,omitempty"`
}

// ReviewMessage Schema definition for Review Message
type ReviewMessage = []ReviewMessageItem

// ReviewMessageItem defines model for ReviewMessageItem.
type ReviewMessageItem struct {
	AuthUserInHelpfulReviews bool                `json:"authUserInHelpfulReviews,omitempty"`
	CreatedAt                time.Time           `json:"created_at,omitempty"`
	Difficulty               int                 `json:"difficulty"`
	Featured                 int                 `json:"featured,omitempty"`
	Headline                 string              `json:"headline"`
	HelpfulReviews           HelpfulReviewsItems `json:"helpful_reviews,omitempty"`
	HelpfulReviewsCount      int                 `json:"helpful_reviews_count,omitempty"`
	Id                       int                 `json:"id,omitempty"`
	Message                  string              `json:"message,omitempty"`
	Released                 int                 `json:"released,omitempty"`
	Review                   string              `json:"review"`
	Stars                    int                 `json:"stars,omitempty"`
	Title                    string              `json:"title"`
	User                     UserBasicInfo       `json:"user"`
	UserId                   int                 `json:"user_id,omitempty"`
}

// ReviewOverview Schema definition for Review Overview
type ReviewOverview struct {
	Rating int    `json:"rating,omitempty"`
	Text   string `json:"text,omitempty"`

	// User Schema definition for Common Id Name
	User CommonIdName `json:"user,omitempty"`
}

// ReviewPaginatedResponse Schema definition for Reviews Response
type ReviewPaginatedResponse struct {
	Average float32 `json:"average,omitempty"`
	Count   int     `json:"count,omitempty"`

	// Data Schema definition for Review Message
	Data ReviewMessage `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// ReviewProlab Schema definition for Review Prolab
type ReviewProlab struct {
	CreatedAt                time.Time `json:"created_at,omitempty"`
	Difficulty               int       `json:"difficulty,omitempty"`
	HelpfulProFeedbacksCount int       `json:"helpful_pro_feedbacks_count,omitempty"`
	Id                       int       `json:"id,omitempty"`
	Rating                   int       `json:"rating,omitempty"`
	Text                     string    `json:"text,omitempty"`

	// User Schema definition for Lab Master
	User                      UserIdNameThumb `json:"user,omitempty"`
	UserInHelpfulProFeedbacks bool            `json:"user_in_helpful_pro_feedbacks,omitempty"`
}

// ReviewsResponse Schema definition for Reviews Response
type ReviewsResponse struct {
	Average float32 `json:"average,omitempty"`
	Count   int     `json:"count,omitempty"`

	// Info Schema definition for Review Message
	Info ReviewMessage `json:"info,omitempty"`
}

// SearchChallengeItem defines model for SearchChallengeItem.
type SearchChallengeItem struct {
	ChallengeCategoryId int    `json:"challenge_category_id,omitempty"`
	Description         string `json:"description,omitempty"`
	Id                  int    `json:"id,omitempty"`
	Value               string `json:"value,omitempty"`
}

// SearchChallengesItems defines model for SearchChallengesItems.
type SearchChallengesItems = []SearchChallengeItem

// SearchFetchMachinesItem defines model for SearchFetchMachinesItem.
type SearchFetchMachinesItem struct {
	Avatar string `json:"avatar,omitempty"`
	Id     int    `json:"id,omitempty"`
	IsSp   bool   `json:"isSp,omitempty"`
	TierId string `json:"tierId"`
	Value  string `json:"value,omitempty"`
}

// SearchFetchResponse Schema definition for Search Fetch Response
type SearchFetchResponse struct {
	Challenges SearchChallengesItems `json:"challenges,omitempty"`
	Joboffers  SearchJobOffersItems  `json:"joboffers,omitempty"`
	Machines   SearchMachinesItems   `json:"machines,omitempty"`
	Teams      SearchTeamItems       `json:"teams,omitempty"`
	Users      SearchUsersItems      `json:"users,omitempty"`
}

// SearchJobOfferItem defines model for SearchJobOfferItem.
type SearchJobOfferItem struct {
	Id string `json:"id,omitempty"`
}

// SearchJobOffersItems defines model for SearchJobOffersItems.
type SearchJobOffersItems = []SearchJobOfferItem

// SearchMachinesItems defines model for SearchMachinesItems.
type SearchMachinesItems = []SearchFetchMachinesItem

// SearchTeamItem defines model for SearchTeamItem.
type SearchTeamItem struct {
	Avatar string `json:"avatar,omitempty"`
	Id     int    `json:"id,omitempty"`
	Motto  string `json:"motto"`
	Value  string `json:"value,omitempty"`
}

// SearchTeamItems defines model for SearchTeamItems.
type SearchTeamItems = []SearchTeamItem

// SearchUserItem defines model for SearchUserItem.
type SearchUserItem struct {
	Avatar string `json:"avatar,omitempty"`
	Id     int    `json:"id,omitempty"`
	Value  string `json:"value,omitempty"`
}

// SearchUsersItems defines model for SearchUsersItems.
type SearchUsersItems = []SearchUserItem

// SeasonActive Schema definition for Season Active
type SeasonActive struct {
	Data SeasonActiveData `json:"data,omitempty"`
}

// SeasonActiveData defines model for SeasonActiveData.
type SeasonActiveData struct {
	Active         bool                          `json:"active,omitempty"`
	Avatar         string                        `json:"avatar,omitempty"`
	Cocreators     UserBasicInfoItemsWithRespect `json:"cocreators"`
	Creator        UserBasicInfoItemsWithRespect `json:"creator"`
	DifficultyText string                        `json:"difficulty_text,omitempty"`
	Id             int                           `json:"id,omitempty"`
	InfoStatus     string                        `json:"info_status"`
	Ip             string                        `json:"ip"`
	IsOwnedRoot    bool                          `json:"is_owned_root,omitempty"`
	IsOwnedUser    bool                          `json:"is_owned_user,omitempty"`
	IsReleased     bool                          `json:"is_released,omitempty"`
	IsRootBlood    bool                          `json:"is_root_blood,omitempty"`
	IsUserBlood    bool                          `json:"is_user_blood,omitempty"`
	MakerId        int                           `json:"maker_id,omitempty"`
	Name           string                        `json:"name,omitempty"`
	Os             string                        `json:"os,omitempty"`

	// PlayInfo Schema definition for Play Info
	PlayInfo        PlayInfo  `json:"play_info,omitempty"`
	Points          int       `json:"points,omitempty"`
	Poweroff        int       `json:"poweroff,omitempty"`
	Production      bool      `json:"production,omitempty"`
	Release         time.Time `json:"release,omitempty"`
	ReleaseTime     time.Time `json:"release_time,omitempty"`
	Retired         bool      `json:"retired,omitempty"`
	RootBloodPoints int       `json:"root_blood_points,omitempty"`
	RootOwnPoints   int       `json:"root_own_points,omitempty"`
	RootPoints      int       `json:"root_points,omitempty"`
	StaticPoints    int       `json:"static_points,omitempty"`
	Unknown         bool      `json:"unknown,omitempty"`
	UserBloodPoints int       `json:"user_blood_points,omitempty"`
	UserOwnPoints   int       `json:"user_own_points,omitempty"`
	UserPoints      int       `json:"user_points,omitempty"`
}

// SeasonCompletedMachine Schema definition for Season Completed Machine
type SeasonCompletedMachine struct {
	Data SeasonCompletedMachineData `json:"data,omitempty"`
}

// SeasonCompletedMachineData defines model for SeasonCompletedMachineData.
type SeasonCompletedMachineData struct {
	SeasonFlags      int `json:"season_flags,omitempty"`
	SeasonPwnedFlags int `json:"season_pwned_flags,omitempty"`
}

// SeasonEndData defines model for SeasonEndData.
type SeasonEndData struct {
	Owns   SeasonOwns      `json:"owns,omitempty"`
	Rank   SeasonRank      `json:"rank,omitempty"`
	Season SeasonEndSeason `json:"season,omitempty"`
	User   UserBasicInfo   `json:"user"`
}

// SeasonEndResponse defines model for SeasonEndResponse.
type SeasonEndResponse struct {
	Data SeasonEndData `json:"data,omitempty"`
}

// SeasonEndSeason defines model for SeasonEndSeason.
type SeasonEndSeason struct {
	Id        int    `json:"id,omitempty"`
	Name      string `json:"name,omitempty"`
	Tier      string `json:"tier,omitempty"`
	TierFrame string `json:"tier_frame,omitempty"`
}

// SeasonListData defines model for SeasonListData.
type SeasonListData = []SeasonListDataItem

// SeasonListDataItem defines model for SeasonListDataItem.
type SeasonListDataItem struct {
	Active             bool      `json:"active,omitempty"`
	BackgroundImage    string    `json:"background_image,omitempty"`
	CurrentWeek        int       `json:"current_week"`
	EndDate            time.Time `json:"end_date,omitempty"`
	Id                 int       `json:"id,omitempty"`
	IsVisible          bool      `json:"is_visible,omitempty"`
	Logo               string    `json:"logo,omitempty"`
	Name               string    `json:"name,omitempty"`
	NewBackgroundImage string    `json:"new_background_image,omitempty"`
	Players            int       `json:"players,omitempty"`
	StartDate          time.Time `json:"start_date,omitempty"`
	State              string    `json:"state,omitempty"`
	Subtitle           string    `json:"subtitle"`
	Weeks              int       `json:"weeks,omitempty"`
}

// SeasonListResponse Schema definition for Season List Response
type SeasonListResponse struct {
	Data SeasonListData `json:"data,omitempty"`
}

// SeasonMachines Schema definition for Season Machines
type SeasonMachines struct {
	Data SeasonMachinesDataItems `json:"data,omitempty"`
}

// SeasonMachinesDataItem defines model for SeasonMachinesDataItem.
type SeasonMachinesDataItem struct {
	Active         bool      `json:"active,omitempty"`
	Avatar         string    `json:"avatar,omitempty"`
	DifficultyText string    `json:"difficulty_text,omitempty"`
	Id             int       `json:"id,omitempty"`
	IsOwnedRoot    bool      `json:"is_owned_root,omitempty"`
	IsOwnedUser    bool      `json:"is_owned_user,omitempty"`
	IsReleased     bool      `json:"is_released,omitempty"`
	IsRootBlood    bool      `json:"is_root_blood,omitempty"`
	IsUserBlood    bool      `json:"is_user_blood,omitempty"`
	Name           string    `json:"name,omitempty"`
	Os             string    `json:"os,omitempty"`
	Production     int       `json:"production,omitempty"`
	Rating         int       `json:"rating,omitempty"`
	RatingCount    int       `json:"ratingCount,omitempty"`
	ReleaseTime    time.Time `json:"release_time,omitempty"`
	RootPoints     int       `json:"root_points,omitempty"`
	Unknown        bool      `json:"unknown,omitempty"`
	UserPoints     int       `json:"user_points,omitempty"`
}

// SeasonMachinesDataItems defines model for SeasonMachinesDataItems.
type SeasonMachinesDataItems = []SeasonMachinesDataItem

// SeasonOwns defines model for SeasonOwns.
type SeasonOwns struct {
	Root          BloodsObtained `json:"root,omitempty"`
	TotalMachines int            `json:"total_machines,omitempty"`
	User          BloodsObtained `json:"user,omitempty"`
}

// SeasonPlatersLeaderboardTopDataItem defines model for SeasonPlatersLeaderboardTopDataItem.
type SeasonPlatersLeaderboardTopDataItem struct {
	AvatarThumb string  `json:"avatar_thumb,omitempty"`
	Country     string  `json:"country"`
	IsRespected bool    `json:"is_respected,omitempty"`
	LastOwn     string  `json:"last_own"`
	LeagueRank  string  `json:"league_rank,omitempty"`
	Name        string  `json:"name,omitempty"`
	Points      float32 `json:"points,omitempty"`
	Rank        float32 `json:"rank,omitempty"`
	ResourceId  int     `json:"resource_id,omitempty"`
	RootBloods  float32 `json:"root_bloods,omitempty"`
	RootOwns    float32 `json:"root_owns,omitempty"`
	UserBloods  float32 `json:"user_bloods,omitempty"`
	UserOwns    float32 `json:"user_owns,omitempty"`
}

// SeasonPlayersLeaderBoardTopData defines model for SeasonPlayersLeaderBoardTopData.
type SeasonPlayersLeaderBoardTopData = []SeasonPlatersLeaderboardTopDataItem

// SeasonPlayersLeaderboardDataItem defines model for SeasonPlayersLeaderboardDataItem.
type SeasonPlayersLeaderboardDataItem struct {
	AccountId     string  `json:"account_id,omitempty"`
	AvatarThumb   string  `json:"avatar_thumb,omitempty"`
	Country       string  `json:"country"`
	CountryName   string  `json:"country_name"`
	LastOwn       string  `json:"last_own,omitempty"`
	LeagueRank    string  `json:"league_rank,omitempty"`
	Name          string  `json:"name,omitempty"`
	Points        int     `json:"points,omitempty"`
	PositiveTrend bool    `json:"positive_trend,omitempty"`
	Rank          int     `json:"rank,omitempty"`
	RankTrend     float32 `json:"rank_trend,omitempty"`
	ResourceId    int     `json:"resource_id,omitempty"`
	RootBloods    int     `json:"root_bloods,omitempty"`
	RootOwns      int     `json:"root_owns,omitempty"`
	UserBloods    int     `json:"user_bloods,omitempty"`
	UserOwns      int     `json:"user_owns,omitempty"`
}

// SeasonPlayersLeaderboardDataItems defines model for SeasonPlayersLeaderboardDataItems.
type SeasonPlayersLeaderboardDataItems = []SeasonPlayersLeaderboardDataItem

// SeasonPlayersLeaderboardResponse defines model for SeasonPlayersLeaderboardResponse.
type SeasonPlayersLeaderboardResponse struct {
	Data SeasonPlayersLeaderboardDataItems `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// SeasonPlayersLeaderboardTopResponse defines model for SeasonPlayersLeaderboardTopResponse.
type SeasonPlayersLeaderboardTopResponse struct {
	Data SeasonPlayersLeaderBoardTopData `json:"data,omitempty"`
}

// SeasonRank defines model for SeasonRank.
type SeasonRank struct {
	Current int    `json:"current,omitempty"`
	Suffix  string `json:"suffix,omitempty"`
	Total   int    `json:"total,omitempty"`
}

// SeasonRewardGroupItem defines model for SeasonRewardGroupItem.
type SeasonRewardGroupItem struct {
	Description       string             `json:"description"`
	FlagsNeeded       int                `json:"flags_needed,omitempty"`
	Id                int                `json:"id,omitempty"`
	Image             string             `json:"image"`
	Name              string             `json:"name,omitempty"`
	Order             int                `json:"order,omitempty"`
	RankUpRequirement string             `json:"rank_up_requirement,omitempty"`
	RewardTypeId      int                `json:"reward_type_id,omitempty"`
	Rewards           SeasonRewardsItems `json:"rewards,omitempty"`
	Subtitle          string             `json:"subtitle"`
}

// SeasonRewardItem defines model for SeasonRewardItem.
type SeasonRewardItem struct {
	Id            int     `json:"id,omitempty"`
	Image         string  `json:"image,omitempty"`
	Name          string  `json:"name,omitempty"`
	Order         float32 `json:"order,omitempty"`
	RewardGroupId int     `json:"reward_group_id,omitempty"`
}

// SeasonRewardTypes defines model for SeasonRewardTypes.
type SeasonRewardTypes struct {
	Description string     `json:"description,omitempty"`
	Groups      GroupItems `json:"groups,omitempty"`
	Id          int        `json:"id,omitempty"`
	Name        string     `json:"name,omitempty"`
	Order       float32    `json:"order,omitempty"`
}

// SeasonRewardsData defines model for SeasonRewardsData.
type SeasonRewardsData = []SeasonRewardsDataItem

// SeasonRewardsDataItem defines model for SeasonRewardsDataItem.
type SeasonRewardsDataItem struct {
	RewardTypes SeasonRewardTypes `json:"reward_types,omitempty"`
}

// SeasonRewardsItems defines model for SeasonRewardsItems.
type SeasonRewardsItems = []SeasonRewardItem

// SeasonRewardsResponse defines model for SeasonRewardsResponse.
type SeasonRewardsResponse struct {
	Data SeasonRewardsData `json:"data,omitempty"`
}

// SeasonUserFollowerData defines model for SeasonUserFollowerData.
type SeasonUserFollowerData struct {
	TopRankedFollowers FollowerItems `json:"top_ranked_followers,omitempty"`
	TopSeasonUsers     FollowerItems `json:"top_season_users,omitempty"`
}

// SeasonUserFollowers Schema definition for Season User Followers
type SeasonUserFollowers struct {
	Data SeasonUserFollowerData `json:"data,omitempty"`
}

// SeasonUserRank Schema definition for Season User Rank
type SeasonUserRank struct {
	Data SeasonUserRankData `json:"data,omitempty"`
}

// SeasonUserRankData defines model for SeasonUserRankData.
type SeasonUserRankData struct {
	FlagsToNextRank   FlagsToNextRank `json:"flags_to_next_rank,omitempty"`
	League            string          `json:"league,omitempty"`
	NextRank          int             `json:"next_rank,omitempty"`
	Rank              int             `json:"rank,omitempty"`
	RankSuffix        string          `json:"rank_suffix,omitempty"`
	RootBloods        int             `json:"root_bloods,omitempty"`
	RootOwns          int             `json:"root_owns,omitempty"`
	TotalRanks        int             `json:"total_ranks,omitempty"`
	TotalSeasonPoints int             `json:"total_season_points,omitempty"`
	UserBloods        int             `json:"user_bloods,omitempty"`
	UserOwns          int             `json:"user_owns,omitempty"`
}

// Server Schema definition for Server
type Server struct {
	CurrentClients int    `json:"current_clients,omitempty"`
	FriendlyName   string `json:"friendly_name,omitempty"`
	Full           bool   `json:"full,omitempty"`
	Id             int    `json:"id,omitempty"`
	Location       string `json:"location,omitempty"`
}

// ServerConnection Schema definition for Assigned Server
type ServerConnection struct {
	CurrentClients int    `json:"current_clients,omitempty"`
	FriendlyName   string `json:"friendly_name,omitempty"`
	Id             int    `json:"id,omitempty"`
	Location       string `json:"location,omitempty"`
}

// ServerGroup Schema definition for Server Group
type ServerGroup struct {
	Location string            `json:"location,omitempty"`
	Name     string            `json:"name,omitempty"`
	Servers  map[string]Server `json:"servers,omitempty"`
}

// SherlockDetail defines model for SherlockDetail.
type SherlockDetail struct {
	AcademyModules AcademyModulesItems `json:"academyModules"`
	Description    string              `json:"description,omitempty"`
	Id             int                 `json:"id,omitempty"`
	UserOwnsCount  int                 `json:"user_owns_count,omitempty"`
}

// SherlockDownloadLink Schema definition for Sherlock Download Link
type SherlockDownloadLink struct {
	ExpiresIn int    `json:"expires_in,omitempty"`
	Url       string `json:"url,omitempty"`
}

// SherlockInfo Schema definition for Sherlock Info
type SherlockInfo struct {
	Data SherlockDetail `json:"data,omitempty"`
}

// SherlockItem Schema definition for Sherlock Item
type SherlockItem struct {
	AuthUserHasReviewed bool            `json:"auth_user_has_reviewed,omitempty"`
	Avatar              string          `json:"avatar,omitempty"`
	CategoryId          int             `json:"category_id,omitempty"`
	CategoryName        string          `json:"category_name,omitempty"`
	Difficulty          string          `json:"difficulty,omitempty"`
	Id                  int             `json:"id,omitempty"`
	IsOwned             bool            `json:"is_owned,omitempty"`
	Name                string          `json:"name,omitempty"`
	Pinned              bool            `json:"pinned,omitempty"`
	PlayMethods         StringArray     `json:"play_methods,omitempty"`
	Progress            int             `json:"progress,omitempty"`
	Rating              float32         `json:"rating"`
	RatingCount         int             `json:"rating_count,omitempty"`
	ReleaseDate         string          `json:"release_date,omitempty"`
	Retires             SherlockRetires `json:"retires"`
	Solves              int             `json:"solves,omitempty"`

	// State The state of the item.
	State string `json:"state,omitempty"`
}

// SherlockItemList Schema definition for Sherlock Item List
type SherlockItemList struct {
	Data SherlockListData `json:"data,omitempty"`

	// Links Schema definition for Links
	Links Links `json:"links,omitempty"`

	// Meta Schema definition for Meta
	Meta Meta `json:"meta,omitempty"`
}

// SherlockListData defines model for SherlockListData.
type SherlockListData = []SherlockItem

// SherlockNamedItem Schema definition for Sherlock Named Item
type SherlockNamedItem struct {
	Data SherlockNamedItemData `json:"data,omitempty"`
}

// SherlockNamedItemData defines model for SherlockNamedItemData.
type SherlockNamedItemData struct {
	AuthUserHasReviewed bool        `json:"auth_user_has_reviewed,omitempty"`
	Avatar              string      `json:"avatar,omitempty"`
	CategoryId          int         `json:"category_id,omitempty"`
	CategoryName        string      `json:"category_name,omitempty"`
	Difficulty          string      `json:"difficulty,omitempty"`
	Favorite            bool        `json:"favorite,omitempty"`
	Id                  int         `json:"id,omitempty"`
	IsTodo              bool        `json:"isTodo,omitempty"`
	Name                string      `json:"name,omitempty"`
	PlayMethods         StringArray `json:"play_methods,omitempty"`
	Rating              float32     `json:"rating,omitempty"`
	RatingCount         int         `json:"rating_count,omitempty"`
	ReleaseAt           time.Time   `json:"release_at,omitempty"`
	Retired             bool        `json:"retired,omitempty"`
	ShowGoVip           bool        `json:"show_go_vip,omitempty"`
	State               string      `json:"state,omitempty"`
	Tags                StringArray `json:"tags,omitempty"`
	UserCanReview       bool        `json:"user_can_review,omitempty"`
	WriteupVisible      bool        `json:"writeup_visible,omitempty"`
}

// SherlockPlay defines model for SherlockPlay.
type SherlockPlay struct {
	Creators SherlockPlayCreatorsItems `json:"creators,omitempty"`
	FileName string                    `json:"file_name,omitempty"`
	FileSize string                    `json:"file_size,omitempty"`
	Id       int                       `json:"id,omitempty"`

	// PlayInfo Alternate structure of PlayInfo used in Sherlocks and Challenges
	PlayInfo PlayInfoAlt `json:"play_info,omitempty"`
	Scenario string      `json:"scenario,omitempty"`
}

// SherlockPlayCreatorsItems defines model for SherlockPlayCreatorsItems.
type SherlockPlayCreatorsItems = []Maker

// SherlockPlayResponse Schema definition for Sherlock Play Response
type SherlockPlayResponse struct {
	Data SherlockPlay `json:"data,omitempty"`
}

// SherlockProgress Schema definition for Sherlock Progress
type SherlockProgress struct {
	Data SherlockProgressData `json:"data,omitempty"`
}

// SherlockProgressData defines model for SherlockProgressData.
type SherlockProgressData struct {
	IsOwned       bool `json:"is_owned,omitempty"`
	OwnRank       int  `json:"own_rank,omitempty"`
	Progress      int  `json:"progress,omitempty"`
	TasksAnswered int  `json:"tasks_answered,omitempty"`
	TotalTasks    int  `json:"total_tasks,omitempty"`
}

// SherlockRetires defines model for SherlockRetires.
type SherlockRetires struct {
	AvatarUrl  string `json:"avatar_url,omitempty"`
	Difficulty string `json:"difficulty,omitempty"`
	Name       string `json:"name,omitempty"`
}

// SherlockTask Schema definition for Sherlock Task
type SherlockTask struct {
	Completed      bool        `json:"completed,omitempty"`
	Description    string      `json:"description,omitempty"`
	Flag           string      `json:"flag,omitempty"`
	Hint           string      `json:"hint"`
	Id             int         `json:"id,omitempty"`
	MaskedFlag     string      `json:"masked_flag,omitempty"`
	Options        ObjectArray `json:"options,omitempty"`
	PrerequisiteId int         `json:"prerequisite_id"`
	TaskType       TaskType    `json:"task_type,omitempty"`
	Title          string      `json:"title,omitempty"`
	Type           TaskType    `json:"type,omitempty"`
}

// SherlockTaskArray defines model for SherlockTaskArray.
type SherlockTaskArray = []SherlockTask

// SherlockTasksList Schema definition for Sherlock Tasks List
type SherlockTasksList struct {
	Data SherlockTaskArray `json:"data,omitempty"`
}

// SherlockWriteup Schema definition for Sherlock Writeup
type SherlockWriteup struct {
	Data WriteupData `json:"data,omitempty"`
}

// SidebarAnnouncementResponse Schema definition for Sidebar Announcement Response
type SidebarAnnouncementResponse struct {
	// Announcement Schema definition for Announcement
	Announcement Announcement `json:"announcement,omitempty"`
}

// SidebarChangeLog Schema definition for Sidebar Change Log
type SidebarChangeLog struct {
	CreatedAt time.Time `json:"created_at,omitempty"`
	Id        int       `json:"id,omitempty"`
	Version   string    `json:"version,omitempty"`
}

// SidebarChangeLogResponse Schema definition for Sidebar Change Log Response
type SidebarChangeLogResponse struct {
	// Changelog Schema definition for Sidebar Change Log
	Changelog SidebarChangeLog `json:"changelog,omitempty"`
}

// SocialLinks Schema definition for Social Links
type SocialLinks struct {
	Discord string `json:"discord,omitempty"`
	Forum   string `json:"forum,omitempty"`
}

// SpProfileIdResponse Schema definition for Sp Profile Id Response
type SpProfileIdResponse struct {
	Info SpProfileInfo `json:"info,omitempty"`
}

// SpProfileInfo defines model for SpProfileInfo.
type SpProfileInfo struct {
	Ip string `json:"ip"`

	// PlayInfo Schema definition for Play Info
	PlayInfo PlayInfoCasing `json:"playInfo,omitempty"`
}

// SpTierData defines model for SpTierData.
type SpTierData struct {
	Description string             `json:"description,omitempty"`
	Id          int                `json:"id,omitempty"`
	Machines    SpTierMachineItems `json:"machines,omitempty"`
	Name        string             `json:"name,omitempty"`
}

// SpTierMachine defines model for SpTierMachine.
type SpTierMachine struct {
	Avatar         string                       `json:"avatar,omitempty"`
	DifficultyText string                       `json:"difficultyText,omitempty"`
	Id             int                          `json:"id,omitempty"`
	InfoStatus     string                       `json:"info_status"`
	Name           string                       `json:"name,omitempty"`
	Order          int                          `json:"order,omitempty"`
	Os             string                       `json:"os,omitempty"`
	RootOwn        bool                         `json:"rootOwn,omitempty"`
	SpFlag         int                          `json:"sp_flag,omitempty"`
	StaticPoints   int                          `json:"static_points,omitempty"`
	Tasks          SpTierTasksItems             `json:"tasks,omitempty"`
	UserOwn        bool                         `json:"userOwn,omitempty"`
	Video          Video                        `json:"video,omitempty"`
	Walkthrough    SpTierMachineWalkthroughItem `json:"walkthrough,omitempty"`
	YoutubeId      string                       `json:"youtube_id"`
}

// SpTierMachineItems defines model for SpTierMachineItems.
type SpTierMachineItems = []SpTierMachine

// SpTierMachineTasks defines model for SpTierMachineTasks.
type SpTierMachineTasks struct {
	Description          string      `json:"description,omitempty"`
	Flag                 string      `json:"flag,omitempty"`
	Hint                 string      `json:"hint"`
	Id                   int         `json:"id,omitempty"`
	MaskedFlag           string      `json:"masked_flag"`
	Options              ObjectArray `json:"options,omitempty"`
	TaskType             int         `json:"task_type,omitempty"`
	Title                string      `json:"title,omitempty"`
	Type                 int         `json:"type,omitempty"`
	UserCompletionsCount int         `json:"user_completions_count,omitempty"`
}

// SpTierMachineWalkthroughItem defines model for SpTierMachineWalkthroughItem.
type SpTierMachineWalkthroughItem struct {
	Filename string `json:"filename,omitempty"`
	Sha256   string `json:"sha256,omitempty"`
}

// SpTierProgressItems defines model for SpTierProgressItems.
type SpTierProgressItems = []SpTiersProgressItem

// SpTierResponse Schema definition for Sp Tier Info
type SpTierResponse struct {
	Data SpTierData `json:"data,omitempty"`
}

// SpTierTasksItems defines model for SpTierTasksItems.
type SpTierTasksItems = []SpTierMachineTasks

// SpTiersProgressItem defines model for SpTiersProgressItem.
type SpTiersProgressItem struct {
	CompletionPercentage            int    `json:"completion_percentage,omitempty"`
	Description                     string `json:"description,omitempty"`
	FreeMachineCompletionPercentage int    `json:"free_machine_completion_percentage,omitempty"`
	Id                              int    `json:"id,omitempty"`
	Name                            string `json:"name,omitempty"`
}

// SpTiersProgressResponse Schema definition for Sp Tiers Progress Response
type SpTiersProgressResponse struct {
	Data SpTierProgressItems `json:"data,omitempty"`
}

// SpawnExtendRequest Schema definition for Spawn Request
type SpawnExtendRequest struct {
	MachineId int `json:"machine_id"`
}

// SpsCard Schema definition for Home Sps Card
type SpsCard = []SpsCardItem

// SpsCardItem defines model for SpsCardItem.
type SpsCardItem struct {
	Avatar                          string `json:"avatar,omitempty"`
	CompletionPercentage            int    `json:"completion_percentage,omitempty"`
	FreeMachineCompletionPercentage int    `json:"free_machine_completion_percentage,omitempty"`
	Id                              int    `json:"id,omitempty"`
	Name                            string `json:"name,omitempty"`
}

// StringArray defines model for StringArray.
type StringArray = []string

// TabloidOwns defines model for TabloidOwns.
type TabloidOwns struct {
	Challenges int              `json:"challenges,omitempty"`
	Latest     TabloidOwnsItems `json:"latest,omitempty"`
	Machines   int              `json:"machines,omitempty"`
}

// TabloidOwnsItems defines model for TabloidOwnsItems.
type TabloidOwnsItems = []OwnsItems

// Tag Schema definition for Tag
type Tag struct {
	Id            int    `json:"id,omitempty"`
	Name          string `json:"name,omitempty"`
	TagCategoryId int    `json:"tag_category_id,omitempty"`
}

// TagCategory Schema definition for Tag Category
type TagCategory struct {
	Id   int                  `json:"id,omitempty"`
	Name string               `json:"name,omitempty"`
	Tags TagCategoryTagsItems `json:"tags,omitempty"`
}

// TagCategoryTagsItems defines model for TagCategoryTagsItems.
type TagCategoryTagsItems = []Tag

// TaskFlagResponse Schema definition for Task Flag Response
type TaskFlagResponse struct {
	Message  string   `json:"message,omitempty"`
	UserTask UserTask `json:"user_task,omitempty"`
}

// TaskType defines model for TaskType.
type TaskType struct {
	Id   int    `json:"id,omitempty"`
	Text string `json:"text,omitempty"`
}

// TeamActivityIdResponse Schema definition for Team Activity Id Response
type TeamActivityIdResponse = []TeamActivityItem

// TeamActivityItem defines model for TeamActivityItem.
type TeamActivityItem struct {
	ChallengeCategory string           `json:"challenge_category,omitempty"`
	Date              time.Time        `json:"date"`
	DateDiff          string           `json:"date_diff"`
	FirstBlood        bool             `json:"first_blood"`
	FlagTitle         string           `json:"flag_title,omitempty"`
	Id                int              `json:"id"`
	MachineAvatar     string           `json:"machine_avatar,omitempty"`
	Name              string           `json:"name"`
	ObjectType        string           `json:"object_type"`
	Points            int              `json:"points"`
	Type              string           `json:"type"`
	User              TeamActivityUser `json:"user"`
}

// TeamActivityUser defines model for TeamActivityUser.
type TeamActivityUser struct {
	AvatarThumb string `json:"avatar_thumb,omitempty"`
	Id          int    `json:"id"`
	Name        string `json:"name"`
	Public      int    `json:"public"`
}

// TeamGraphData defines model for TeamGraphData.
type TeamGraphData struct {
	Points  IntArray `json:"points,omitempty"`
	Rank    IntArray `json:"rank,omitempty"`
	Respect IntArray `json:"respect,omitempty"`
}

// TeamGraphIdResponse Schema definition for Team Graph Id Response
type TeamGraphIdResponse struct {
	Data   TeamGraphData `json:"data,omitempty"`
	Status bool          `json:"status,omitempty"`
}

// TeamInfoIdResponse Schema definition for Team Info Id Response
type TeamInfoIdResponse struct {
	AvatarUrl       string `json:"avatar_url,omitempty"`
	CanDeleteAvatar bool   `json:"can_delete_avatar,omitempty"`

	// Captain Schema definition for Lab Master
	Captain         UserIdNameThumb `json:"captain,omitempty"`
	CountryCode     string          `json:"country_code"`
	CountryName     string          `json:"country_name,omitempty"`
	CoverImageUrl   string          `json:"cover_image_url"`
	Description     string          `json:"description"`
	Discord         string          `json:"discord"`
	Facebook        string          `json:"facebook"`
	Id              int             `json:"id,omitempty"`
	IsRespected     bool            `json:"is_respected,omitempty"`
	JoinRequestSent bool            `json:"join_request_sent,omitempty"`
	Motto           string          `json:"motto,omitempty"`
	Name            string          `json:"name,omitempty"`
	Points          int             `json:"points,omitempty"`
	Public          bool            `json:"public,omitempty"`
	Twitter         string          `json:"twitter"`
}

// TeamInformationProfileData defines model for TeamInformationProfileData.
type TeamInformationProfileData struct {
	Active int `json:"active,omitempty"`

	// Captain Schema definition for Lab Master
	Captain              UserIdNameThumb `json:"captain,omitempty"`
	CountryCode          string          `json:"country_code,omitempty"`
	CountryName          string          `json:"country_name,omitempty"`
	CoverImageUrl        string          `json:"cover_image_url"`
	Description          string          `json:"description,omitempty"`
	Discord              string          `json:"discord"`
	Facebook             string          `json:"facebook"`
	HasAutoGeneratedLogo int             `json:"has_auto_generated_logo,omitempty"`
	Id                   int             `json:"id,omitempty"`
	IsRespected          bool            `json:"is_respected,omitempty"`
	JoinRequestSent      bool            `json:"join_request_sent,omitempty"`
	LogoUrl              string          `json:"logo_url"`
	Motto                string          `json:"motto"`
	Name                 string          `json:"name,omitempty"`
	Points               int             `json:"points,omitempty"`
	Twitter              string          `json:"twitter"`
	Url                  string          `json:"url,omitempty"`
}

// TeamInformationProfileResponse Schema definition for Team Information Profile Response
type TeamInformationProfileResponse struct {
	Data    TeamInformationProfileData `json:"data,omitempty"`
	Message string                     `json:"message,omitempty"`
}

// TeamInvitationsIdResponse Schema definition for Team Invitations Id Response
type TeamInvitationsIdResponse struct {
	Exception string                 `json:"exception"`
	Headers   map[string]interface{} `json:"headers,omitempty"`
	Original  []UserEntry            `json:"original,omitempty"`
}

// TeamMachineAttackPaths defines model for TeamMachineAttackPaths.
type TeamMachineAttackPaths struct {
	// Blockchain Schema definition for Teams Attack Path Card
	Blockchain TeamsAttackPathCard `json:"Blockchain,omitempty"`

	// Cloud Schema definition for Teams Attack Path Card
	Cloud TeamsAttackPathCard `json:"Cloud,omitempty"`

	// EnterpriseNetwork Schema definition for Teams Attack Path Card
	EnterpriseNetwork TeamsAttackPathCard `json:"Enterprise Network,omitempty"`

	// Forensics Schema definition for Teams Attack Path Card
	Forensics TeamsAttackPathCard `json:"Forensics,omitempty"`

	// Mobile Schema definition for Teams Attack Path Card
	Mobile TeamsAttackPathCard `json:"Mobile,omitempty"`

	// NicheTechnologies Schema definition for Teams Attack Path Card
	NicheTechnologies TeamsAttackPathCard `json:"Niche Technologies,omitempty"`

	// Person Schema definition for Teams Attack Path Card
	Person TeamsAttackPathCard `json:"Person,omitempty"`

	// SecurityOperations Schema definition for Teams Attack Path Card
	SecurityOperations TeamsAttackPathCard `json:"Security Operations,omitempty"`

	// VulnerabilityAssessment Schema definition for Teams Attack Path Card
	VulnerabilityAssessment TeamsAttackPathCard `json:"Vulnerability Assessment,omitempty"`

	// WebApplication Schema definition for Teams Attack Path Card
	WebApplication TeamsAttackPathCard `json:"Web Application,omitempty"`
}

// TeamMember University Members Resposne
type TeamMember struct {
	Avatar          string          `json:"avatar,omitempty"`
	CountryCode     string          `json:"country_code"`
	CountryName     string          `json:"country_name,omitempty"`
	Id              int             `json:"id,omitempty"`
	Name            string          `json:"name,omitempty"`
	Points          int             `json:"points,omitempty"`
	Public          int             `json:"public,omitempty"`
	Rank            TeamMember_Rank `json:"rank,omitempty"`
	RankText        string          `json:"rank_text,omitempty"`
	Role            string          `json:"role,omitempty"`
	RootBloodsCount int             `json:"root_bloods_count,omitempty"`
	RootOwns        int             `json:"root_owns,omitempty"`
	Team            TeamMemberTeam  `json:"team,omitempty"`
	UserBloodsCount int             `json:"user_bloods_count,omitempty"`
	UserOwns        int             `json:"user_owns,omitempty"`
}

// TeamMemberRank0 defines model for .
type TeamMemberRank0 = int

// TeamMemberRank1 defines model for .
type TeamMemberRank1 = string

// TeamMember_Rank defines model for TeamMember.Rank.
type TeamMember_Rank struct {
	union json.RawMessage
}

// TeamMemberTeam defines model for TeamMemberTeam.
type TeamMemberTeam struct {
	CaptainId int `json:"captain_id,omitempty"`
	Id        int `json:"id,omitempty"`
}

// TeamMembersIdResponse Schema definition for Team Members Id Response
type TeamMembersIdResponse = []TeamMember

// TeamsAttackPathCard Schema definition for Teams Attack Path Card
type TeamsAttackPathCard struct {
	AvgTeamsSolved float32 `json:"avg_teams_solved,omitempty"`
	Name           string  `json:"name,omitempty"`
	Solved         int     `json:"solved,omitempty"`
	Total          int     `json:"total,omitempty"`
}

// TopUserItem defines model for TopUserItem.
type TopUserItem struct {
	Id         int    `json:"id,omitempty"`
	Name       string `json:"name,omitempty"`
	Points     int    `json:"points"`
	UserAvatar string `json:"user_avatar,omitempty"`
}

// TrackErrorResponse defines model for TrackErrorResponse.
type TrackErrorResponse struct {
	Error  string                   `json:"error"`
	Status TrackErrorResponseStatus `json:"status"`
}

// TrackErrorResponseStatus defines model for TrackErrorResponse.Status.
type TrackErrorResponseStatus string

// TrackSuccessItemsItem defines model for TrackSuccessItemsItem.
type TrackSuccessItemsItem struct {
	Avatar            string          `json:"avatar"`
	Category          string          `json:"category"`
	Complete          bool            `json:"complete,omitempty"`
	Difficulty        string          `json:"difficulty,omitempty"`
	DifficultyRatings DifficultyChart `json:"difficulty_ratings,omitempty"`
	Id                int             `json:"id,omitempty"`
	Name              string          `json:"name,omitempty"`
	Os                string          `json:"os"`
	Type              string          `json:"type,omitempty"`
}

// TrackSuccessItemsItems defines model for TrackSuccessItemsItems.
type TrackSuccessItemsItems = []TrackSuccessItemsItem

// TrackSuccessResponse Schema definition for Tracks Id Response
type TrackSuccessResponse struct {
	Completed            bool                   `json:"completed,omitempty"`
	CompletionCta        int                    `json:"completion_cta"`
	CompletionMessage    string                 `json:"completion_message"`
	CompletionUrl        string                 `json:"completion_url"`
	CoverImage           string                 `json:"cover_image"`
	Creator              TracksCreator          `json:"creator,omitempty"`
	Description          string                 `json:"description,omitempty"`
	Difficulty           string                 `json:"difficulty,omitempty"`
	Enrolled             bool                   `json:"enrolled,omitempty"`
	HasCompletionMessage bool                   `json:"has_completion_message,omitempty"`
	Id                   int                    `json:"id,omitempty"`
	Items                TrackSuccessItemsItems `json:"items,omitempty"`
	Liked                bool                   `json:"liked,omitempty"`
	Likes                int                    `json:"likes,omitempty"`
	Name                 string                 `json:"name,omitempty"`
	Official             bool                   `json:"official,omitempty"`
	StaffPick            float32                `json:"staff_pick,omitempty"`
}

// TracksCreator defines model for TracksCreator.
type TracksCreator struct {
	Avatar string `json:"avatar"`
	Id     int    `json:"id"`
	Name   string `json:"name"`
	Type   string `json:"type"`
}

// TracksEnrollResponse defines model for TracksEnrollResponse.
type TracksEnrollResponse struct {
	Enrolled bool `json:"enrolled,omitempty"`
}

// TracksIdResponse defines model for TracksIdResponse.
type TracksIdResponse struct {
	union json.RawMessage
}

// TracksItems defines model for TracksItems.
type TracksItems struct {
	CoverImage string        `json:"cover_image"`
	Creator    TracksCreator `json:"creator"`

	// Difficulty Difficulty level (e.g., Very Easy, Easy, Medium, Hard, etc.)
	Difficulty string `json:"difficulty"`
	Id         int    `json:"id"`
	Likes      int    `json:"likes"`
	Name       string `json:"name"`
	Official   bool   `json:"official"`
	StaffPick  int    `json:"staff_pick"`
}

// TracksLikeResponse defines model for TracksLikeResponse.
type TracksLikeResponse struct {
	Liked bool `json:"liked,omitempty"`
}

// TracksResponse Schema definition for Tracks Response
type TracksResponse = []TracksItems

// UniversityAcitivtyItem defines model for UniversityAcitivtyItem.
type UniversityAcitivtyItem struct {
	ChallengeCategory string                 `json:"challenge_category,omitempty"`
	Date              string                 `json:"date,omitempty"`
	DateDiff          string                 `json:"date_diff,omitempty"`
	FirstBlood        bool                   `json:"first_blood,omitempty"`
	Id                int                    `json:"id,omitempty"`
	MachineAvatar     string                 `json:"machine_avatar,omitempty"`
	Name              string                 `json:"name,omitempty"`
	ObjectType        string                 `json:"object_type,omitempty"`
	Points            float32                `json:"points,omitempty"`
	Type              string                 `json:"type,omitempty"`
	User              PublicUserProfileBasic `json:"user,omitempty"`
}

// UniversityActivityResponse defines model for UniversityActivityResponse.
type UniversityActivityResponse = []UniversityAcitivtyItem

// UniversityAllListResponse Schema for University All List Response
type UniversityAllListResponse struct {
	Data    UniversityListData `json:"data,omitempty"`
	Message string             `json:"message,omitempty"`
	Section string             `json:"section,omitempty"`
}

// UniversityChartChallengeCategoriesItem defines model for UniversityChartChallengeCategoriesItem.
type UniversityChartChallengeCategoriesItem struct {
	AllTeamsAvgPercentage float32 `json:"all_teams_avg_percentage,omitempty"`
	Id                    int     `json:"id,omitempty"`
	Name                  string  `json:"name,omitempty"`
	TeamPercentage        float32 `json:"team_percentage,omitempty"`
}

// UniversityChartChallengeCategoriesItems defines model for UniversityChartChallengeCategoriesItems.
type UniversityChartChallengeCategoriesItems = []UniversityChartChallengeCategoriesItem

// UniversityChartChallengeCategoriesResponse defines model for UniversityChartChallengeCategoriesResponse.
type UniversityChartChallengeCategoriesResponse struct {
	Data   UniversityChartChallengeCategoriesItems `json:"data,omitempty"`
	Status bool                                    `json:"status,omitempty"`
}

// UniversityChartMachinesAttackResponse defines model for UniversityChartMachinesAttackResponse.
type UniversityChartMachinesAttackResponse struct {
	MachineAttackPaths MachineAttackPaths `json:"machine_attack_paths,omitempty"`
	MachineOwns        MachineOwns        `json:"machine_owns,omitempty"`
}

// UniversityCountryListResponse defines model for UniversityCountryListResponse.
type UniversityCountryListResponse struct {
	Data    UniversityListData `json:"data,omitempty"`
	Message string             `json:"message,omitempty"`
	Section string             `json:"section,omitempty"`
}

// UniversityListData defines model for UniversityListData.
type UniversityListData struct {
	CurrentPage  int                 `json:"current_page,omitempty"`
	Data         UniversityListItems `json:"data,omitempty"`
	FirstPageUrl string              `json:"first_page_url"`
	From         int                 `json:"from,omitempty"`
	LastPage     int                 `json:"last_page"`
	LastPageUrl  string              `json:"last_page_url,omitempty"`
	Links        PaginationLinks     `json:"links,omitempty"`
	NextPageUrl  string              `json:"next_page_url"`
	Path         string              `json:"path,omitempty"`
	PerPage      int                 `json:"per_page,omitempty"`
	PrevPageUrl  int                 `json:"prev_page_url"`
	To           int                 `json:"to,omitempty"`
	Total        int                 `json:"total,omitempty"`
}

// UniversityListItem defines model for UniversityListItem.
type UniversityListItem struct {
	Cca2                 string      `json:"cca2,omitempty"`
	Country              string      `json:"country,omitempty"`
	CreatedAt            string      `json:"created_at,omitempty"`
	HasAutoGeneratedLogo int         `json:"has_auto_generated_logo,omitempty"`
	Id                   int         `json:"id,omitempty"`
	Name                 string      `json:"name,omitempty"`
	RespectedByCount     int         `json:"respected_by_count,omitempty"`
	UserAvatars          StringArray `json:"user_avatars,omitempty"`
	UsersCount           int         `json:"users_count,omitempty"`
}

// UniversityListItems defines model for UniversityListItems.
type UniversityListItems = []UniversityListItem

// UniversityMembersResponse University Members Resposne
type UniversityMembersResponse struct {
	Avatar          string         `json:"avatar,omitempty"`
	CountryCode     string         `json:"country_code"`
	CountryName     string         `json:"country_name,omitempty"`
	Id              int            `json:"id,omitempty"`
	Name            string         `json:"name,omitempty"`
	Points          int            `json:"points,omitempty"`
	Public          int            `json:"public,omitempty"`
	Rank            string         `json:"rank,omitempty"`
	RankText        string         `json:"rank_text,omitempty"`
	Role            string         `json:"role,omitempty"`
	RootBloodsCount int            `json:"root_bloods_count,omitempty"`
	RootOwns        int            `json:"root_owns,omitempty"`
	University      TeamMemberTeam `json:"university,omitempty"`
	UserBloodsCount int            `json:"user_bloods_count,omitempty"`
	UserOwns        int            `json:"user_owns,omitempty"`
}

// UniversityNewListData defines model for UniversityNewListData.
type UniversityNewListData struct {
	Data     UniversityListItems `json:"data,omitempty"`
	LastPage int                 `json:"last_page,omitempty"`
}

// UniversityNewListResponse defines model for UniversityNewListResponse.
type UniversityNewListResponse struct {
	Data    UniversityNewListData `json:"data,omitempty"`
	Message string                `json:"message,omitempty"`
	Section string                `json:"section,omitempty"`
}

// UniversityTopListData defines model for UniversityTopListData.
type UniversityTopListData struct {
	Data     UniversityTopListItems `json:"data,omitempty"`
	LastPage int                    `json:"last_page,omitempty"`
}

// UniversityTopListItem defines model for UniversityTopListItem.
type UniversityTopListItem struct {
	Cca2                 string      `json:"cca2,omitempty"`
	Country              string      `json:"country,omitempty"`
	CreatedAt            string      `json:"created_at,omitempty"`
	HasAutoGeneratedLogo int         `json:"has_auto_generated_logo,omitempty"`
	Id                   int         `json:"id,omitempty"`
	Name                 string      `json:"name,omitempty"`
	Rank                 float32     `json:"rank,omitempty"`
	RespectedByCount     int         `json:"respected_by_count,omitempty"`
	UserAvatars          StringArray `json:"user_avatars,omitempty"`
	UsersCount           int         `json:"users_count,omitempty"`
}

// UniversityTopListItems defines model for UniversityTopListItems.
type UniversityTopListItems = []UniversityTopListItem

// UniversityTopListResponse defines model for UniversityTopListResponse.
type UniversityTopListResponse struct {
	Data    UniversityTopListData `json:"data,omitempty"`
	Message string                `json:"message,omitempty"`
	Section string                `json:"section,omitempty"`
}

// UpcomingSeason defines model for UpcomingSeason.
type UpcomingSeason struct {
	Date string `json:"date"`
	Id   string `json:"id"`
	Name string `json:"name"`
}

// UpdateResponse Update Response
type UpdateResponse struct {
	Info InfoArray `json:"info,omitempty"`
}

// User defines model for User.
type User struct {
	AvatarThumb      string        `json:"avatar_thumb,omitempty"`
	Id               int           `json:"id,omitempty"`
	Name             string        `json:"name,omitempty"`
	Points           int           `json:"points,omitempty"`
	RankName         string        `json:"rank_name,omitempty"`
	Ranking          User_Ranking  `json:"ranking,omitempty"`
	Rankings         []UserRanking `json:"rankings,omitempty"`
	RespectedByCount int           `json:"respected_by_count,omitempty"`
	RootOwnsCount    int           `json:"root_owns_count,omitempty"`
	UserOwnsCount    int           `json:"user_owns_count,omitempty"`
}

// UserRanking0 defines model for .
type UserRanking0 = int

// UserRanking1 defines model for User.Ranking.1.
type UserRanking1 string

// User_Ranking defines model for User.Ranking.
type User_Ranking struct {
	union json.RawMessage
}

// UserAchievementMachineTypeUser defines model for UserAchievementMachineTypeUser.
type UserAchievementMachineTypeUser struct {
	Avatar        string `json:"avatar,omitempty"`
	Id            int    `json:"id,omitempty"`
	Name          string `json:"name,omitempty"`
	Retired       bool   `json:"retired,omitempty"`
	StartingPoint bool   `json:"starting_point,omitempty"`
}

// UserAchievementTarTypeUserIdTarIdResponse Schema definition for User Achievement Target Type User Id Target
type UserAchievementTarTypeUserIdTarIdResponse struct {
	Machine UserAchievementMachineTypeUser `json:"machine,omitempty"`
	Own     UserAchievementTarTypeUserOwn  `json:"own,omitempty"`
	User    UserBasicInfo                  `json:"user"`
}

// UserAchievementTarTypeUserOwn defines model for UserAchievementTarTypeUserOwn.
type UserAchievementTarTypeUserOwn struct {
	Date        string    `json:"date,omitempty"`
	DateIso8601 time.Time `json:"date_iso8601,omitempty"`
	Points      int       `json:"points,omitempty"`
	Rank        int       `json:"rank,omitempty"`
}

// UserActivity defines model for UserActivity.
type UserActivity struct {
	Profile UserActivityProfile `json:"profile,omitempty"`
}

// UserActivityItem defines model for UserActivityItem.
type UserActivityItem struct {
	ChallengeCategory string    `json:"challenge_category"`
	Date              time.Time `json:"date"`
	DateDiff          string    `json:"date_diff"`
	FirstBlood        bool      `json:"first_blood"`
	FlagTitle         string    `json:"flag_title"`
	Id                int       `json:"id"`
	MachineAvatar     string    `json:"machine_avatar"`
	Name              string    `json:"name"`
	ObjectType        string    `json:"object_type"`
	Points            int       `json:"points"`
	Type              string    `json:"type"`
}

// UserActivityProfile defines model for UserActivityProfile.
type UserActivityProfile struct {
	Activity UserActivityProfileActivity `json:"activity,omitempty"`
}

// UserActivityProfileActivity defines model for UserActivityProfileActivity.
type UserActivityProfileActivity = []UserActivityItem

// UserAnonymizedIdResponse Schema definition for User Anonymized Id Response
type UserAnonymizedIdResponse struct {
	AccountId string `json:"account_id,omitempty"`
	Id        string `json:"id,omitempty"`
	UserHash  string `json:"user_hash,omitempty"`
}

// UserApptokenCreateResponse defines model for UserApptokenCreateResponse.
type UserApptokenCreateResponse struct {
	AccessToken string `json:"access_token,omitempty"`
	CreatedAt   string `json:"created_at,omitempty"`
	ExpiresAt   string `json:"expires_at,omitempty"`
	Name        string `json:"name,omitempty"`
}

// UserApptokenListItem defines model for UserApptokenListItem.
type UserApptokenListItem struct {
	CreatedAt string `json:"created_at,omitempty"`
	ExpiresAt string `json:"expires_at,omitempty"`
	LastSeen  string `json:"last_seen,omitempty"`
	Name      string `json:"name,omitempty"`
}

// UserApptokenListItems defines model for UserApptokenListItems.
type UserApptokenListItems = []UserApptokenListItem

// UserApptokenListResponse defines model for UserApptokenListResponse.
type UserApptokenListResponse struct {
	Tokens UserApptokenListItems `json:"tokens,omitempty"`
}

// UserAvailability Schema definition for User Availability
type UserAvailability struct {
	Available bool   `json:"available,omitempty"`
	Code      int    `json:"code,omitempty"`
	Message   string `json:"message"`
}

// UserBannedResponse Schema definition for User Banned Response
type UserBannedResponse struct {
	Banned bool `json:"banned,omitempty"`
}

// UserBasicInfo defines model for UserBasicInfo.
type UserBasicInfo struct {
	Avatar string `json:"avatar,omitempty"`
	Id     int    `json:"id,omitempty"`
	Name   string `json:"name,omitempty"`
}

// UserBasicInfoItems defines model for UserBasicInfoItems.
type UserBasicInfoItems = []UserBasicInfo

// UserBasicInfoItemsWithRespect defines model for UserBasicInfoItemsWithRespect.
type UserBasicInfoItemsWithRespect = []UserBasicInfoWithRespect

// UserBasicInfoWithRespect defines model for UserBasicInfoWithRespect.
type UserBasicInfoWithRespect struct {
	Avatar      string `json:"avatar"`
	Id          int    `json:"id,omitempty"`
	IsRespected bool   `json:"isRespected,omitempty"`
	Name        string `json:"name,omitempty"`
}

// UserConnectionStatusResponse Schema definition for User Connection Status Response
type UserConnectionStatusResponse struct {
	Connection UserConnectionStatusResponse_Connection `json:"connection,omitempty"`
	Status     bool                                    `json:"status,omitempty"`
}

// UserConnectionStatusResponseConnection0 defines model for .
type UserConnectionStatusResponseConnection0 struct {
	Down          float32 `json:"down,omitempty"`
	Ip4           string  `json:"ip4,omitempty"`
	Ip6           string  `json:"ip6,omitempty"`
	Name          string  `json:"name,omitempty"`
	ThroughPwnbox bool    `json:"through_pwnbox,omitempty"`
	Up            float32 `json:"up,omitempty"`
}

// UserConnectionStatusResponseConnection1 defines model for .
type UserConnectionStatusResponseConnection1 = string

// UserConnectionStatusResponse_Connection defines model for UserConnectionStatusResponse.Connection.
type UserConnectionStatusResponse_Connection struct {
	union json.RawMessage
}

// UserDashboardResponse Schema definition for User Dashboard Response
type UserDashboardResponse struct {
	// DashboardPlayers Schema definition for Dashboard Players
	DashboardPlayers DashboardPlayers `json:"dashboard_players,omitempty"`
}

// UserDashboardTabloidResponse defines model for UserDashboardTabloidResponse.
type UserDashboardTabloidResponse struct {
	DashboardTabloid DashboardTabloid `json:"dashboard_tabloid,omitempty"`
}

// UserEntry defines model for UserEntry.
type UserEntry struct {
	Id          int  `json:"id,omitempty"`
	TeamId      int  `json:"team_id,omitempty"`
	User        User `json:"user,omitempty"`
	UserId      int  `json:"user_id,omitempty"`
	UserRequest int  `json:"user_request,omitempty"`
}

// UserIdNameThumb Schema definition for Lab Master
type UserIdNameThumb struct {
	AvatarThumb string `json:"avatar_thumb,omitempty"`
	Id          int    `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
}

// UserInfo Schema definition for User Info
type UserInfo struct {
	Avatar                     string                `json:"avatar,omitempty"`
	BetaTester                 int                   `json:"beta_tester,omitempty"`
	CanAccessDedilab           bool                  `json:"canAccessDedilab,omitempty"`
	CanAccessVIP               bool                  `json:"canAccessVIP,omitempty"`
	CanDeleteAvatar            bool                  `json:"can_delete_avatar,omitempty"`
	DunningExists              bool                  `json:"dunning_exists,omitempty"`
	Email                      string                `json:"email,omitempty"`
	HasAppTokens               bool                  `json:"hasAppTokens,omitempty"`
	HasTeamInvitation          bool                  `json:"hasTeamInvitation,omitempty"`
	Id                         int                   `json:"id,omitempty"`
	Identifier                 string                `json:"identifier,omitempty"`
	IsBGModerator              bool                  `json:"isBGModerator,omitempty"`
	IsChatBanned               bool                  `json:"isChatBanned,omitempty"`
	IsDedicatedVip             bool                  `json:"isDedicatedVip,omitempty"`
	IsModerator                bool                  `json:"isModerator,omitempty"`
	IsServerVIP                bool                  `json:"isServerVIP,omitempty"`
	IsVip                      bool                  `json:"isVip,omitempty"`
	IsSsoConnected             bool                  `json:"is_sso_connected,omitempty"`
	Name                       string                `json:"name,omitempty"`
	OnboardingTutorialComplete int                   `json:"onboarding_tutorial_complete,omitempty"`
	OptIn                      int                   `json:"opt_in,omitempty"`
	RankId                     int                   `json:"rank_id,omitempty"`
	ServerId                   int                   `json:"server_id,omitempty"`
	SubscriptionType           string                `json:"subscriptionType,omitempty"`
	SubscriptionPlan           string                `json:"subscription_plan,omitempty"`
	Team                       ConnectionDataMachine `json:"team"`
	Timezone                   string                `json:"timezone,omitempty"`
	University                 string                `json:"university"`
	Verified                   bool                  `json:"verified,omitempty"`
}

// UserInfoResponse Schema definition for User Info Response
type UserInfoResponse struct {
	// Info Schema definition for User Info
	Info UserInfo `json:"info,omitempty"`
}

// UserOwnsUser defines model for UserOwnsUser.
type UserOwnsUser struct {
	Country     string `json:"country,omitempty"`
	CountryName string `json:"country_name,omitempty"`
	Id          int    `json:"id,omitempty"`
	Name        string `json:"name,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Avatar              string                    `json:"avatar,omitempty"`
	CountryCode         string                    `json:"country_code,omitempty"`
	CountryName         string                    `json:"country_name,omitempty"`
	CurrentRankProgress float32                   `json:"current_rank_progress,omitempty"`
	Github              string                    `json:"github"`
	Id                  int                       `json:"id,omitempty"`
	IsDedicatedVip      bool                      `json:"isDedicatedVip,omitempty"`
	IsFollowed          bool                      `json:"isFollowed,omitempty"`
	IsRespected         bool                      `json:"isRespected,omitempty"`
	IsVip               bool                      `json:"isVip,omitempty"`
	Linkedin            string                    `json:"linkedin"`
	Name                string                    `json:"name,omitempty"`
	NextRank            string                    `json:"next_rank"`
	NextRankPoints      float32                   `json:"next_rank_points"`
	Points              int                       `json:"points,omitempty"`
	Public              bool                      `json:"public,omitempty"`
	Rank                string                    `json:"rank,omitempty"`
	RankId              int                       `json:"rank_id,omitempty"`
	RankOwnership       float32                   `json:"rank_ownership,omitempty"`
	RankRequirement     int                       `json:"rank_requirement"`
	Ranking             int                       `json:"ranking,omitempty"`
	Respects            int                       `json:"respects,omitempty"`
	SsoId               bool                      `json:"sso_id,omitempty"`
	SystemBloods        int                       `json:"system_bloods,omitempty"`
	SystemOwns          int                       `json:"system_owns,omitempty"`
	Team                UserProfileTeam           `json:"team,omitempty"`
	Timezone            string                    `json:"timezone,omitempty"`
	Twitter             string                    `json:"twitter"`
	University          UserProfileUniversityTeam `json:"university"`
	UniversityName      string                    `json:"university_name"`
	UserBloods          int                       `json:"user_bloods,omitempty"`
	UserOwns            int                       `json:"user_owns,omitempty"`
}

// UserProfileBasicIdResponse Schema definition for User Profile Basic Id Response
type UserProfileBasicIdResponse struct {
	Profile UserProfile `json:"profile,omitempty"`
}

// UserProfileBloodsChallenges defines model for UserProfileBloodsChallenges.
type UserProfileBloodsChallenges struct {
	BloodDifference string `json:"blood_difference,omitempty"`
	CategoryName    string `json:"category_name,omitempty"`
	DifficultyText  string `json:"difficulty_text,omitempty"`
	Id              int    `json:"id,omitempty"`
	Name            string `json:"name,omitempty"`
}

// UserProfileBloodsMachines defines model for UserProfileBloodsMachines.
type UserProfileBloodsMachines struct {
	Avatar              string `json:"avatar,omitempty"`
	DifficultyText      string `json:"difficulty_text,omitempty"`
	Id                  int    `json:"id,omitempty"`
	Name                string `json:"name,omitempty"`
	Os                  string `json:"os,omitempty"`
	RootBlood           bool   `json:"root_blood,omitempty"`
	RootBloodDifference string `json:"root_blood_difference,omitempty"`
	UserBlood           bool   `json:"user_blood,omitempty"`
	UserBloodDifference string `json:"user_blood_difference,omitempty"`
}

// UserProfileBloodsProfile defines model for UserProfileBloodsProfile.
type UserProfileBloodsProfile struct {
	Bloods Bloods `json:"bloods,omitempty"`
}

// UserProfileBloodsResponse defines model for UserProfileBloodsResponse.
type UserProfileBloodsResponse struct {
	Profile UserProfileBloodsProfile `json:"profile,omitempty"`
}

// UserProfileProgressMChinesOsProfile defines model for UserProfileProgressMChinesOsProfile.
type UserProfileProgressMChinesOsProfile struct {
	OperatingSystems OperatyingSystemsItems `json:"operating_systems,omitempty"`
}

// UserProfileProgressMachinesOsResponse defines model for UserProfileProgressMachinesOsResponse.
type UserProfileProgressMachinesOsResponse struct {
	Profile UserProfileProgressMChinesOsProfile `json:"profile,omitempty"`
}

// UserProfileProgressSherlockProfile defines model for UserProfileProgressSherlockProfile.
type UserProfileProgressSherlockProfile struct {
	ChallengeCategories   UserProfileProgressSherlockProfileChallengeCategoriesItems   `json:"challenge_categories,omitempty"`
	ChallengeDifficulties UserProfileProgressSherlockProfileChallengeDifficultiesItems `json:"challenge_difficulties,omitempty"`
	ChallengeOwns         UserProfileProgressSherlockProfileChallengeOwns              `json:"challenge_owns,omitempty"`
	SolvedTasks           float32                                                      `json:"solved_tasks,omitempty"`
}

// UserProfileProgressSherlockProfileChallengeCategoriesItems defines model for UserProfileProgressSherlockProfileChallengeCategoriesItems.
type UserProfileProgressSherlockProfileChallengeCategoriesItems = []ChallengeCategories

// UserProfileProgressSherlockProfileChallengeDifficultiesItems defines model for UserProfileProgressSherlockProfileChallengeDifficultiesItems.
type UserProfileProgressSherlockProfileChallengeDifficultiesItems = []ChallengeDifficulties

// UserProfileProgressSherlockProfileChallengeOwns defines model for UserProfileProgressSherlockProfileChallengeOwns.
type UserProfileProgressSherlockProfileChallengeOwns struct {
	Percentage float32 `json:"percentage,omitempty"`
	Solved     float32 `json:"solved,omitempty"`
	Total      float32 `json:"total,omitempty"`
}

// UserProfileProgressSherlocksResponse defines model for UserProfileProgressSherlocksResponse.
type UserProfileProgressSherlocksResponse struct {
	Profile UserProfileProgressSherlockProfile `json:"profile,omitempty"`
}

// UserProfileTeam defines model for UserProfileTeam.
type UserProfileTeam struct {
	Avatar  string `json:"avatar,omitempty"`
	Id      int    `json:"id,omitempty"`
	Name    string `json:"name,omitempty"`
	Ranking int    `json:"ranking,omitempty"`
}

// UserProfileUniversityTeam defines model for UserProfileUniversityTeam.
type UserProfileUniversityTeam struct {
	Id           int    `json:"id,omitempty"`
	LogoThumbUrl string `json:"logo_thumb_url,omitempty"`
	Name         string `json:"name,omitempty"`
	Ranking      int    `json:"ranking,omitempty"`
}

// UserRanking defines model for UserRanking.
type UserRanking struct {
	Challenges int       `json:"challenges,omitempty"`
	CreatedAt  time.Time `json:"created_at,omitempty"`
	Endgame    int       `json:"endgame,omitempty"`
	Fc         int       `json:"fc,omitempty"`
	Fortress   int       `json:"fortress,omitempty"`
	Fr         int       `json:"fr,omitempty"`
	Fu         int       `json:"fu,omitempty"`
	Id         int       `json:"id,omitempty"`
	Ownership  string    `json:"ownership,omitempty"`
	Points     int       `json:"points,omitempty"`
	Pro        int       `json:"pro,omitempty"`
	Rank       int       `json:"rank,omitempty"`
	Respect    int       `json:"respect,omitempty"`
	Roots      int       `json:"roots,omitempty"`
	Sr         int       `json:"sr,omitempty"`
	Su         int       `json:"su,omitempty"`
	Tr         int       `json:"tr,omitempty"`
	Tu         int       `json:"tu,omitempty"`
	UpdatedAt  time.Time `json:"updated_at,omitempty"`
	UserId     int       `json:"user_id,omitempty"`
	Users      int       `json:"users,omitempty"`
}

// UserSettingsResponse Schema definition for User Settings Response
type UserSettingsResponse struct {
	Email           string `json:"email,omitempty"`
	HideMachineTags int    `json:"hide_machine_tags,omitempty"`
	NameChangeDelay bool   `json:"name_change_delay"`
	Public          int    `json:"public,omitempty"`
}

// UserTask defines model for UserTask.
type UserTask struct {
	Id     int `json:"id,omitempty"`
	TaskId int `json:"task_id,omitempty"`
	UserId int `json:"user_id,omitempty"`
}

// UserTrackItem defines model for UserTrackItem.
type UserTrackItem struct {
	Complete int `json:"complete,omitempty"`
	Id       int `json:"id,omitempty"`
}

// UserTracksResponse Schema definition for User Tracks Response
type UserTracksResponse = []UserTrackItem

// VMExtend Schema definition for VM Extend
type VMExtend struct {
	ExpirationDate time.Time `json:"expirationDate,omitempty"`

	// Message Return message success
	Message string `json:"message,omitempty"`
	Success bool   `json:"success,omitempty"`
}

// Video defines model for Video.
type Video struct {
	union json.RawMessage
}

// VideoObject defines model for VideoObject.
type VideoObject struct {
	CreatorId   int    `json:"creator_id,omitempty"`
	CreatorName string `json:"creator_name,omitempty"`
	YoutubeId   string `json:"youtube_id,omitempty"`
}

// Weekly defines model for Weekly.
type Weekly struct {
	ChallengeOwns int                `json:"challenge_owns,omitempty"`
	FirstBloods   int                `json:"first_bloods,omitempty"`
	Respects      int                `json:"respects,omitempty"`
	SystemOwns    int                `json:"system_owns,omitempty"`
	UserOwns      int                `json:"user_owns,omitempty"`
	WeekEndDate   openapi_types.Date `json:"week_end_date,omitempty"`
}

// WriteupData defines model for WriteupData.
type WriteupData struct {
	Official OfficialWriteup `json:"official,omitempty"`
}

// AfterDate defines model for AfterDate.
type AfterDate = openapi_types.Date

// Category defines model for Category.
type Category = []int

// ChallengeId defines model for ChallengeId.
type ChallengeId = int

// ChallengeSlug defines model for ChallengeSlug.
type ChallengeSlug = string

// CompanyId defines model for CompanyId.
type CompanyId = int

// Difficulty defines model for Difficulty.
type Difficulty = []string

// FortressId defines model for FortressId.
type FortressId = int

// Free defines model for Free.
type Free int

// JobId defines model for JobId.
type JobId = int

// Keyword defines model for Keyword.
type Keyword = string

// Leaderboard defines model for Leaderboard.
type Leaderboard string

// MachineId defines model for MachineId.
type MachineId = int

// MachineSlug defines model for MachineSlug.
type MachineSlug = string

// NPastDays defines model for NPastDays.
type NPastDays = int

// Os defines model for Os.
type Os = []string

// Page defines model for Page.
type Page = int

// PerPage defines model for PerPage.
type PerPage = int

// PeriodPath defines model for PeriodPath.
type PeriodPath string

// PeriodQuery defines model for PeriodQuery.
type PeriodQuery string

// Product defines model for Product.
type Product string

// ProductId defines model for ProductId.
type ProductId = int

// ProductName defines model for ProductName.
type ProductName string

// ProductPath defines model for ProductPath.
type ProductPath string

// ProlabId defines model for ProlabId.
type ProlabId = int

// Query defines model for Query.
type Query = string

// Rank defines model for Rank.
type Rank = []int

// RequestId defines model for RequestId.
type RequestId = int

// ReviewId defines model for ReviewId.
type ReviewId = int

// Search defines model for Search.
type Search = string

// SearchQuery defines model for SearchQuery.
type SearchQuery = string

// SearchTags defines model for SearchTags.
type SearchTags = []string

// SeasonId defines model for SeasonId.
type SeasonId = int

// SherlockId defines model for SherlockId.
type SherlockId = int

// SherlockSlug defines model for SherlockSlug.
type SherlockSlug = string

// SherlockSortBy defines model for SherlockSortBy.
type SherlockSortBy string

// ShowCompleted defines model for ShowCompleted.
type ShowCompleted string

// SortBy defines model for SortBy.
type SortBy string

// SortType defines model for SortType.
type SortType string

// StartingPointId defines model for StartingPointId.
type StartingPointId = int

// State defines model for State.
type State = []string

// Status defines model for Status.
type Status string

// Tags defines model for Tags.
type Tags = []int

// TaskId defines model for TaskId.
type TaskId = int

// TeamId defines model for TeamId.
type TeamId = int

// TierId defines model for TierId.
type TierId = int

// Todo defines model for Todo.
type Todo int

// UniversityId defines model for UniversityId.
type UniversityId = int

// UserId defines model for UserId.
type UserId = int

// VpnId defines model for VpnId.
type VpnId = int

// ArenaOwnErrorResponse Schema definition for Own Error Response
type ArenaOwnErrorResponse = ArenaOwnError

// ChallengeCategoriesListResponse Schema definition for Categories List Response
type ChallengeCategoriesListResponse = CategoriesListResponse

// ChallengeChangelogChallengeIdResponse Schema definition for Challenge Changelog Id Response
type ChallengeChangelogChallengeIdResponse = ChallengeChangelogIdResponse

// ChallengeInfoChallengeResponse Schema definition for Challenge Id Response
type ChallengeInfoChallengeResponse = ChallengeResponse

// ChallengeReviewsUserChallengeIdResponse Schema definition for Challenge Reviews User Id Response
type ChallengeReviewsUserChallengeIdResponse = ChallengeReviewsUserIdResponse

// ChallengeStopResponse Schema definition for Message
type ChallengeStopResponse = Messagesuccess

// ChangelogsResponse Schema definition for Change Logs Response
type ChangelogsResponse = ChangeLogsResponse

// ConnectionsServersResponse Schema definition for Connections Server Response
type ConnectionsServersResponse = ConnectionsServerResponse

// ConnectionsServersSwitchVpnIdResponse Schema definition for Connection Server Switch Response
type ConnectionsServersSwitchVpnIdResponse = ConnectionServerSwitchResponse

// FortressFortressIdResponse Schema definition for Fortress Id Response
type FortressFortressIdResponse = FortressIdResponse

// Generic400Error defines model for Generic400Error.
type Generic400Error = Generic400Message

// GenericError Schema definition for Message
type GenericError = Message

// GenericError5xx Schema definition for Message
type GenericError5xx = Message

// GenericSuccess2xx Schema definition for Message
type GenericSuccess2xx = Messagesuccess

// HomeBannersResponse Schema definition for Home Banner Response
type HomeBannersResponse = HomeBannerResponse

// HomeRecommendedResponse Schema definition for Home Recommended Repsonse
type HomeRecommendedResponse = HomeRecommendedRepsonse

// HomeUserTodoResponse Schema definition for Home User Todo Repsonse
type HomeUserTodoResponse = HomeUserTodoRepsonse

// MachineActiveResponse defines model for MachineActiveResponse.
type MachineActiveResponse = ActiveMachineResponse

// MachineActivityMachineIdResponse Schema definition for Machine Activity Id Response
type MachineActivityMachineIdResponse = MachineActivityIdResponse

// MachineChangelogMachineIdResponse Schema definition for Machine Changelog Id Response
type MachineChangelogMachineIdResponse = MachineChangelogIdResponse

// MachineGraphActivityMachineIdPeriodResponse Schema definition for Machine Graph Activity Id Response
type MachineGraphActivityMachineIdPeriodResponse = MachineGraphActivityIdResponse

// MachineGraphMatrixMachineIdResponse Schema definition for Machine Graph Matrix Id Response
type MachineGraphMatrixMachineIdResponse = MachineGraphMatrixIdResponse

// MachineGraphOwnsDifficultyMachineIdResponse Schema definition for Machine Graph Owns Difficulty Id Response
type MachineGraphOwnsDifficultyMachineIdResponse = MachineGraphOwnsDifficultyIdResponse

// MachineOwn400 Schema definition for Own Machine Error Response
type MachineOwn400 = OwnMachineErrorResponse

// MachineOwnsTopMachineIdResponse Schema definition for Machine Owns Top Id Response
type MachineOwnsTopMachineIdResponse = MachineOwnsTopIdResponse

// MachinePaginatedResponse Schema definition for Paginated Machine Data
type MachinePaginatedResponse = PaginatedMachineData

// MachineProfileMachineResponse Schema definition for Machine Profile Response
type MachineProfileMachineResponse = MachineProfileResponse

// MachineRecommendedResponse Schema definition for Recommended Machine Response
type MachineRecommendedResponse = RecommendedMachineResponse

// MachineReviewsUserMachineIdResponse Schema definition for Machine Reviews User Id Response
type MachineReviewsUserMachineIdResponse = MachineReviewsUserIdResponse

// MachineTagsMachineIdResponse Schema definition for Machine Tag Id Response
type MachineTagsMachineIdResponse = MachineTagIdResponse

// MachineWalkthroughsMachineIdResponse Schema definition for Machine Walkthrough Id Response
type MachineWalkthroughsMachineIdResponse = MachineWalkthroughIdResponse

// MultiOwn400 Schema definition for Own Machine Error Response
type MultiOwn400 = OwnMachineErrorResponse

// MultiOwnResponse Schema definition for Own Machine Error Response
type MultiOwnResponse = OwnMachineErrorResponse

// ProfileActivityUserIdResponse defines model for ProfileActivityUserIdResponse.
type ProfileActivityUserIdResponse = UserActivity

// ProfileBadgesUserIdResponse Schema definition for Profile Badges Id Repsonse
type ProfileBadgesUserIdResponse = ProfileBadgesIdRepsonse

// ProfileBloodsUserIdResponse defines model for ProfileBloodsUserIdResponse.
type ProfileBloodsUserIdResponse = UserProfileBloodsResponse

// ProfileChartMachinesAttackUserIdResponse Schema definition for Profile Chart Machine Attack Id Response
type ProfileChartMachinesAttackUserIdResponse = ProfileChartMachineAttackIdResponse

// ProfileContentUserIdResponse Schema definition for Profile Content Id Response
type ProfileContentUserIdResponse = ProfileContentIdResponse

// ProfileGraphPeriodUserIdResponse Schema definition for Profile Graph Period Id Response
type ProfileGraphPeriodUserIdResponse = ProfileGraphPeriodIdResponse

// ProfileProgressChallengesUserIdResponse Schema definition for Profile Progress Challenges Id Repsonse
type ProfileProgressChallengesUserIdResponse = ProfileProgressChallengesIdRepsonse

// ProfileProgressFortressUserIdResponse Schema definition for Profile Progress Fortress Id Repsonse
type ProfileProgressFortressUserIdResponse = ProfileProgressFortressIdRepsonse

// ProfileProgressProlabUserIdResponse Schema definition for Profile Progress Prolab Response
type ProfileProgressProlabUserIdResponse = ProfileProgressProLabResponse

// ProlabfaqResponse Schema definition for Prolab Id Faq Response
type ProlabfaqResponse = ProlabIdFaqResponse

// ProlabinfoResponse Schema definition for Prolab Id Info Response
type ProlabinfoResponse = ProlabIdInfoResponse

// ProlabmachinesResponse Schema definition for Prolab Id Machine Response
type ProlabmachinesResponse = ProlabIdMachineResponse

// ProlaboverviewResponse Schema definition for Prolab Id Overview Response
type ProlaboverviewResponse = ProlabIdOverviewResponse

// ProlabreviewsOverviewResponse Schema definition for Prolab Id Reviews Overview Response
type ProlabreviewsOverviewResponse = ProlabIdReviewsOverviewResponse

// ProlabreviewsResponse Schema definition for Prolab Id Reviews Response
type ProlabreviewsResponse = ProlabIdReviewsResponse

// PwnboxStatusResponse defines model for PwnboxStatusResponse.
type PwnboxStatusResponse struct {
	union json.RawMessage
}

// RankingsCountriesResponse defines model for RankingsCountriesResponse.
type RankingsCountriesResponse = RankingsCountries

// RankingsCountryBestResponse defines model for RankingsCountryBestResponse.
type RankingsCountryBestResponse = RankingsCountryBest

// RankingsCountryRankingBracketResponse defines model for RankingsCountryRankingBracketResponse.
type RankingsCountryRankingBracketResponse = RankingsCountrRankingBracketResponse

// RankingsTeamsResponse Schema definition for Rankings Team Response
type RankingsTeamsResponse = RankingsTeamResponse

// ReviewProductPaginatedResponse Schema definition for Reviews Response
type ReviewProductPaginatedResponse = ReviewPaginatedResponse

// ReviewProductResponse Schema definition for Reviews Response
type ReviewProductResponse = ReviewsResponse

// SeasonMachineActiveResponse Schema definition for Season Active
type SeasonMachineActiveResponse = SeasonActive

// SeasonMachinesCompletedSeasonIdResponse Schema definition for Season Completed Machine
type SeasonMachinesCompletedSeasonIdResponse = SeasonCompletedMachine

// SeasonMachinesResponse Schema definition for Season Machines
type SeasonMachinesResponse = SeasonMachines

// SeasonPlatersLeaderboardTopResponse defines model for SeasonPlatersLeaderboardTopResponse.
type SeasonPlatersLeaderboardTopResponse = SeasonPlayersLeaderboardTopResponse

// SeasonUserFollowersSeasonIdResponse Schema definition for Season User Followers
type SeasonUserFollowersSeasonIdResponse = SeasonUserFollowers

// SeasonUserRankSeasonIdResponse Schema definition for Season User Rank
type SeasonUserRankSeasonIdResponse = SeasonUserRank

// SherlocksCategoriesListResponse Schema definition for Categories List Response
type SherlocksCategoriesListResponse = CategoriesListResponse

// SherlocksDownloadLinkResponse Schema definition for Sherlock Download Link
type SherlocksDownloadLinkResponse = SherlockDownloadLink

// SherlocksNameResponse Schema definition for Sherlock Named Item
type SherlocksNameResponse = SherlockNamedItem

// SherlocksResponse Schema definition for Sherlock Item List
type SherlocksResponse = SherlockItemList

// SherlocksSherlockId404 defines model for SherlocksSherlockId404.
type SherlocksSherlockId404 interface{}

// SherlocksSherlockIdInfoResponse Schema definition for Sherlock Info
type SherlocksSherlockIdInfoResponse = SherlockInfo

// SherlocksSherlockIdPlayResponse Schema definition for Sherlock Play Response
type SherlocksSherlockIdPlayResponse = SherlockPlayResponse

// SherlocksSherlockIdProgressResponse Schema definition for Sherlock Progress
type SherlocksSherlockIdProgressResponse = SherlockProgress

// SherlocksSherlockIdTasksResponse Schema definition for Sherlock Tasks List
type SherlocksSherlockIdTasksResponse = SherlockTasksList

// SherlocksSherlockIdTasksTaskIdFlag201 Schema definition for Task Flag Response
type SherlocksSherlockIdTasksTaskIdFlag201 = TaskFlagResponse

// SherlocksSherlockIdTasksTaskIdFlag400 Schema definition for Bad Request Error
type SherlocksSherlockIdTasksTaskIdFlag400 = BadRequestError

// SherlocksSherlockIdWriteupResponse Schema definition for Sherlock Writeup
type SherlocksSherlockIdWriteupResponse = SherlockWriteup

// SidebarChangelogResponse Schema definition for Sidebar Change Log Response
type SidebarChangelogResponse = SidebarChangeLogResponse

// SpProfileStartingPointIdResponse Schema definition for Sp Profile Id Response
type SpProfileStartingPointIdResponse = SpProfileIdResponse

// TeamActivityTeamIdResponse Schema definition for Team Activity Id Response
type TeamActivityTeamIdResponse = TeamActivityIdResponse

// TeamChartChallengeTeamIdResponse Schema definition for Challenge Categories Details
type TeamChartChallengeTeamIdResponse = ChallengeCategoriesDetails

// TeamChartMachinesAttackTeamIdResponse Schema definition for Machine Attack Details
type TeamChartMachinesAttackTeamIdResponse = MachineAttackDetails

// TeamGraphTeamIdResponse Schema definition for Team Graph Id Response
type TeamGraphTeamIdResponse = TeamGraphIdResponse

// TeamInfoTeamIdResponse Schema definition for Team Info Id Response
type TeamInfoTeamIdResponse = TeamInfoIdResponse

// TeamInvitationsTeamIdResponse Schema definition for Team Invitations Id Response
type TeamInvitationsTeamIdResponse = TeamInvitationsIdResponse

// TeamMembersTeamIdResponse Schema definition for Team Members Id Response
type TeamMembersTeamIdResponse = TeamMembersIdResponse

// TeamStatsOwnsTeamIdResponse Schema definition for Own Stats
type TeamStatsOwnsTeamIdResponse = OwnStats

// TodoUpdateResponse Update Response
type TodoUpdateResponse = UpdateResponse

// UniversityMembersTeamIdResponse defines model for UniversityMembersTeamIdResponse.
type UniversityMembersTeamIdResponse = []UniversityMembersResponse

// UniversityProfileTeamIdResponse Schema definition for Team Information Profile Response
type UniversityProfileTeamIdResponse = TeamInformationProfileResponse

// UniversityStatsOwnsUserIdResponse Schema definition for Own Stats
type UniversityStatsOwnsUserIdResponse = OwnStats

// UserFollowersResponse Update Response
type UserFollowersResponse = UpdateResponse

// UserProfileBasicUserIdResponse Schema definition for User Profile Basic Id Response
type UserProfileBasicUserIdResponse = UserProfileBasicIdResponse

// UserProfileSummaryResponse Schema definition for Profile Id Repsonse
type UserProfileSummaryResponse = ProfileIdRepsonse

// VMExtendResponse Schema definition for VM Extend
type VMExtendResponse = VMExtend

// VMResponse Schema definition for Message
type VMResponse = Messagesuccess

// VmReset400 defines model for VmReset400.
type VmReset400 interface{}

// ArenaOwnRequest defines model for ArenaOwnRequest.
type ArenaOwnRequest struct {
	Flag string `json:"flag"`
	Id   int    `json:"id"`
}

// MultiOwnRequest defines model for MultiOwnRequest.
type MultiOwnRequest struct {
	Flag string `json:"flag"`
}

// PwnboxStartRequest Schema definition for Pwnbox Request
type PwnboxStartRequest = PwnboxRequest

// SherlocksTasksFlagRequest defines model for SherlocksTasksFlagRequest.
type SherlocksTasksFlagRequest struct {
	Flag string `json:"flag,omitempty"`
}

// VirtualMachineRequest Schema definition for Spawn Request
type VirtualMachineRequest = SpawnExtendRequest

// PostArenaOwnJSONBody defines parameters for PostArenaOwn.
type PostArenaOwnJSONBody struct {
	Flag string `json:"flag"`
	Id   int    `json:"id"`
}

// PostArenaOwnFormdataBody defines parameters for PostArenaOwn.
type PostArenaOwnFormdataBody struct {
	Flag string `form:"flag" json:"flag"`
	Id   int    `form:"id" json:"id"`
}

// GetCareerCompanyParams defines parameters for GetCareerCompany.
type GetCareerCompanyParams struct {
	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetCareerRequestsParams defines parameters for GetCareerRequests.
type GetCareerRequestsParams struct {
	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetCareerSearchParams defines parameters for GetCareerSearch.
type GetCareerSearchParams struct {
	// SearchQuery Search Param
	SearchQuery SearchQuery `form:"search_query,omitempty" json:"search_query,omitempty"`

	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`

	// AfterDate Get items after a date in the past
	AfterDate AfterDate `form:"after_date,omitempty" json:"after_date,omitempty"`

	// Rank Rank integer
	Rank Rank `form:"rank[],omitempty" json:"rank[],omitempty"`
}

// PostCareerTemporaryContactOptinJSONBody defines parameters for PostCareerTemporaryContactOptin.
type PostCareerTemporaryContactOptinJSONBody struct {
	OptIn bool `json:"opt_in,omitempty"`
}

// PostChallengeReviewFormdataBody defines parameters for PostChallengeReview.
type PostChallengeReviewFormdataBody struct {
	Headline string                               `form:"headline" json:"headline"`
	Id       int                                  `form:"id" json:"id"`
	Review   string                               `form:"review" json:"review"`
	Stars    PostChallengeReviewFormdataBodyStars `form:"stars,omitempty" json:"stars,omitempty"`
}

// PostChallengeReviewFormdataBodyStars defines parameters for PostChallengeReview.
type PostChallengeReviewFormdataBodyStars int

// PostChallengeStartFormdataBody defines parameters for PostChallengeStart.
type PostChallengeStartFormdataBody struct {
	ChallengeId int `form:"challenge_id" json:"challenge_id"`
}

// PostChallengeStopFormdataBody defines parameters for PostChallengeStop.
type PostChallengeStopFormdataBody struct {
	ChallengeId int `form:"challenge_id" json:"challenge_id"`
}

// GetChallengesParams defines parameters for GetChallenges.
type GetChallengesParams struct {
	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Limit results per page
	PerPage PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Status Omit for both
	Status GetChallengesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// State Filter by state. You can provide multiple values. For example, state=active&state=retired.
	State State `form:"state,omitempty" json:"state,omitempty"`

	// SortBy Field to sort by
	SortBy GetChallengesParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortType Sort type (asc or desc)
	SortType GetChallengesParamsSortType `form:"sort_type,omitempty" json:"sort_type,omitempty"`

	// Difficulty Filter by difficulty level
	Difficulty Difficulty `form:"difficulty[],omitempty" json:"difficulty[],omitempty"`

	// Category Filter by category. You can provide multiple values. For example,
	// category[]=15&category[]=20. See /v4/{productName}/categories/list for full list
	Category Category `form:"category[],omitempty" json:"category[],omitempty"`

	// Todo Filter ToDo
	Todo GetChallengesParamsTodo `form:"todo,omitempty" json:"todo,omitempty"`
}

// GetChallengesParamsStatus defines parameters for GetChallenges.
type GetChallengesParamsStatus string

// GetChallengesParamsState defines parameters for GetChallenges.
type GetChallengesParamsState string

// GetChallengesParamsSortBy defines parameters for GetChallenges.
type GetChallengesParamsSortBy string

// GetChallengesParamsSortType defines parameters for GetChallenges.
type GetChallengesParamsSortType string

// GetChallengesParamsDifficulty defines parameters for GetChallenges.
type GetChallengesParamsDifficulty string

// GetChallengesParamsTodo defines parameters for GetChallenges.
type GetChallengesParamsTodo int

// GetConnectionStatusProductnameParamsProductName defines parameters for GetConnectionStatusProductname.
type GetConnectionStatusProductnameParamsProductName string

// GetConnectionsServersParams defines parameters for GetConnectionsServers.
type GetConnectionsServersParams struct {
	// Product Select vpn server
	Product GetConnectionsServersParamsProduct `form:"product" json:"product"`
}

// GetConnectionsServersParamsProduct defines parameters for GetConnectionsServers.
type GetConnectionsServersParamsProduct string

// PostFortressFlagJSONBody defines parameters for PostFortressFlag.
type PostFortressFlagJSONBody struct {
	Flag string `json:"flag"`
}

// PostFortressFlagFormdataBody defines parameters for PostFortressFlag.
type PostFortressFlagFormdataBody struct {
	Flag string `form:"flag" json:"flag"`
}

// GetMachineGraphActivityParamsPeriod defines parameters for GetMachineGraphActivity.
type GetMachineGraphActivityParamsPeriod string

// GetMachineListRetiredPaginatedParams defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParams struct {
	// Free limits retired results to free machines, values must either be 1 for true or 0 for false or omit the parameter for no filter
	Free GetMachineListRetiredPaginatedParamsFree `form:"free,omitempty" json:"free,omitempty"`

	// PerPage Limit results per page
	PerPage PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`

	// ShowCompleted Omit for both
	ShowCompleted GetMachineListRetiredPaginatedParamsShowCompleted `form:"show_completed,omitempty" json:"show_completed,omitempty"`

	// SortBy Field to sort by
	SortBy GetMachineListRetiredPaginatedParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortType Sort type (asc or desc)
	SortType GetMachineListRetiredPaginatedParamsSortType `form:"sort_type,omitempty" json:"sort_type,omitempty"`

	// Difficulty Filter by difficulty level
	Difficulty Difficulty `form:"difficulty[],omitempty" json:"difficulty[],omitempty"`

	// Os Filter by os
	Os Os `form:"os,omitempty" json:"os,omitempty"`

	// Tags Filter by tag ID. Can be repeated.
	Tags Tags `form:"tags,omitempty" json:"tags,omitempty"`

	// Keyword Search String
	Keyword Keyword `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// GetMachineListRetiredPaginatedParamsFree defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParamsFree int

// GetMachineListRetiredPaginatedParamsShowCompleted defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParamsShowCompleted string

// GetMachineListRetiredPaginatedParamsSortBy defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParamsSortBy string

// GetMachineListRetiredPaginatedParamsSortType defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParamsSortType string

// GetMachineListRetiredPaginatedParamsDifficulty defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParamsDifficulty string

// GetMachineListRetiredPaginatedParamsOs defines parameters for GetMachineListRetiredPaginated.
type GetMachineListRetiredPaginatedParamsOs string

// GetMachinePaginatedParams defines parameters for GetMachinePaginated.
type GetMachinePaginatedParams struct {
	// PerPage Limit results per page
	PerPage PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`

	// ShowCompleted Omit for both
	ShowCompleted GetMachinePaginatedParamsShowCompleted `form:"show_completed,omitempty" json:"show_completed,omitempty"`

	// SortBy Field to sort by
	SortBy GetMachinePaginatedParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// SortType Sort type (asc or desc)
	SortType GetMachinePaginatedParamsSortType `form:"sort_type,omitempty" json:"sort_type,omitempty"`

	// Difficulty Filter by difficulty level
	Difficulty Difficulty `form:"difficulty[],omitempty" json:"difficulty[],omitempty"`

	// Os Filter by os
	Os Os `form:"os,omitempty" json:"os,omitempty"`

	// Keyword Search String
	Keyword Keyword `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// GetMachinePaginatedParamsShowCompleted defines parameters for GetMachinePaginated.
type GetMachinePaginatedParamsShowCompleted string

// GetMachinePaginatedParamsSortBy defines parameters for GetMachinePaginated.
type GetMachinePaginatedParamsSortBy string

// GetMachinePaginatedParamsSortType defines parameters for GetMachinePaginated.
type GetMachinePaginatedParamsSortType string

// GetMachinePaginatedParamsDifficulty defines parameters for GetMachinePaginated.
type GetMachinePaginatedParamsDifficulty string

// GetMachinePaginatedParamsOs defines parameters for GetMachinePaginated.
type GetMachinePaginatedParamsOs string

// GetMachineTodoPaginatedParams defines parameters for GetMachineTodoPaginated.
type GetMachineTodoPaginatedParams struct {
	// SortType Sort type (asc or desc)
	SortType GetMachineTodoPaginatedParamsSortType `form:"sort_type,omitempty" json:"sort_type,omitempty"`

	// Keyword Search String
	Keyword Keyword `form:"keyword,omitempty" json:"keyword,omitempty"`

	// Difficulty Filter by difficulty level
	Difficulty Difficulty `form:"difficulty[],omitempty" json:"difficulty[],omitempty"`

	// ShowCompleted Omit for both
	ShowCompleted GetMachineTodoPaginatedParamsShowCompleted `form:"show_completed,omitempty" json:"show_completed,omitempty"`

	// Os Filter by os
	Os Os `form:"os,omitempty" json:"os,omitempty"`
}

// GetMachineTodoPaginatedParamsSortType defines parameters for GetMachineTodoPaginated.
type GetMachineTodoPaginatedParamsSortType string

// GetMachineTodoPaginatedParamsDifficulty defines parameters for GetMachineTodoPaginated.
type GetMachineTodoPaginatedParamsDifficulty string

// GetMachineTodoPaginatedParamsShowCompleted defines parameters for GetMachineTodoPaginated.
type GetMachineTodoPaginatedParamsShowCompleted string

// GetMachineTodoPaginatedParamsOs defines parameters for GetMachineTodoPaginated.
type GetMachineTodoPaginatedParamsOs string

// GetMachineUnreleasedParams defines parameters for GetMachineUnreleased.
type GetMachineUnreleasedParams struct {
	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Limit results per page
	PerPage PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Difficulty Filter by difficulty level
	Difficulty Difficulty `form:"difficulty[],omitempty" json:"difficulty[],omitempty"`

	// Os Filter by os
	Os Os `form:"os,omitempty" json:"os,omitempty"`

	// Keyword Search String
	Keyword Keyword `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// GetMachineUnreleasedParamsDifficulty defines parameters for GetMachineUnreleased.
type GetMachineUnreleasedParamsDifficulty string

// GetMachineUnreleasedParamsOs defines parameters for GetMachineUnreleased.
type GetMachineUnreleasedParamsOs string

// PostProlabFlagJSONBody defines parameters for PostProlabFlag.
type PostProlabFlagJSONBody struct {
	Flag string `json:"flag"`
}

// PostProlabFlagFormdataBody defines parameters for PostProlabFlag.
type PostProlabFlagFormdataBody struct {
	Flag string `form:"flag" json:"flag"`
}

// GetProlabReviewsParams defines parameters for GetProlabReviews.
type GetProlabReviewsParams struct {
	// Page Page number
	Page int `form:"page,omitempty" json:"page,omitempty"`
}

// GetRankingsCountryBestParams defines parameters for GetRankingsCountryBest.
type GetRankingsCountryBestParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsCountryBestParamsPeriod `form:"period" json:"period"`
}

// GetRankingsCountryBestParamsPeriod defines parameters for GetRankingsCountryBest.
type GetRankingsCountryBestParamsPeriod string

// GetRankingsCountryOverviewParams defines parameters for GetRankingsCountryOverview.
type GetRankingsCountryOverviewParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsCountryOverviewParamsPeriod `form:"period" json:"period"`
}

// GetRankingsCountryOverviewParamsPeriod defines parameters for GetRankingsCountryOverview.
type GetRankingsCountryOverviewParamsPeriod string

// GetRankingsTeamBestParams defines parameters for GetRankingsTeamBest.
type GetRankingsTeamBestParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsTeamBestParamsPeriod `form:"period" json:"period"`
}

// GetRankingsTeamBestParamsPeriod defines parameters for GetRankingsTeamBest.
type GetRankingsTeamBestParamsPeriod string

// GetRankingsTeamBestIdParams defines parameters for GetRankingsTeamBestId.
type GetRankingsTeamBestIdParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsTeamBestIdParamsPeriod `form:"period" json:"period"`
}

// GetRankingsTeamBestIdParamsPeriod defines parameters for GetRankingsTeamBestId.
type GetRankingsTeamBestIdParamsPeriod string

// GetRankingsTeamOverviewParams defines parameters for GetRankingsTeamOverview.
type GetRankingsTeamOverviewParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsTeamOverviewParamsPeriod `form:"period" json:"period"`
}

// GetRankingsTeamOverviewParamsPeriod defines parameters for GetRankingsTeamOverview.
type GetRankingsTeamOverviewParamsPeriod string

// GetRankingsTeamOverviewIdParams defines parameters for GetRankingsTeamOverviewId.
type GetRankingsTeamOverviewIdParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsTeamOverviewIdParamsPeriod `form:"period" json:"period"`
}

// GetRankingsTeamOverviewIdParamsPeriod defines parameters for GetRankingsTeamOverviewId.
type GetRankingsTeamOverviewIdParamsPeriod string

// GetRankingsUserBestParams defines parameters for GetRankingsUserBest.
type GetRankingsUserBestParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsUserBestParamsPeriod `form:"period" json:"period"`
}

// GetRankingsUserBestParamsPeriod defines parameters for GetRankingsUserBest.
type GetRankingsUserBestParamsPeriod string

// GetRankingsUserOverviewParams defines parameters for GetRankingsUserOverview.
type GetRankingsUserOverviewParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetRankingsUserOverviewParamsPeriod `form:"period" json:"period"`
}

// GetRankingsUserOverviewParamsPeriod defines parameters for GetRankingsUserOverview.
type GetRankingsUserOverviewParamsPeriod string

// GetReviewParamsProduct defines parameters for GetReview.
type GetReviewParamsProduct string

// GetReviewPaginatedParamsProduct defines parameters for GetReviewPaginated.
type GetReviewPaginatedParamsProduct string

// GetSearchFetchParams defines parameters for GetSearchFetch.
type GetSearchFetchParams struct {
	// Query Search String
	Query Query `form:"query" json:"query"`

	// Tags Search Term
	Tags SearchTags `form:"tags,omitempty" json:"tags,omitempty"`
}

// GetSearchFetchParamsTags defines parameters for GetSearchFetch.
type GetSearchFetchParamsTags string

// GetSeasonLeaderboardParams defines parameters for GetSeasonLeaderboard.
type GetSeasonLeaderboardParams struct {
	Season string `form:"season,omitempty" json:"season,omitempty"`
}

// GetSeasonLeaderboardParamsLeaderboard defines parameters for GetSeasonLeaderboard.
type GetSeasonLeaderboardParamsLeaderboard string

// GetSeasonLeaderboardTopParams defines parameters for GetSeasonLeaderboardTop.
type GetSeasonLeaderboardTopParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetSeasonLeaderboardTopParamsPeriod `form:"period" json:"period"`
}

// GetSeasonLeaderboardTopParamsPeriod defines parameters for GetSeasonLeaderboardTop.
type GetSeasonLeaderboardTopParamsPeriod string

// GetSeasonLeaderboardTopParamsLeaderboard defines parameters for GetSeasonLeaderboardTop.
type GetSeasonLeaderboardTopParamsLeaderboard string

// GetSherlocksParams defines parameters for GetSherlocks.
type GetSherlocksParams struct {
	// SortType Sort type (asc or desc)
	SortType GetSherlocksParamsSortType `form:"sort_type,omitempty" json:"sort_type,omitempty"`

	// Difficulty Filter by difficulty level
	Difficulty Difficulty `form:"difficulty[],omitempty" json:"difficulty[],omitempty"`

	// State Filter by state. You can provide multiple values. For example, state=active&state=retired.
	State State `form:"state,omitempty" json:"state,omitempty"`

	// SortBy Attribute to sort by
	SortBy GetSherlocksParamsSortBy `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// Category Filter by category. You can provide multiple values. For example,
	// category[]=15&category[]=20. See /v4/{productName}/categories/list for full list
	Category Category `form:"category[],omitempty" json:"category[],omitempty"`

	// Keyword Search String
	Keyword Keyword `form:"keyword,omitempty" json:"keyword,omitempty"`

	// Status Omit for both
	Status GetSherlocksParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// PerPage Limit results per page
	PerPage PerPage `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`
}

// GetSherlocksParamsSortType defines parameters for GetSherlocks.
type GetSherlocksParamsSortType string

// GetSherlocksParamsDifficulty defines parameters for GetSherlocks.
type GetSherlocksParamsDifficulty string

// GetSherlocksParamsState defines parameters for GetSherlocks.
type GetSherlocksParamsState string

// GetSherlocksParamsSortBy defines parameters for GetSherlocks.
type GetSherlocksParamsSortBy string

// GetSherlocksParamsStatus defines parameters for GetSherlocks.
type GetSherlocksParamsStatus string

// PostSherlockTasksFlagJSONBody defines parameters for PostSherlockTasksFlag.
type PostSherlockTasksFlagJSONBody struct {
	Flag string `json:"flag,omitempty"`
}

// PostSherlockTasksFlagFormdataBody defines parameters for PostSherlockTasksFlag.
type PostSherlockTasksFlagFormdataBody struct {
	Flag string `form:"flag,omitempty" json:"flag,omitempty"`
}

// GetTeamActivityParams defines parameters for GetTeamActivity.
type GetTeamActivityParams struct {
	// NPastDays number of past days, max 90
	NPastDays NPastDays `form:"n_past_days,omitempty" json:"n_past_days,omitempty"`
}

// GetTeamGraphParams defines parameters for GetTeamGraph.
type GetTeamGraphParams struct {
	// Period One of ["1Y", "6M", "3M", "1M", "1W"]
	Period GetTeamGraphParamsPeriod `form:"period" json:"period"`
}

// GetTeamGraphParamsPeriod defines parameters for GetTeamGraph.
type GetTeamGraphParamsPeriod string

// GetUniversityAllListParams defines parameters for GetUniversityAllList.
type GetUniversityAllListParams struct {
	// Search Search
	Search Search `form:"search,omitempty" json:"search,omitempty"`

	// Page Page number
	Page Page `form:"page,omitempty" json:"page,omitempty"`
}

// PostUserApptokenCreateJSONBody defines parameters for PostUserApptokenCreate.
type PostUserApptokenCreateJSONBody struct {
	ExpireAfter float32 `json:"expire_after,omitempty"`
	Name        string  `json:"name,omitempty"`
}

// PostUserApptokenDeleteJSONBody defines parameters for PostUserApptokenDelete.
type PostUserApptokenDeleteJSONBody struct {
	Name string `json:"name,omitempty"`
}

// GetUserProfileGraphParamsPeriod defines parameters for GetUserProfileGraph.
type GetUserProfileGraphParamsPeriod string

// PostTodoUpdateParamsProduct defines parameters for PostTodoUpdate.
type PostTodoUpdateParamsProduct string

// PostArenaOwnJSONRequestBody defines body for PostArenaOwn for application/json ContentType.
type PostArenaOwnJSONRequestBody PostArenaOwnJSONBody

// PostArenaOwnFormdataRequestBody defines body for PostArenaOwn for application/x-www-form-urlencoded ContentType.
type PostArenaOwnFormdataRequestBody PostArenaOwnFormdataBody

// PostCareerTemporaryContactOptinJSONRequestBody defines body for PostCareerTemporaryContactOptin for application/json ContentType.
type PostCareerTemporaryContactOptinJSONRequestBody PostCareerTemporaryContactOptinJSONBody

// PostChallengeOwnJSONRequestBody defines body for PostChallengeOwn for application/json ContentType.
type PostChallengeOwnJSONRequestBody = ChallengeOwnRequest

// PostChallengeOwnFormdataRequestBody defines body for PostChallengeOwn for application/x-www-form-urlencoded ContentType.
type PostChallengeOwnFormdataRequestBody = ChallengeOwnRequest

// PostChallengeReviewFormdataRequestBody defines body for PostChallengeReview for application/x-www-form-urlencoded ContentType.
type PostChallengeReviewFormdataRequestBody PostChallengeReviewFormdataBody

// PostChallengeStartFormdataRequestBody defines body for PostChallengeStart for application/x-www-form-urlencoded ContentType.
type PostChallengeStartFormdataRequestBody PostChallengeStartFormdataBody

// PostChallengeStopFormdataRequestBody defines body for PostChallengeStop for application/x-www-form-urlencoded ContentType.
type PostChallengeStopFormdataRequestBody PostChallengeStopFormdataBody

// PostFortressFlagJSONRequestBody defines body for PostFortressFlag for application/json ContentType.
type PostFortressFlagJSONRequestBody PostFortressFlagJSONBody

// PostFortressFlagFormdataRequestBody defines body for PostFortressFlag for application/x-www-form-urlencoded ContentType.
type PostFortressFlagFormdataRequestBody PostFortressFlagFormdataBody

// PostMachineOwnJSONRequestBody defines body for PostMachineOwn for application/json ContentType.
type PostMachineOwnJSONRequestBody = OwnRequest

// PostMachineOwnFormdataRequestBody defines body for PostMachineOwn for application/x-www-form-urlencoded ContentType.
type PostMachineOwnFormdataRequestBody = OwnRequest

// PostMachineReviewJSONRequestBody defines body for PostMachineReview for application/json ContentType.
type PostMachineReviewJSONRequestBody = MachineReviewRequest

// PostMachineReviewFormdataRequestBody defines body for PostMachineReview for application/x-www-form-urlencoded ContentType.
type PostMachineReviewFormdataRequestBody = MachineReviewRequest

// PostProlabFlagJSONRequestBody defines body for PostProlabFlag for application/json ContentType.
type PostProlabFlagJSONRequestBody PostProlabFlagJSONBody

// PostProlabFlagFormdataRequestBody defines body for PostProlabFlag for application/x-www-form-urlencoded ContentType.
type PostProlabFlagFormdataRequestBody PostProlabFlagFormdataBody

// PostPwnboxStartJSONRequestBody defines body for PostPwnboxStart for application/json ContentType.
type PostPwnboxStartJSONRequestBody = PwnboxRequest

// PostPwnboxStartFormdataRequestBody defines body for PostPwnboxStart for application/x-www-form-urlencoded ContentType.
type PostPwnboxStartFormdataRequestBody = PwnboxRequest

// PostSherlockTasksFlagJSONRequestBody defines body for PostSherlockTasksFlag for application/json ContentType.
type PostSherlockTasksFlagJSONRequestBody PostSherlockTasksFlagJSONBody

// PostSherlockTasksFlagFormdataRequestBody defines body for PostSherlockTasksFlag for application/x-www-form-urlencoded ContentType.
type PostSherlockTasksFlagFormdataRequestBody PostSherlockTasksFlagFormdataBody

// PostUserApptokenCreateJSONRequestBody defines body for PostUserApptokenCreate for application/json ContentType.
type PostUserApptokenCreateJSONRequestBody PostUserApptokenCreateJSONBody

// PostUserApptokenDeleteJSONRequestBody defines body for PostUserApptokenDelete for application/json ContentType.
type PostUserApptokenDeleteJSONRequestBody PostUserApptokenDeleteJSONBody

// PostVMExtendJSONRequestBody defines body for PostVMExtend for application/json ContentType.
type PostVMExtendJSONRequestBody = SpawnExtendRequest

// PostVMExtendFormdataRequestBody defines body for PostVMExtend for application/x-www-form-urlencoded ContentType.
type PostVMExtendFormdataRequestBody = SpawnExtendRequest

// PostVMResetJSONRequestBody defines body for PostVMReset for application/json ContentType.
type PostVMResetJSONRequestBody = SpawnExtendRequest

// PostVMResetFormdataRequestBody defines body for PostVMReset for application/x-www-form-urlencoded ContentType.
type PostVMResetFormdataRequestBody = SpawnExtendRequest

// PostVMResetVoteJSONRequestBody defines body for PostVMResetVote for application/json ContentType.
type PostVMResetVoteJSONRequestBody = SpawnExtendRequest

// PostVMResetVoteFormdataRequestBody defines body for PostVMResetVote for application/x-www-form-urlencoded ContentType.
type PostVMResetVoteFormdataRequestBody = SpawnExtendRequest

// PostVMResetVoteAcceptJSONRequestBody defines body for PostVMResetVoteAccept for application/json ContentType.
type PostVMResetVoteAcceptJSONRequestBody = SpawnExtendRequest

// PostVMResetVoteAcceptFormdataRequestBody defines body for PostVMResetVoteAccept for application/x-www-form-urlencoded ContentType.
type PostVMResetVoteAcceptFormdataRequestBody = SpawnExtendRequest

// PostVMSpawnJSONRequestBody defines body for PostVMSpawn for application/json ContentType.
type PostVMSpawnJSONRequestBody = SpawnExtendRequest

// PostVMSpawnFormdataRequestBody defines body for PostVMSpawn for application/x-www-form-urlencoded ContentType.
type PostVMSpawnFormdataRequestBody = SpawnExtendRequest

// PostVMTerminateJSONRequestBody defines body for PostVMTerminate for application/json ContentType.
type PostVMTerminateJSONRequestBody = SpawnExtendRequest

// PostVMTerminateFormdataRequestBody defines body for PostVMTerminate for application/x-www-form-urlencoded ContentType.
type PostVMTerminateFormdataRequestBody = SpawnExtendRequest

// AsChallengePoints0 returns the union data inside the Challenge_Points as a ChallengePoints0
func (t Challenge_Points) AsChallengePoints0() (ChallengePoints0, error) {
	var body ChallengePoints0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChallengePoints0 overwrites any union data inside the Challenge_Points as the provided ChallengePoints0
func (t *Challenge_Points) FromChallengePoints0(v ChallengePoints0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChallengePoints0 performs a merge with any union data inside the Challenge_Points, using the provided ChallengePoints0
func (t *Challenge_Points) MergeChallengePoints0(v ChallengePoints0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChallengePoints1 returns the union data inside the Challenge_Points as a ChallengePoints1
func (t Challenge_Points) AsChallengePoints1() (ChallengePoints1, error) {
	var body ChallengePoints1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChallengePoints1 overwrites any union data inside the Challenge_Points as the provided ChallengePoints1
func (t *Challenge_Points) FromChallengePoints1(v ChallengePoints1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChallengePoints1 performs a merge with any union data inside the Challenge_Points, using the provided ChallengePoints1
func (t *Challenge_Points) MergeChallengePoints1(v ChallengePoints1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Challenge_Points) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Challenge_Points) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDifficultyChart0 returns the union data inside the DifficultyChart as a DifficultyChart0
func (t DifficultyChart) AsDifficultyChart0() (DifficultyChart0, error) {
	var body DifficultyChart0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDifficultyChart0 overwrites any union data inside the DifficultyChart as the provided DifficultyChart0
func (t *DifficultyChart) FromDifficultyChart0(v DifficultyChart0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDifficultyChart0 performs a merge with any union data inside the DifficultyChart, using the provided DifficultyChart0
func (t *DifficultyChart) MergeDifficultyChart0(v DifficultyChart0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDifficultyChart1 returns the union data inside the DifficultyChart as a DifficultyChart1
func (t DifficultyChart) AsDifficultyChart1() (DifficultyChart1, error) {
	var body DifficultyChart1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDifficultyChart1 overwrites any union data inside the DifficultyChart as the provided DifficultyChart1
func (t *DifficultyChart) FromDifficultyChart1(v DifficultyChart1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDifficultyChart1 performs a merge with any union data inside the DifficultyChart, using the provided DifficultyChart1
func (t *DifficultyChart) MergeDifficultyChart1(v DifficultyChart1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DifficultyChart) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DifficultyChart) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFlagsToNextRank0 returns the union data inside the FlagsToNextRank as a FlagsToNextRank0
func (t FlagsToNextRank) AsFlagsToNextRank0() (FlagsToNextRank0, error) {
	var body FlagsToNextRank0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagsToNextRank0 overwrites any union data inside the FlagsToNextRank as the provided FlagsToNextRank0
func (t *FlagsToNextRank) FromFlagsToNextRank0(v FlagsToNextRank0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagsToNextRank0 performs a merge with any union data inside the FlagsToNextRank, using the provided FlagsToNextRank0
func (t *FlagsToNextRank) MergeFlagsToNextRank0(v FlagsToNextRank0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlagsToNextRank1 returns the union data inside the FlagsToNextRank as a FlagsToNextRank1
func (t FlagsToNextRank) AsFlagsToNextRank1() (FlagsToNextRank1, error) {
	var body FlagsToNextRank1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagsToNextRank1 overwrites any union data inside the FlagsToNextRank as the provided FlagsToNextRank1
func (t *FlagsToNextRank) FromFlagsToNextRank1(v FlagsToNextRank1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagsToNextRank1 performs a merge with any union data inside the FlagsToNextRank, using the provided FlagsToNextRank1
func (t *FlagsToNextRank) MergeFlagsToNextRank1(v FlagsToNextRank1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FlagsToNextRank) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FlagsToNextRank) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMachineDataIsTodo0 returns the union data inside the MachineData_IsTodo as a MachineDataIsTodo0
func (t MachineData_IsTodo) AsMachineDataIsTodo0() (MachineDataIsTodo0, error) {
	var body MachineDataIsTodo0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMachineDataIsTodo0 overwrites any union data inside the MachineData_IsTodo as the provided MachineDataIsTodo0
func (t *MachineData_IsTodo) FromMachineDataIsTodo0(v MachineDataIsTodo0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMachineDataIsTodo0 performs a merge with any union data inside the MachineData_IsTodo, using the provided MachineDataIsTodo0
func (t *MachineData_IsTodo) MergeMachineDataIsTodo0(v MachineDataIsTodo0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMachineDataIsTodo1 returns the union data inside the MachineData_IsTodo as a MachineDataIsTodo1
func (t MachineData_IsTodo) AsMachineDataIsTodo1() (MachineDataIsTodo1, error) {
	var body MachineDataIsTodo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMachineDataIsTodo1 overwrites any union data inside the MachineData_IsTodo as the provided MachineDataIsTodo1
func (t *MachineData_IsTodo) FromMachineDataIsTodo1(v MachineDataIsTodo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMachineDataIsTodo1 performs a merge with any union data inside the MachineData_IsTodo, using the provided MachineDataIsTodo1
func (t *MachineData_IsTodo) MergeMachineDataIsTodo1(v MachineDataIsTodo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MachineData_IsTodo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MachineData_IsTodo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBaseTask returns the union data inside the MachineTasksData_Item as a BaseTask
func (t MachineTasksData_Item) AsBaseTask() (BaseTask, error) {
	var body BaseTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBaseTask overwrites any union data inside the MachineTasksData_Item as the provided BaseTask
func (t *MachineTasksData_Item) FromBaseTask(v BaseTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBaseTask performs a merge with any union data inside the MachineTasksData_Item, using the provided BaseTask
func (t *MachineTasksData_Item) MergeBaseTask(v BaseTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFlagRatingTask returns the union data inside the MachineTasksData_Item as a FlagRatingTask
func (t MachineTasksData_Item) AsFlagRatingTask() (FlagRatingTask, error) {
	var body FlagRatingTask
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFlagRatingTask overwrites any union data inside the MachineTasksData_Item as the provided FlagRatingTask
func (t *MachineTasksData_Item) FromFlagRatingTask(v FlagRatingTask) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFlagRatingTask performs a merge with any union data inside the MachineTasksData_Item, using the provided FlagRatingTask
func (t *MachineTasksData_Item) MergeFlagRatingTask(v FlagRatingTask) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MachineTasksData_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MachineTasksData_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProfileUserTeamInfo returns the union data inside the ProfileUserTeamWrapper as a ProfileUserTeamInfo
func (t ProfileUserTeamWrapper) AsProfileUserTeamInfo() (ProfileUserTeamInfo, error) {
	var body ProfileUserTeamInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProfileUserTeamInfo overwrites any union data inside the ProfileUserTeamWrapper as the provided ProfileUserTeamInfo
func (t *ProfileUserTeamWrapper) FromProfileUserTeamInfo(v ProfileUserTeamInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProfileUserTeamInfo performs a merge with any union data inside the ProfileUserTeamWrapper, using the provided ProfileUserTeamInfo
func (t *ProfileUserTeamWrapper) MergeProfileUserTeamInfo(v ProfileUserTeamInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProfileUserTeamWrapper) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProfileUserTeamWrapper) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTeamMemberRank0 returns the union data inside the TeamMember_Rank as a TeamMemberRank0
func (t TeamMember_Rank) AsTeamMemberRank0() (TeamMemberRank0, error) {
	var body TeamMemberRank0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamMemberRank0 overwrites any union data inside the TeamMember_Rank as the provided TeamMemberRank0
func (t *TeamMember_Rank) FromTeamMemberRank0(v TeamMemberRank0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamMemberRank0 performs a merge with any union data inside the TeamMember_Rank, using the provided TeamMemberRank0
func (t *TeamMember_Rank) MergeTeamMemberRank0(v TeamMemberRank0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTeamMemberRank1 returns the union data inside the TeamMember_Rank as a TeamMemberRank1
func (t TeamMember_Rank) AsTeamMemberRank1() (TeamMemberRank1, error) {
	var body TeamMemberRank1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTeamMemberRank1 overwrites any union data inside the TeamMember_Rank as the provided TeamMemberRank1
func (t *TeamMember_Rank) FromTeamMemberRank1(v TeamMemberRank1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTeamMemberRank1 performs a merge with any union data inside the TeamMember_Rank, using the provided TeamMemberRank1
func (t *TeamMember_Rank) MergeTeamMemberRank1(v TeamMemberRank1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TeamMember_Rank) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TeamMember_Rank) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTrackSuccessResponse returns the union data inside the TracksIdResponse as a TrackSuccessResponse
func (t TracksIdResponse) AsTrackSuccessResponse() (TrackSuccessResponse, error) {
	var body TrackSuccessResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackSuccessResponse overwrites any union data inside the TracksIdResponse as the provided TrackSuccessResponse
func (t *TracksIdResponse) FromTrackSuccessResponse(v TrackSuccessResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackSuccessResponse performs a merge with any union data inside the TracksIdResponse, using the provided TrackSuccessResponse
func (t *TracksIdResponse) MergeTrackSuccessResponse(v TrackSuccessResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTrackErrorResponse returns the union data inside the TracksIdResponse as a TrackErrorResponse
func (t TracksIdResponse) AsTrackErrorResponse() (TrackErrorResponse, error) {
	var body TrackErrorResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTrackErrorResponse overwrites any union data inside the TracksIdResponse as the provided TrackErrorResponse
func (t *TracksIdResponse) FromTrackErrorResponse(v TrackErrorResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTrackErrorResponse performs a merge with any union data inside the TracksIdResponse, using the provided TrackErrorResponse
func (t *TracksIdResponse) MergeTrackErrorResponse(v TrackErrorResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TracksIdResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TracksIdResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserRanking0 returns the union data inside the User_Ranking as a UserRanking0
func (t User_Ranking) AsUserRanking0() (UserRanking0, error) {
	var body UserRanking0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserRanking0 overwrites any union data inside the User_Ranking as the provided UserRanking0
func (t *User_Ranking) FromUserRanking0(v UserRanking0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserRanking0 performs a merge with any union data inside the User_Ranking, using the provided UserRanking0
func (t *User_Ranking) MergeUserRanking0(v UserRanking0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserRanking1 returns the union data inside the User_Ranking as a UserRanking1
func (t User_Ranking) AsUserRanking1() (UserRanking1, error) {
	var body UserRanking1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserRanking1 overwrites any union data inside the User_Ranking as the provided UserRanking1
func (t *User_Ranking) FromUserRanking1(v UserRanking1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserRanking1 performs a merge with any union data inside the User_Ranking, using the provided UserRanking1
func (t *User_Ranking) MergeUserRanking1(v UserRanking1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t User_Ranking) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *User_Ranking) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserConnectionStatusResponseConnection0 returns the union data inside the UserConnectionStatusResponse_Connection as a UserConnectionStatusResponseConnection0
func (t UserConnectionStatusResponse_Connection) AsUserConnectionStatusResponseConnection0() (UserConnectionStatusResponseConnection0, error) {
	var body UserConnectionStatusResponseConnection0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserConnectionStatusResponseConnection0 overwrites any union data inside the UserConnectionStatusResponse_Connection as the provided UserConnectionStatusResponseConnection0
func (t *UserConnectionStatusResponse_Connection) FromUserConnectionStatusResponseConnection0(v UserConnectionStatusResponseConnection0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserConnectionStatusResponseConnection0 performs a merge with any union data inside the UserConnectionStatusResponse_Connection, using the provided UserConnectionStatusResponseConnection0
func (t *UserConnectionStatusResponse_Connection) MergeUserConnectionStatusResponseConnection0(v UserConnectionStatusResponseConnection0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUserConnectionStatusResponseConnection1 returns the union data inside the UserConnectionStatusResponse_Connection as a UserConnectionStatusResponseConnection1
func (t UserConnectionStatusResponse_Connection) AsUserConnectionStatusResponseConnection1() (UserConnectionStatusResponseConnection1, error) {
	var body UserConnectionStatusResponseConnection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserConnectionStatusResponseConnection1 overwrites any union data inside the UserConnectionStatusResponse_Connection as the provided UserConnectionStatusResponseConnection1
func (t *UserConnectionStatusResponse_Connection) FromUserConnectionStatusResponseConnection1(v UserConnectionStatusResponseConnection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserConnectionStatusResponseConnection1 performs a merge with any union data inside the UserConnectionStatusResponse_Connection, using the provided UserConnectionStatusResponseConnection1
func (t *UserConnectionStatusResponse_Connection) MergeUserConnectionStatusResponseConnection1(v UserConnectionStatusResponseConnection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UserConnectionStatusResponse_Connection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UserConnectionStatusResponse_Connection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsVideoObject returns the union data inside the Video as a VideoObject
func (t Video) AsVideoObject() (VideoObject, error) {
	var body VideoObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVideoObject overwrites any union data inside the Video as the provided VideoObject
func (t *Video) FromVideoObject(v VideoObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVideoObject performs a merge with any union data inside the Video, using the provided VideoObject
func (t *Video) MergeVideoObject(v VideoObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEmptyArray returns the union data inside the Video as a EmptyArray
func (t Video) AsEmptyArray() (EmptyArray, error) {
	var body EmptyArray
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmptyArray overwrites any union data inside the Video as the provided EmptyArray
func (t *Video) FromEmptyArray(v EmptyArray) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmptyArray performs a merge with any union data inside the Video, using the provided EmptyArray
func (t *Video) MergeEmptyArray(v EmptyArray) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Video) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Video) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPwnboxStatusNotRunningResponse returns the union data inside the PwnboxStatusResponse as a PwnboxStatusNotRunningResponse
func (t PwnboxStatusResponse) AsPwnboxStatusNotRunningResponse() (PwnboxStatusNotRunningResponse, error) {
	var body PwnboxStatusNotRunningResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPwnboxStatusNotRunningResponse overwrites any union data inside the PwnboxStatusResponse as the provided PwnboxStatusNotRunningResponse
func (t *PwnboxStatusResponse) FromPwnboxStatusNotRunningResponse(v PwnboxStatusNotRunningResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePwnboxStatusNotRunningResponse performs a merge with any union data inside the PwnboxStatusResponse, using the provided PwnboxStatusNotRunningResponse
func (t *PwnboxStatusResponse) MergePwnboxStatusNotRunningResponse(v PwnboxStatusNotRunningResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPwnboxStatusRunningResponse returns the union data inside the PwnboxStatusResponse as a PwnboxStatusRunningResponse
func (t PwnboxStatusResponse) AsPwnboxStatusRunningResponse() (PwnboxStatusRunningResponse, error) {
	var body PwnboxStatusRunningResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPwnboxStatusRunningResponse overwrites any union data inside the PwnboxStatusResponse as the provided PwnboxStatusRunningResponse
func (t *PwnboxStatusResponse) FromPwnboxStatusRunningResponse(v PwnboxStatusRunningResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePwnboxStatusRunningResponse performs a merge with any union data inside the PwnboxStatusResponse, using the provided PwnboxStatusRunningResponse
func (t *PwnboxStatusResponse) MergePwnboxStatusRunningResponse(v PwnboxStatusRunningResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PwnboxStatusResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PwnboxStatusResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccessOvpnfileVpnIdUDP request
	GetAccessOvpnfileVpnIdUDP(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccessOvpnfileVpnIdTCP request
	GetAccessOvpnfileVpnIdTCP(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnouncements request
	GetAnnouncements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostArenaOwnWithBody request with any body
	PostArenaOwnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArenaOwn(ctx context.Context, body PostArenaOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostArenaOwnWithFormdataBody(ctx context.Context, body PostArenaOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBadges request
	GetBadges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerCompanies request
	GetCareerCompanies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerCompany request
	GetCareerCompany(ctx context.Context, companyId CompanyId, params *GetCareerCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerFeatured request
	GetCareerFeatured(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerHistory request
	GetCareerHistory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerInfo request
	GetCareerInfo(ctx context.Context, jobId JobId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerProfile request
	GetCareerProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerRequests request
	GetCareerRequests(ctx context.Context, params *GetCareerRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerSearch request
	GetCareerSearch(ctx context.Context, params *GetCareerSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCareerStats request
	GetCareerStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCareerTemporaryContactOptinWithBody request with any body
	PostCareerTemporaryContactOptinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCareerTemporaryContactOptin(ctx context.Context, body PostCareerTemporaryContactOptinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeActivity request
	GetChallengeActivity(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeCategoriesList request
	GetChallengeCategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeChangelog request
	GetChallengeChangelog(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeDownload request
	GetChallengeDownload(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeInfo request
	GetChallengeInfo(ctx context.Context, challengeSlug ChallengeSlug, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChallengeOwnWithBody request with any body
	PostChallengeOwnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChallengeOwn(ctx context.Context, body PostChallengeOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChallengeOwnWithFormdataBody(ctx context.Context, body PostChallengeOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeRecommended request
	GetChallengeRecommended(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeRecommendedRetired request
	GetChallengeRecommendedRetired(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChallengeReviewWithBody request with any body
	PostChallengeReviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChallengeReviewWithFormdataBody(ctx context.Context, body PostChallengeReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChallengeHelpfull request
	PostChallengeHelpfull(ctx context.Context, reviewId ReviewId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeReviewsUser request
	GetChallengeReviewsUser(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChallengeStartWithBody request with any body
	PostChallengeStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChallengeStartWithFormdataBody(ctx context.Context, body PostChallengeStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostChallengeStopWithBody request with any body
	PostChallengeStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostChallengeStopWithFormdataBody(ctx context.Context, body PostChallengeStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeSuggested request
	GetChallengeSuggested(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeWriteup request
	GetChallengeWriteup(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallengeWriteupOfficial request
	GetChallengeWriteupOfficial(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChallenges request
	GetChallenges(ctx context.Context, params *GetChallengesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetChangelogs request
	GetChangelogs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionStatus request
	GetConnectionStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionStatusProlab request
	GetConnectionStatusProlab(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionStatusProductname request
	GetConnectionStatusProductname(ctx context.Context, productName GetConnectionStatusProductnameParamsProductName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnections request
	GetConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionsServers request
	GetConnectionsServers(ctx context.Context, params *GetConnectionsServersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectionsServersProlab request
	GetConnectionsServersProlab(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConnectionsServersSwitch request
	PostConnectionsServersSwitch(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContentStats request
	GetContentStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFortress request
	GetFortress(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFortressFlagWithBody request with any body
	PostFortressFlagWithBody(ctx context.Context, fortressId FortressId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFortressFlag(ctx context.Context, fortressId FortressId, body PostFortressFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFortressFlagWithFormdataBody(ctx context.Context, fortressId FortressId, body PostFortressFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFortressFlags request
	GetFortressFlags(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFortressReset request
	PostFortressReset(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFortresses request
	GetFortresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeBanner request
	GetHomeBanner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeRecommended request
	GetHomeRecommended(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeUserProgress request
	GetHomeUserProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHomeUserTodo request
	GetHomeUserTodo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLabList request
	GetLabList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineActive request
	GetMachineActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineActivity request
	GetMachineActivity(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineChangelog request
	GetMachineChangelog(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineCreators request
	GetMachineCreators(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineGraphActivity request
	GetMachineGraphActivity(ctx context.Context, machineId MachineId, period GetMachineGraphActivityParamsPeriod, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineGraphMatrix request
	GetMachineGraphMatrix(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineGraphOwnsDifficulty request
	GetMachineGraphOwnsDifficulty(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineListRetiredPaginated request
	GetMachineListRetiredPaginated(ctx context.Context, params *GetMachineListRetiredPaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMachineOwnWithBody request with any body
	PostMachineOwnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMachineOwn(ctx context.Context, body PostMachineOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMachineOwnWithFormdataBody(ctx context.Context, body PostMachineOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineOwnsTop request
	GetMachineOwnsTop(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachinePaginated request
	GetMachinePaginated(ctx context.Context, params *GetMachinePaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineProfile request
	GetMachineProfile(ctx context.Context, machineSlug MachineSlug, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineRecommended request
	GetMachineRecommended(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineRecommendedRetired request
	GetMachineRecommendedRetired(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMachineReviewWithBody request with any body
	PostMachineReviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMachineReview(ctx context.Context, body PostMachineReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMachineReviewWithFormdataBody(ctx context.Context, body PostMachineReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineReviewsUser request
	GetMachineReviewsUser(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineReviews request
	GetMachineReviews(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineTagsList request
	GetMachineTagsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineTags request
	GetMachineTags(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineTodoPaginated request
	GetMachineTodoPaginated(ctx context.Context, params *GetMachineTodoPaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineUnreleased request
	GetMachineUnreleased(ctx context.Context, params *GetMachineUnreleasedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineWalkthroughRandom request
	GetMachineWalkthroughRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineWalkthroughsLanguageList request
	GetMachineWalkthroughsLanguageList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineWalkthroughOfficialFeedbackChoices request
	GetMachineWalkthroughOfficialFeedbackChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineWalkthroughs request
	GetMachineWalkthroughs(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineWriteup request
	GetMachineWriteup(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineAdventure request
	GetMachineAdventure(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMachineTasks request
	GetMachineTasks(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNavigationMain request
	GetNavigationMain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNotices request
	GetNotices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabChangelogs request
	GetProlabChangelogs(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabFaq request
	GetProlabFaq(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProlabFlagWithBody request with any body
	PostProlabFlagWithBody(ctx context.Context, prolabId ProlabId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProlabFlag(ctx context.Context, prolabId ProlabId, body PostProlabFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProlabFlagWithFormdataBody(ctx context.Context, prolabId ProlabId, body PostProlabFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabFlags request
	GetProlabFlags(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabInfo request
	GetProlabInfo(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabMachines request
	GetProlabMachines(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabOverview request
	GetProlabOverview(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabProgress request
	GetProlabProgress(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabRating request
	GetProlabRating(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabReviews request
	GetProlabReviews(ctx context.Context, prolabId ProlabId, params *GetProlabReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabReviewsOverview request
	GetProlabReviewsOverview(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabSubscription request
	GetProlabSubscription(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProlabs request
	GetProlabs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPwnboxStartWithBody request with any body
	PostPwnboxStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPwnboxStart(ctx context.Context, body PostPwnboxStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPwnboxStartWithFormdataBody(ctx context.Context, body PostPwnboxStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPwnboxStatus request
	GetPwnboxStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPwnboxTerminate request
	PostPwnboxTerminate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPwnboxUsage request
	GetPwnboxUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankings request
	GetRankings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsCountries request
	GetRankingsCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsCountryBest request
	GetRankingsCountryBest(ctx context.Context, params *GetRankingsCountryBestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsCountryOverview request
	GetRankingsCountryOverview(ctx context.Context, params *GetRankingsCountryOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsCountryRankingBracket request
	GetRankingsCountryRankingBracket(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsCountryUSMembers request
	GetRankingsCountryUSMembers(ctx context.Context, countryShortName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeamBest request
	GetRankingsTeamBest(ctx context.Context, params *GetRankingsTeamBestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeamBestId request
	GetRankingsTeamBestId(ctx context.Context, teamId TeamId, params *GetRankingsTeamBestIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeamOverview request
	GetRankingsTeamOverview(ctx context.Context, params *GetRankingsTeamOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeamOverviewId request
	GetRankingsTeamOverviewId(ctx context.Context, teamId TeamId, params *GetRankingsTeamOverviewIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeamRankingBracket request
	GetRankingsTeamRankingBracket(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeamRankingBracketId request
	GetRankingsTeamRankingBracketId(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsTeams request
	GetRankingsTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsUniversities request
	GetRankingsUniversities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsUniversityRankingBracketId request
	GetRankingsUniversityRankingBracketId(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsUserBest request
	GetRankingsUserBest(ctx context.Context, params *GetRankingsUserBestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsUserOverview request
	GetRankingsUserOverview(ctx context.Context, params *GetRankingsUserOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsUserRankingBracket request
	GetRankingsUserRankingBracket(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRankingsUsers request
	GetRankingsUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReview request
	GetReview(ctx context.Context, product GetReviewParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReviewPaginated request
	GetReviewPaginated(ctx context.Context, product GetReviewPaginatedParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchFetch request
	GetSearchFetch(ctx context.Context, params *GetSearchFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonEnd request
	GetSeasonEnd(ctx context.Context, seasonId SeasonId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonList request
	GetSeasonList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonMachineActive request
	GetSeasonMachineActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonMachines request
	GetSeasonMachines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonMachinesCompleted request
	GetSeasonMachinesCompleted(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonRewards request
	GetSeasonRewards(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonUserFollowers request
	GetSeasonUserFollowers(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonUserRank request
	GetSeasonUserRank(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonLeaderboard request
	GetSeasonLeaderboard(ctx context.Context, leaderboard GetSeasonLeaderboardParamsLeaderboard, params *GetSeasonLeaderboardParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSeasonLeaderboardTop request
	GetSeasonLeaderboardTop(ctx context.Context, leaderboard GetSeasonLeaderboardTopParamsLeaderboard, seasonId SeasonId, params *GetSeasonLeaderboardTopParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlocks request
	GetSherlocks(ctx context.Context, params *GetSherlocksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlocksCategoriesList request
	GetSherlocksCategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockDownloadlink request
	GetSherlockDownloadlink(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockInfo request
	GetSherlockInfo(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockPlay request
	GetSherlockPlay(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockProgress request
	GetSherlockProgress(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockTasks request
	GetSherlockTasks(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSherlockTasksFlagWithBody request with any body
	PostSherlockTasksFlagWithBody(ctx context.Context, sherlockId SherlockId, taskId TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSherlockTasksFlag(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSherlockTasksFlagWithFormdataBody(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockWriteup request
	GetSherlockWriteup(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlockWriteupOfficial request
	GetSherlockWriteupOfficial(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSherlock request
	GetSherlock(ctx context.Context, sherlockSlug SherlockSlug, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSidebarAnnouncement request
	GetSidebarAnnouncement(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSidebarChangelog request
	GetSidebarChangelog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSPProfile request
	GetSPProfile(ctx context.Context, startingPointId StartingPointId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSPTaskFlag request
	PostSPTaskFlag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSPTier request
	GetSPTier(ctx context.Context, tierId TierId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSPTiersProgress request
	GetSPTiersProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamActivity request
	GetTeamActivity(ctx context.Context, teamId TeamId, params *GetTeamActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamChartChallengeCategories request
	GetTeamChartChallengeCategories(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamChartMachinesAttack request
	GetTeamChartMachinesAttack(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamGraph request
	GetTeamGraph(ctx context.Context, teamId TeamId, params *GetTeamGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamInfo request
	GetTeamInfo(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamInvitations request
	GetTeamInvitations(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamKickUser request
	PostTeamKickUser(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamMembers request
	GetTeamMembers(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamStatsOwns request
	GetTeamStatsOwns(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTeamInviteAccept request
	PostTeamInviteAccept(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeamInviteReject request
	DeleteTeamInviteReject(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracks request
	GetTracks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTracksEnroll request
	PostTracksEnroll(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTracksLike request
	PostTracksLike(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTracksId request
	GetTracksId(ctx context.Context, trackId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityActivity request
	GetUniversityActivity(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityAllList request
	GetUniversityAllList(ctx context.Context, params *GetUniversityAllListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityChartChallengeCategories request
	GetUniversityChartChallengeCategories(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityChartMachinesAttack request
	GetUniversityChartMachinesAttack(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityCountryList request
	GetUniversityCountryList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityMembers request
	GetUniversityMembers(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityNewList request
	GetUniversityNewList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityProfile request
	GetUniversityProfile(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityStatsOwns request
	GetUniversityStatsOwns(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUniversityTopList request
	GetUniversityTopList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAchievement request
	GetUserAchievement(ctx context.Context, targetType string, userId UserId, targetId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserAnonymizedId request
	GetUserAnonymizedId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserApptokenCreateWithBody request with any body
	PostUserApptokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserApptokenCreate(ctx context.Context, body PostUserApptokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserApptokenDeleteWithBody request with any body
	PostUserApptokenDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserApptokenDelete(ctx context.Context, body PostUserApptokenDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserApptokenList request
	GetUserApptokenList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBanned request
	GetUserBanned(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserConnectionStatus request
	GetUserConnectionStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDashboard request
	GetUserDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDashboardTabloid request
	GetUserDashboardTabloid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserDisrespect request
	PostUserDisrespect(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserFollow request
	PostUserFollow(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserFollowers request
	GetUserFollowers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserInfo request
	GetUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileActivity request
	GetUserProfileActivity(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileBadges request
	GetUserProfileBadges(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileBasic request
	GetUserProfileBasic(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileBloods request
	GetUserProfileBloods(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileChartMachinesAttack request
	GetUserProfileChartMachinesAttack(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileContent request
	GetUserProfileContent(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileGraph request
	GetUserProfileGraph(ctx context.Context, period GetUserProfileGraphParamsPeriod, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileProgressChallenges request
	GetUserProfileProgressChallenges(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileProgressFortress request
	GetUserProfileProgressFortress(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileProgressMachinesOs request
	GetUserProfileProgressMachinesOs(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileProgressProlab request
	GetUserProfileProgressProlab(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileProgressSherlocks request
	GetUserProfileProgressSherlocks(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserProfileSummary request
	GetUserProfileSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserRespect request
	PostUserRespect(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSettings request
	GetUserSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserTracks request
	GetUserTracks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUnfollow request
	PostUserUnfollow(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVMExtendWithBody request with any body
	PostVMExtendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMExtend(ctx context.Context, body PostVMExtendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMExtendWithFormdataBody(ctx context.Context, body PostVMExtendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVMResetWithBody request with any body
	PostVMResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMReset(ctx context.Context, body PostVMResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMResetWithFormdataBody(ctx context.Context, body PostVMResetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVMResetVoteWithBody request with any body
	PostVMResetVoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMResetVote(ctx context.Context, body PostVMResetVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMResetVoteWithFormdataBody(ctx context.Context, body PostVMResetVoteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVMResetVoteAcceptWithBody request with any body
	PostVMResetVoteAcceptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMResetVoteAccept(ctx context.Context, body PostVMResetVoteAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMResetVoteAcceptWithFormdataBody(ctx context.Context, body PostVMResetVoteAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVMSpawnWithBody request with any body
	PostVMSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMSpawn(ctx context.Context, body PostVMSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMSpawnWithFormdataBody(ctx context.Context, body PostVMSpawnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostVMTerminateWithBody request with any body
	PostVMTerminateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMTerminate(ctx context.Context, body PostVMTerminateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostVMTerminateWithFormdataBody(ctx context.Context, body PostVMTerminateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTodoUpdate request
	PostTodoUpdate(ctx context.Context, product PostTodoUpdateParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccessOvpnfileVpnIdUDP(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessOvpnfileVpnIdUDPRequest(c.Server, vpnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccessOvpnfileVpnIdTCP(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccessOvpnfileVpnIdTCPRequest(c.Server, vpnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnouncements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnouncementsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArenaOwnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArenaOwnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArenaOwn(ctx context.Context, body PostArenaOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArenaOwnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostArenaOwnWithFormdataBody(ctx context.Context, body PostArenaOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostArenaOwnRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBadges(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBadgesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerCompanies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerCompaniesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerCompany(ctx context.Context, companyId CompanyId, params *GetCareerCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerCompanyRequest(c.Server, companyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerFeatured(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerFeaturedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerHistory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerHistoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerInfo(ctx context.Context, jobId JobId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerInfoRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerRequests(ctx context.Context, params *GetCareerRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerSearch(ctx context.Context, params *GetCareerSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCareerStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCareerStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCareerTemporaryContactOptinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCareerTemporaryContactOptinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCareerTemporaryContactOptin(ctx context.Context, body PostCareerTemporaryContactOptinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCareerTemporaryContactOptinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeActivity(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeActivityRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeCategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeCategoriesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeChangelog(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeChangelogRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeDownload(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeDownloadRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeInfo(ctx context.Context, challengeSlug ChallengeSlug, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeInfoRequest(c.Server, challengeSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeOwnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeOwnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeOwn(ctx context.Context, body PostChallengeOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeOwnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeOwnWithFormdataBody(ctx context.Context, body PostChallengeOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeOwnRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeRecommended(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeRecommendedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeRecommendedRetired(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeRecommendedRetiredRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeReviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeReviewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeReviewWithFormdataBody(ctx context.Context, body PostChallengeReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeReviewRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeHelpfull(ctx context.Context, reviewId ReviewId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeHelpfullRequest(c.Server, reviewId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeReviewsUser(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeReviewsUserRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeStartWithFormdataBody(ctx context.Context, body PostChallengeStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeStartRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeStopWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeStopRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostChallengeStopWithFormdataBody(ctx context.Context, body PostChallengeStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostChallengeStopRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeSuggested(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeSuggestedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeWriteup(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeWriteupRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallengeWriteupOfficial(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengeWriteupOfficialRequest(c.Server, challengeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChallenges(ctx context.Context, params *GetChallengesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChallengesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetChangelogs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetChangelogsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionStatusProlab(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionStatusProlabRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionStatusProductname(ctx context.Context, productName GetConnectionStatusProductnameParamsProductName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionStatusProductnameRequest(c.Server, productName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionsServers(ctx context.Context, params *GetConnectionsServersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionsServersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionsServersProlab(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionsServersProlabRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectionsServersSwitch(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConnectionsServersSwitchRequest(c.Server, vpnId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContentStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContentStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFortress(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFortressRequest(c.Server, fortressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFortressFlagWithBody(ctx context.Context, fortressId FortressId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFortressFlagRequestWithBody(c.Server, fortressId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFortressFlag(ctx context.Context, fortressId FortressId, body PostFortressFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFortressFlagRequest(c.Server, fortressId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFortressFlagWithFormdataBody(ctx context.Context, fortressId FortressId, body PostFortressFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFortressFlagRequestWithFormdataBody(c.Server, fortressId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFortressFlags(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFortressFlagsRequest(c.Server, fortressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFortressReset(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFortressResetRequest(c.Server, fortressId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFortresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFortressesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeBanner(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeBannerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeRecommended(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeRecommendedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeUserProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeUserProgressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHomeUserTodo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHomeUserTodoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLabList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLabListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineActivity(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineActivityRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineChangelog(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineChangelogRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineCreators(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineCreatorsRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineGraphActivity(ctx context.Context, machineId MachineId, period GetMachineGraphActivityParamsPeriod, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineGraphActivityRequest(c.Server, machineId, period)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineGraphMatrix(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineGraphMatrixRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineGraphOwnsDifficulty(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineGraphOwnsDifficultyRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineListRetiredPaginated(ctx context.Context, params *GetMachineListRetiredPaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineListRetiredPaginatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineOwnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineOwnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineOwn(ctx context.Context, body PostMachineOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineOwnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineOwnWithFormdataBody(ctx context.Context, body PostMachineOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineOwnRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineOwnsTop(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineOwnsTopRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachinePaginated(ctx context.Context, params *GetMachinePaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachinePaginatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineProfile(ctx context.Context, machineSlug MachineSlug, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineProfileRequest(c.Server, machineSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineRecommended(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineRecommendedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineRecommendedRetired(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineRecommendedRetiredRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineReviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineReviewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineReview(ctx context.Context, body PostMachineReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineReviewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMachineReviewWithFormdataBody(ctx context.Context, body PostMachineReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMachineReviewRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineReviewsUser(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineReviewsUserRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineReviews(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineReviewsRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineTagsList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineTagsListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineTags(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineTagsRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineTodoPaginated(ctx context.Context, params *GetMachineTodoPaginatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineTodoPaginatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineUnreleased(ctx context.Context, params *GetMachineUnreleasedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineUnreleasedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineWalkthroughRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineWalkthroughRandomRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineWalkthroughsLanguageList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineWalkthroughsLanguageListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineWalkthroughOfficialFeedbackChoices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineWalkthroughOfficialFeedbackChoicesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineWalkthroughs(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineWalkthroughsRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineWriteup(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineWriteupRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineAdventure(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineAdventureRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMachineTasks(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMachineTasksRequest(c.Server, machineId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNavigationMain(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNavigationMainRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNotices(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNoticesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabChangelogs(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabChangelogsRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabFaq(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabFaqRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProlabFlagWithBody(ctx context.Context, prolabId ProlabId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProlabFlagRequestWithBody(c.Server, prolabId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProlabFlag(ctx context.Context, prolabId ProlabId, body PostProlabFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProlabFlagRequest(c.Server, prolabId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProlabFlagWithFormdataBody(ctx context.Context, prolabId ProlabId, body PostProlabFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProlabFlagRequestWithFormdataBody(c.Server, prolabId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabFlags(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabFlagsRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabInfo(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabInfoRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabMachines(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabMachinesRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabOverview(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabOverviewRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabProgress(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabProgressRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabRating(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabRatingRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabReviews(ctx context.Context, prolabId ProlabId, params *GetProlabReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabReviewsRequest(c.Server, prolabId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabReviewsOverview(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabReviewsOverviewRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabSubscription(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabSubscriptionRequest(c.Server, prolabId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProlabs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProlabsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPwnboxStartWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPwnboxStartRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPwnboxStart(ctx context.Context, body PostPwnboxStartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPwnboxStartRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPwnboxStartWithFormdataBody(ctx context.Context, body PostPwnboxStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPwnboxStartRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPwnboxStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPwnboxStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPwnboxTerminate(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPwnboxTerminateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPwnboxUsage(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPwnboxUsageRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsCountriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsCountryBest(ctx context.Context, params *GetRankingsCountryBestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsCountryBestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsCountryOverview(ctx context.Context, params *GetRankingsCountryOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsCountryOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsCountryRankingBracket(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsCountryRankingBracketRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsCountryUSMembers(ctx context.Context, countryShortName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsCountryUSMembersRequest(c.Server, countryShortName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeamBest(ctx context.Context, params *GetRankingsTeamBestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamBestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeamBestId(ctx context.Context, teamId TeamId, params *GetRankingsTeamBestIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamBestIdRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeamOverview(ctx context.Context, params *GetRankingsTeamOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeamOverviewId(ctx context.Context, teamId TeamId, params *GetRankingsTeamOverviewIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamOverviewIdRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeamRankingBracket(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamRankingBracketRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeamRankingBracketId(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamRankingBracketIdRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsUniversities(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsUniversitiesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsUniversityRankingBracketId(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsUniversityRankingBracketIdRequest(c.Server, universityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsUserBest(ctx context.Context, params *GetRankingsUserBestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsUserBestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsUserOverview(ctx context.Context, params *GetRankingsUserOverviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsUserOverviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsUserRankingBracket(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsUserRankingBracketRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRankingsUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRankingsUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReview(ctx context.Context, product GetReviewParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReviewRequest(c.Server, product, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReviewPaginated(ctx context.Context, product GetReviewPaginatedParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReviewPaginatedRequest(c.Server, product, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchFetch(ctx context.Context, params *GetSearchFetchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchFetchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonEnd(ctx context.Context, seasonId SeasonId, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonEndRequest(c.Server, seasonId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonMachineActive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonMachineActiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonMachines(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonMachinesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonMachinesCompleted(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonMachinesCompletedRequest(c.Server, seasonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonRewards(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonRewardsRequest(c.Server, seasonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonUserFollowers(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonUserFollowersRequest(c.Server, seasonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonUserRank(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonUserRankRequest(c.Server, seasonId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonLeaderboard(ctx context.Context, leaderboard GetSeasonLeaderboardParamsLeaderboard, params *GetSeasonLeaderboardParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonLeaderboardRequest(c.Server, leaderboard, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSeasonLeaderboardTop(ctx context.Context, leaderboard GetSeasonLeaderboardTopParamsLeaderboard, seasonId SeasonId, params *GetSeasonLeaderboardTopParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSeasonLeaderboardTopRequest(c.Server, leaderboard, seasonId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlocks(ctx context.Context, params *GetSherlocksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlocksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlocksCategoriesList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlocksCategoriesListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockDownloadlink(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockDownloadlinkRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockInfo(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockInfoRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockPlay(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockPlayRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockProgress(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockProgressRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockTasks(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockTasksRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSherlockTasksFlagWithBody(ctx context.Context, sherlockId SherlockId, taskId TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSherlockTasksFlagRequestWithBody(c.Server, sherlockId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSherlockTasksFlag(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSherlockTasksFlagRequest(c.Server, sherlockId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSherlockTasksFlagWithFormdataBody(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSherlockTasksFlagRequestWithFormdataBody(c.Server, sherlockId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockWriteup(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockWriteupRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlockWriteupOfficial(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockWriteupOfficialRequest(c.Server, sherlockId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSherlock(ctx context.Context, sherlockSlug SherlockSlug, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSherlockRequest(c.Server, sherlockSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSidebarAnnouncement(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSidebarAnnouncementRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSidebarChangelog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSidebarChangelogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSPProfile(ctx context.Context, startingPointId StartingPointId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSPProfileRequest(c.Server, startingPointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSPTaskFlag(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSPTaskFlagRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSPTier(ctx context.Context, tierId TierId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSPTierRequest(c.Server, tierId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSPTiersProgress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSPTiersProgressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamActivity(ctx context.Context, teamId TeamId, params *GetTeamActivityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamActivityRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamChartChallengeCategories(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamChartChallengeCategoriesRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamChartMachinesAttack(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamChartMachinesAttackRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamGraph(ctx context.Context, teamId TeamId, params *GetTeamGraphParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamGraphRequest(c.Server, teamId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamInfo(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamInfoRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamInvitations(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamInvitationsRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamKickUser(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamKickUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamMembers(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamMembersRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamStatsOwns(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamStatsOwnsRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTeamInviteAccept(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTeamInviteAcceptRequest(c.Server, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeamInviteReject(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamInviteRejectRequest(c.Server, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTracksEnroll(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTracksEnrollRequest(c.Server, trackId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTracksLike(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTracksLikeRequest(c.Server, trackId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTracksId(ctx context.Context, trackId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTracksIdRequest(c.Server, trackId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityActivity(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityActivityRequest(c.Server, universityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityAllList(ctx context.Context, params *GetUniversityAllListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityAllListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityChartChallengeCategories(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityChartChallengeCategoriesRequest(c.Server, universityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityChartMachinesAttack(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityChartMachinesAttackRequest(c.Server, universityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityCountryList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityCountryListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityMembers(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityMembersRequest(c.Server, universityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityNewList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityNewListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityProfile(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityProfileRequest(c.Server, universityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityStatsOwns(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityStatsOwnsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUniversityTopList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUniversityTopListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAchievement(ctx context.Context, targetType string, userId UserId, targetId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAchievementRequest(c.Server, targetType, userId, targetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserAnonymizedId(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserAnonymizedIdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserApptokenCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserApptokenCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserApptokenCreate(ctx context.Context, body PostUserApptokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserApptokenCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserApptokenDeleteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserApptokenDeleteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserApptokenDelete(ctx context.Context, body PostUserApptokenDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserApptokenDeleteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserApptokenList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserApptokenListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBanned(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBannedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserConnectionStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserConnectionStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDashboard(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDashboardRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDashboardTabloid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDashboardTabloidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserDisrespect(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserDisrespectRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserFollow(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserFollowRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserFollowers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserFollowersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileActivity(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileActivityRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileBadges(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileBadgesRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileBasic(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileBasicRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileBloods(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileBloodsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileChartMachinesAttack(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileChartMachinesAttackRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileContent(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileContentRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileGraph(ctx context.Context, period GetUserProfileGraphParamsPeriod, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileGraphRequest(c.Server, period, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileProgressChallenges(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileProgressChallengesRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileProgressFortress(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileProgressFortressRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileProgressMachinesOs(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileProgressMachinesOsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileProgressProlab(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileProgressProlabRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileProgressSherlocks(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileProgressSherlocksRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserProfileSummary(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserProfileSummaryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserRespect(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserRespectRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTracks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserTracksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUnfollow(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUnfollowRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMExtendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMExtendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMExtend(ctx context.Context, body PostVMExtendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMExtendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMExtendWithFormdataBody(ctx context.Context, body PostVMExtendFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMExtendRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMReset(ctx context.Context, body PostVMResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetWithFormdataBody(ctx context.Context, body PostVMResetFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetVoteWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetVoteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetVote(ctx context.Context, body PostVMResetVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetVoteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetVoteWithFormdataBody(ctx context.Context, body PostVMResetVoteFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetVoteRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetVoteAcceptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetVoteAcceptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetVoteAccept(ctx context.Context, body PostVMResetVoteAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetVoteAcceptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMResetVoteAcceptWithFormdataBody(ctx context.Context, body PostVMResetVoteAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMResetVoteAcceptRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMSpawnWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMSpawnRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMSpawn(ctx context.Context, body PostVMSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMSpawnRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMSpawnWithFormdataBody(ctx context.Context, body PostVMSpawnFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMSpawnRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMTerminateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMTerminateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMTerminate(ctx context.Context, body PostVMTerminateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMTerminateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostVMTerminateWithFormdataBody(ctx context.Context, body PostVMTerminateFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostVMTerminateRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTodoUpdate(ctx context.Context, product PostTodoUpdateParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTodoUpdateRequest(c.Server, product, productId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccessOvpnfileVpnIdUDPRequest generates requests for GetAccessOvpnfileVpnIdUDP
func NewGetAccessOvpnfileVpnIdUDPRequest(server string, vpnId VpnId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpnId", runtime.ParamLocationPath, vpnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access/ovpnfile/%s/0", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccessOvpnfileVpnIdTCPRequest generates requests for GetAccessOvpnfileVpnIdTCP
func NewGetAccessOvpnfileVpnIdTCPRequest(server string, vpnId VpnId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpnId", runtime.ParamLocationPath, vpnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access/ovpnfile/%s/0/1", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnnouncementsRequest generates requests for GetAnnouncements
func NewGetAnnouncementsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/announcements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostArenaOwnRequest calls the generic PostArenaOwn builder with application/json body
func NewPostArenaOwnRequest(server string, body PostArenaOwnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostArenaOwnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostArenaOwnRequestWithFormdataBody calls the generic PostArenaOwn builder with application/x-www-form-urlencoded body
func NewPostArenaOwnRequestWithFormdataBody(server string, body PostArenaOwnFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostArenaOwnRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostArenaOwnRequestWithBody generates requests for PostArenaOwn with any type of body
func NewPostArenaOwnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/arena/own")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBadgesRequest generates requests for GetBadges
func NewGetBadgesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/badges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerCompaniesRequest generates requests for GetCareerCompanies
func NewGetCareerCompaniesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerCompanyRequest generates requests for GetCareerCompany
func NewGetCareerCompanyRequest(server string, companyId CompanyId, params *GetCareerCompanyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/company/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerFeaturedRequest generates requests for GetCareerFeatured
func NewGetCareerFeaturedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/featured")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerHistoryRequest generates requests for GetCareerHistory
func NewGetCareerHistoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerInfoRequest generates requests for GetCareerInfo
func NewGetCareerInfoRequest(server string, jobId JobId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "jobId", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerProfileRequest generates requests for GetCareerProfile
func NewGetCareerProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerRequestsRequest generates requests for GetCareerRequests
func NewGetCareerRequestsRequest(server string, params *GetCareerRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerSearchRequest generates requests for GetCareerSearch
func NewGetCareerSearchRequest(server string, params *GetCareerSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_query", runtime.ParamLocationQuery, params.SearchQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after_date", runtime.ParamLocationQuery, params.AfterDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rank[]", runtime.ParamLocationQuery, params.Rank); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCareerStatsRequest generates requests for GetCareerStats
func NewGetCareerStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCareerTemporaryContactOptinRequest calls the generic PostCareerTemporaryContactOptin builder with application/json body
func NewPostCareerTemporaryContactOptinRequest(server string, body PostCareerTemporaryContactOptinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCareerTemporaryContactOptinRequestWithBody(server, "application/json", bodyReader)
}

// NewPostCareerTemporaryContactOptinRequestWithBody generates requests for PostCareerTemporaryContactOptin with any type of body
func NewPostCareerTemporaryContactOptinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/career/temporary/contact/optin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChallengeActivityRequest generates requests for GetChallengeActivity
func NewGetChallengeActivityRequest(server string, challengeId ChallengeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeCategoriesListRequest generates requests for GetChallengeCategoriesList
func NewGetChallengeCategoriesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/categories/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeChangelogRequest generates requests for GetChallengeChangelog
func NewGetChallengeChangelogRequest(server string, challengeId ChallengeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/changelog/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeDownloadRequest generates requests for GetChallengeDownload
func NewGetChallengeDownloadRequest(server string, challengeId ChallengeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/download/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeInfoRequest generates requests for GetChallengeInfo
func NewGetChallengeInfoRequest(server string, challengeSlug ChallengeSlug) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeSlug", runtime.ParamLocationPath, challengeSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChallengeOwnRequest calls the generic PostChallengeOwn builder with application/json body
func NewPostChallengeOwnRequest(server string, body PostChallengeOwnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostChallengeOwnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostChallengeOwnRequestWithFormdataBody calls the generic PostChallengeOwn builder with application/x-www-form-urlencoded body
func NewPostChallengeOwnRequestWithFormdataBody(server string, body PostChallengeOwnFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostChallengeOwnRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostChallengeOwnRequestWithBody generates requests for PostChallengeOwn with any type of body
func NewPostChallengeOwnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/own")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChallengeRecommendedRequest generates requests for GetChallengeRecommended
func NewGetChallengeRecommendedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/recommended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeRecommendedRetiredRequest generates requests for GetChallengeRecommendedRetired
func NewGetChallengeRecommendedRetiredRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/recommended/retired")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChallengeReviewRequestWithFormdataBody calls the generic PostChallengeReview builder with application/x-www-form-urlencoded body
func NewPostChallengeReviewRequestWithFormdataBody(server string, body PostChallengeReviewFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostChallengeReviewRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostChallengeReviewRequestWithBody generates requests for PostChallengeReview with any type of body
func NewPostChallengeReviewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/review")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChallengeHelpfullRequest generates requests for PostChallengeHelpfull
func NewPostChallengeHelpfullRequest(server string, reviewId ReviewId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "reviewId", runtime.ParamLocationPath, reviewId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/review/helpful/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeReviewsUserRequest generates requests for GetChallengeReviewsUser
func NewGetChallengeReviewsUserRequest(server string, challengeId ChallengeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/reviews/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostChallengeStartRequestWithFormdataBody calls the generic PostChallengeStart builder with application/x-www-form-urlencoded body
func NewPostChallengeStartRequestWithFormdataBody(server string, body PostChallengeStartFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostChallengeStartRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostChallengeStartRequestWithBody generates requests for PostChallengeStart with any type of body
func NewPostChallengeStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostChallengeStopRequestWithFormdataBody calls the generic PostChallengeStop builder with application/x-www-form-urlencoded body
func NewPostChallengeStopRequestWithFormdataBody(server string, body PostChallengeStopFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostChallengeStopRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostChallengeStopRequestWithBody generates requests for PostChallengeStop with any type of body
func NewPostChallengeStopRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetChallengeSuggestedRequest generates requests for GetChallengeSuggested
func NewGetChallengeSuggestedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/suggested")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeWriteupRequest generates requests for GetChallengeWriteup
func NewGetChallengeWriteupRequest(server string, challengeId ChallengeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/%s/writeup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengeWriteupOfficialRequest generates requests for GetChallengeWriteupOfficial
func NewGetChallengeWriteupOfficialRequest(server string, challengeId ChallengeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "challengeId", runtime.ParamLocationPath, challengeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenge/%s/writeup/official", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChallengesRequest generates requests for GetChallenges
func NewGetChallengesRequest(server string, params *GetChallengesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/challenges")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_type", runtime.ParamLocationQuery, params.SortType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "difficulty[]", runtime.ParamLocationQuery, params.Difficulty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category[]", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "todo", runtime.ParamLocationQuery, params.Todo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChangelogsRequest generates requests for GetChangelogs
func NewGetChangelogsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/changelogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionStatusRequest generates requests for GetConnectionStatus
func NewGetConnectionStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connection/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionStatusProlabRequest generates requests for GetConnectionStatusProlab
func NewGetConnectionStatusProlabRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connection/status/prolab/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionStatusProductnameRequest generates requests for GetConnectionStatusProductname
func NewGetConnectionStatusProductnameRequest(server string, productName GetConnectionStatusProductnameParamsProductName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productName", runtime.ParamLocationPath, productName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connection/status/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionsRequest generates requests for GetConnections
func NewGetConnectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionsServersRequest generates requests for GetConnectionsServers
func NewGetConnectionsServersRequest(server string, params *GetConnectionsServersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connections/servers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "product", runtime.ParamLocationQuery, params.Product); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectionsServersProlabRequest generates requests for GetConnectionsServersProlab
func NewGetConnectionsServersProlabRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connections/servers/prolab/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConnectionsServersSwitchRequest generates requests for PostConnectionsServersSwitch
func NewPostConnectionsServersSwitchRequest(server string, vpnId VpnId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vpnId", runtime.ParamLocationPath, vpnId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/connections/servers/switch/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContentStatsRequest generates requests for GetContentStats
func NewGetContentStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/content/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFortressRequest generates requests for GetFortress
func NewGetFortressRequest(server string, fortressId FortressId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fortressId", runtime.ParamLocationPath, fortressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fortress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFortressFlagRequest calls the generic PostFortressFlag builder with application/json body
func NewPostFortressFlagRequest(server string, fortressId FortressId, body PostFortressFlagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFortressFlagRequestWithBody(server, fortressId, "application/json", bodyReader)
}

// NewPostFortressFlagRequestWithFormdataBody calls the generic PostFortressFlag builder with application/x-www-form-urlencoded body
func NewPostFortressFlagRequestWithFormdataBody(server string, fortressId FortressId, body PostFortressFlagFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostFortressFlagRequestWithBody(server, fortressId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostFortressFlagRequestWithBody generates requests for PostFortressFlag with any type of body
func NewPostFortressFlagRequestWithBody(server string, fortressId FortressId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fortressId", runtime.ParamLocationPath, fortressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fortress/%s/flag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFortressFlagsRequest generates requests for GetFortressFlags
func NewGetFortressFlagsRequest(server string, fortressId FortressId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fortressId", runtime.ParamLocationPath, fortressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fortress/%s/flags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFortressResetRequest generates requests for PostFortressReset
func NewPostFortressResetRequest(server string, fortressId FortressId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "fortressId", runtime.ParamLocationPath, fortressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fortress/%s/reset", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFortressesRequest generates requests for GetFortresses
func NewGetFortressesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fortresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHomeBannerRequest generates requests for GetHomeBanner
func NewGetHomeBannerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home/banners")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHomeRecommendedRequest generates requests for GetHomeRecommended
func NewGetHomeRecommendedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home/recommended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHomeUserProgressRequest generates requests for GetHomeUserProgress
func NewGetHomeUserProgressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home/user/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHomeUserTodoRequest generates requests for GetHomeUserTodo
func NewGetHomeUserTodoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/home/user/todo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLabListRequest generates requests for GetLabList
func NewGetLabListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/lab/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineActiveRequest generates requests for GetMachineActive
func NewGetMachineActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineActivityRequest generates requests for GetMachineActivity
func NewGetMachineActivityRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineChangelogRequest generates requests for GetMachineChangelog
func NewGetMachineChangelogRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/changelog/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineCreatorsRequest generates requests for GetMachineCreators
func NewGetMachineCreatorsRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/creators/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineGraphActivityRequest generates requests for GetMachineGraphActivity
func NewGetMachineGraphActivityRequest(server string, machineId MachineId, period GetMachineGraphActivityParamsPeriod) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/graph/activity/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineGraphMatrixRequest generates requests for GetMachineGraphMatrix
func NewGetMachineGraphMatrixRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/graph/matrix/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineGraphOwnsDifficultyRequest generates requests for GetMachineGraphOwnsDifficulty
func NewGetMachineGraphOwnsDifficultyRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/graph/owns/difficulty/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineListRetiredPaginatedRequest generates requests for GetMachineListRetiredPaginated
func NewGetMachineListRetiredPaginatedRequest(server string, params *GetMachineListRetiredPaginatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/list/retired/paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "free", runtime.ParamLocationQuery, params.Free); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_completed", runtime.ParamLocationQuery, params.ShowCompleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_type", runtime.ParamLocationQuery, params.SortType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "difficulty[]", runtime.ParamLocationQuery, params.Difficulty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, params.Keyword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMachineOwnRequest calls the generic PostMachineOwn builder with application/json body
func NewPostMachineOwnRequest(server string, body PostMachineOwnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMachineOwnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMachineOwnRequestWithFormdataBody calls the generic PostMachineOwn builder with application/x-www-form-urlencoded body
func NewPostMachineOwnRequestWithFormdataBody(server string, body PostMachineOwnFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostMachineOwnRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostMachineOwnRequestWithBody generates requests for PostMachineOwn with any type of body
func NewPostMachineOwnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/own")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMachineOwnsTopRequest generates requests for GetMachineOwnsTop
func NewGetMachineOwnsTopRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/owns/top/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachinePaginatedRequest generates requests for GetMachinePaginated
func NewGetMachinePaginatedRequest(server string, params *GetMachinePaginatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_completed", runtime.ParamLocationQuery, params.ShowCompleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_type", runtime.ParamLocationQuery, params.SortType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "difficulty[]", runtime.ParamLocationQuery, params.Difficulty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, params.Keyword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineProfileRequest generates requests for GetMachineProfile
func NewGetMachineProfileRequest(server string, machineSlug MachineSlug) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineSlug", runtime.ParamLocationPath, machineSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineRecommendedRequest generates requests for GetMachineRecommended
func NewGetMachineRecommendedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/recommended")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineRecommendedRetiredRequest generates requests for GetMachineRecommendedRetired
func NewGetMachineRecommendedRetiredRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/recommended/retired")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMachineReviewRequest calls the generic PostMachineReview builder with application/json body
func NewPostMachineReviewRequest(server string, body PostMachineReviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMachineReviewRequestWithBody(server, "application/json", bodyReader)
}

// NewPostMachineReviewRequestWithFormdataBody calls the generic PostMachineReview builder with application/x-www-form-urlencoded body
func NewPostMachineReviewRequestWithFormdataBody(server string, body PostMachineReviewFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostMachineReviewRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostMachineReviewRequestWithBody generates requests for PostMachineReview with any type of body
func NewPostMachineReviewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/review")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMachineReviewsUserRequest generates requests for GetMachineReviewsUser
func NewGetMachineReviewsUserRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/reviews/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineReviewsRequest generates requests for GetMachineReviews
func NewGetMachineReviewsRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/reviews/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineTagsListRequest generates requests for GetMachineTagsList
func NewGetMachineTagsListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/tags/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineTagsRequest generates requests for GetMachineTags
func NewGetMachineTagsRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineTodoPaginatedRequest generates requests for GetMachineTodoPaginated
func NewGetMachineTodoPaginatedRequest(server string, params *GetMachineTodoPaginatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/todo/paginated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_type", runtime.ParamLocationQuery, params.SortType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, params.Keyword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "difficulty[]", runtime.ParamLocationQuery, params.Difficulty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_completed", runtime.ParamLocationQuery, params.ShowCompleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineUnreleasedRequest generates requests for GetMachineUnreleased
func NewGetMachineUnreleasedRequest(server string, params *GetMachineUnreleasedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/unreleased")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "difficulty[]", runtime.ParamLocationQuery, params.Difficulty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "os", runtime.ParamLocationQuery, params.Os); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, params.Keyword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineWalkthroughRandomRequest generates requests for GetMachineWalkthroughRandom
func NewGetMachineWalkthroughRandomRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/walkthrough/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineWalkthroughsLanguageListRequest generates requests for GetMachineWalkthroughsLanguageList
func NewGetMachineWalkthroughsLanguageListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/walkthroughs/language/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineWalkthroughOfficialFeedbackChoicesRequest generates requests for GetMachineWalkthroughOfficialFeedbackChoices
func NewGetMachineWalkthroughOfficialFeedbackChoicesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/walkthroughs/official/feedback-choices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineWalkthroughsRequest generates requests for GetMachineWalkthroughs
func NewGetMachineWalkthroughsRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/walkthroughs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineWriteupRequest generates requests for GetMachineWriteup
func NewGetMachineWriteupRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machine/writeup/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineAdventureRequest generates requests for GetMachineAdventure
func NewGetMachineAdventureRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machines/%s/adventure", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMachineTasksRequest generates requests for GetMachineTasks
func NewGetMachineTasksRequest(server string, machineId MachineId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "machineId", runtime.ParamLocationPath, machineId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/machines/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNavigationMainRequest generates requests for GetNavigationMain
func NewGetNavigationMainRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/navigation/main")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNoticesRequest generates requests for GetNotices
func NewGetNoticesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notices")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabChangelogsRequest generates requests for GetProlabChangelogs
func NewGetProlabChangelogsRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/changelogs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabFaqRequest generates requests for GetProlabFaq
func NewGetProlabFaqRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/faq", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProlabFlagRequest calls the generic PostProlabFlag builder with application/json body
func NewPostProlabFlagRequest(server string, prolabId ProlabId, body PostProlabFlagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProlabFlagRequestWithBody(server, prolabId, "application/json", bodyReader)
}

// NewPostProlabFlagRequestWithFormdataBody calls the generic PostProlabFlag builder with application/x-www-form-urlencoded body
func NewPostProlabFlagRequestWithFormdataBody(server string, prolabId ProlabId, body PostProlabFlagFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostProlabFlagRequestWithBody(server, prolabId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostProlabFlagRequestWithBody generates requests for PostProlabFlag with any type of body
func NewPostProlabFlagRequestWithBody(server string, prolabId ProlabId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/flag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProlabFlagsRequest generates requests for GetProlabFlags
func NewGetProlabFlagsRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/flags", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabInfoRequest generates requests for GetProlabInfo
func NewGetProlabInfoRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabMachinesRequest generates requests for GetProlabMachines
func NewGetProlabMachinesRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/machines", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabOverviewRequest generates requests for GetProlabOverview
func NewGetProlabOverviewRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/overview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabProgressRequest generates requests for GetProlabProgress
func NewGetProlabProgressRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/progress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabRatingRequest generates requests for GetProlabRating
func NewGetProlabRatingRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/rating", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabReviewsRequest generates requests for GetProlabReviews
func NewGetProlabReviewsRequest(server string, prolabId ProlabId, params *GetProlabReviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabReviewsOverviewRequest generates requests for GetProlabReviewsOverview
func NewGetProlabReviewsOverviewRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/reviews_overview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabSubscriptionRequest generates requests for GetProlabSubscription
func NewGetProlabSubscriptionRequest(server string, prolabId ProlabId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "prolabId", runtime.ParamLocationPath, prolabId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolab/%s/subscription", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProlabsRequest generates requests for GetProlabs
func NewGetProlabsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prolabs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPwnboxStartRequest calls the generic PostPwnboxStart builder with application/json body
func NewPostPwnboxStartRequest(server string, body PostPwnboxStartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPwnboxStartRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPwnboxStartRequestWithFormdataBody calls the generic PostPwnboxStart builder with application/x-www-form-urlencoded body
func NewPostPwnboxStartRequestWithFormdataBody(server string, body PostPwnboxStartFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostPwnboxStartRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostPwnboxStartRequestWithBody generates requests for PostPwnboxStart with any type of body
func NewPostPwnboxStartRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pwnbox/start")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPwnboxStatusRequest generates requests for GetPwnboxStatus
func NewGetPwnboxStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pwnbox/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPwnboxTerminateRequest generates requests for PostPwnboxTerminate
func NewPostPwnboxTerminateRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pwnbox/terminate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPwnboxUsageRequest generates requests for GetPwnboxUsage
func NewGetPwnboxUsageRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pwnbox/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsRequest generates requests for GetRankings
func NewGetRankingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsCountriesRequest generates requests for GetRankingsCountries
func NewGetRankingsCountriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsCountryBestRequest generates requests for GetRankingsCountryBest
func NewGetRankingsCountryBestRequest(server string, params *GetRankingsCountryBestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/country/best")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsCountryOverviewRequest generates requests for GetRankingsCountryOverview
func NewGetRankingsCountryOverviewRequest(server string, params *GetRankingsCountryOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/country/overview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsCountryRankingBracketRequest generates requests for GetRankingsCountryRankingBracket
func NewGetRankingsCountryRankingBracketRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/country/ranking_bracket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsCountryUSMembersRequest generates requests for GetRankingsCountryUSMembers
func NewGetRankingsCountryUSMembersRequest(server string, countryShortName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "countryShortName", runtime.ParamLocationPath, countryShortName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/country/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamBestRequest generates requests for GetRankingsTeamBest
func NewGetRankingsTeamBestRequest(server string, params *GetRankingsTeamBestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/team/best")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamBestIdRequest generates requests for GetRankingsTeamBestId
func NewGetRankingsTeamBestIdRequest(server string, teamId TeamId, params *GetRankingsTeamBestIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/team/best/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamOverviewRequest generates requests for GetRankingsTeamOverview
func NewGetRankingsTeamOverviewRequest(server string, params *GetRankingsTeamOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/team/overview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamOverviewIdRequest generates requests for GetRankingsTeamOverviewId
func NewGetRankingsTeamOverviewIdRequest(server string, teamId TeamId, params *GetRankingsTeamOverviewIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/team/overview/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamRankingBracketRequest generates requests for GetRankingsTeamRankingBracket
func NewGetRankingsTeamRankingBracketRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/team/ranking_bracket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamRankingBracketIdRequest generates requests for GetRankingsTeamRankingBracketId
func NewGetRankingsTeamRankingBracketIdRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/team/ranking_bracket/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsTeamsRequest generates requests for GetRankingsTeams
func NewGetRankingsTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsUniversitiesRequest generates requests for GetRankingsUniversities
func NewGetRankingsUniversitiesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/universities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsUniversityRankingBracketIdRequest generates requests for GetRankingsUniversityRankingBracketId
func NewGetRankingsUniversityRankingBracketIdRequest(server string, universityId UniversityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "universityId", runtime.ParamLocationPath, universityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/university/ranking_bracket/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsUserBestRequest generates requests for GetRankingsUserBest
func NewGetRankingsUserBestRequest(server string, params *GetRankingsUserBestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/user/best")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsUserOverviewRequest generates requests for GetRankingsUserOverview
func NewGetRankingsUserOverviewRequest(server string, params *GetRankingsUserOverviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/user/overview")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsUserRankingBracketRequest generates requests for GetRankingsUserRankingBracket
func NewGetRankingsUserRankingBracketRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/user/ranking_bracket")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRankingsUsersRequest generates requests for GetRankingsUsers
func NewGetRankingsUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rankings/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReviewRequest generates requests for GetReview
func NewGetReviewRequest(server string, product GetReviewParamsProduct, productId ProductId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "product", runtime.ParamLocationPath, product)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/review/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReviewPaginatedRequest generates requests for GetReviewPaginated
func NewGetReviewPaginatedRequest(server string, product GetReviewPaginatedParamsProduct, productId ProductId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "product", runtime.ParamLocationPath, product)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/review/%s/%s/paginated", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchFetchRequest generates requests for GetSearchFetch
func NewGetSearchFetchRequest(server string, params *GetSearchFetchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search/fetch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, params.Tags); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonEndRequest generates requests for GetSeasonEnd
func NewGetSeasonEndRequest(server string, seasonId SeasonId, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/end/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonListRequest generates requests for GetSeasonList
func NewGetSeasonListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonMachineActiveRequest generates requests for GetSeasonMachineActive
func NewGetSeasonMachineActiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/machine/active")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonMachinesRequest generates requests for GetSeasonMachines
func NewGetSeasonMachinesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/machines")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonMachinesCompletedRequest generates requests for GetSeasonMachinesCompleted
func NewGetSeasonMachinesCompletedRequest(server string, seasonId SeasonId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/machines/completed/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonRewardsRequest generates requests for GetSeasonRewards
func NewGetSeasonRewardsRequest(server string, seasonId SeasonId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/rewards/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonUserFollowersRequest generates requests for GetSeasonUserFollowers
func NewGetSeasonUserFollowersRequest(server string, seasonId SeasonId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/user/followers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonUserRankRequest generates requests for GetSeasonUserRank
func NewGetSeasonUserRankRequest(server string, seasonId SeasonId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/user/rank/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonLeaderboardRequest generates requests for GetSeasonLeaderboard
func NewGetSeasonLeaderboardRequest(server string, leaderboard GetSeasonLeaderboardParamsLeaderboard, params *GetSeasonLeaderboardParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "leaderboard", runtime.ParamLocationPath, leaderboard)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/%s/leaderboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "season", runtime.ParamLocationQuery, params.Season); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSeasonLeaderboardTopRequest generates requests for GetSeasonLeaderboardTop
func NewGetSeasonLeaderboardTopRequest(server string, leaderboard GetSeasonLeaderboardTopParamsLeaderboard, seasonId SeasonId, params *GetSeasonLeaderboardTopParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "leaderboard", runtime.ParamLocationPath, leaderboard)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "seasonId", runtime.ParamLocationPath, seasonId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/season/%s/leaderboard/top/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlocksRequest generates requests for GetSherlocks
func NewGetSherlocksRequest(server string, params *GetSherlocksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_type", runtime.ParamLocationQuery, params.SortType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "difficulty[]", runtime.ParamLocationQuery, params.Difficulty); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_by", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "category[]", runtime.ParamLocationQuery, params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, params.Keyword); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "per_page", runtime.ParamLocationQuery, params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlocksCategoriesListRequest generates requests for GetSherlocksCategoriesList
func NewGetSherlocksCategoriesListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/categories/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockDownloadlinkRequest generates requests for GetSherlockDownloadlink
func NewGetSherlockDownloadlinkRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/download_link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockInfoRequest generates requests for GetSherlockInfo
func NewGetSherlockInfoRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/info", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockPlayRequest generates requests for GetSherlockPlay
func NewGetSherlockPlayRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/play", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockProgressRequest generates requests for GetSherlockProgress
func NewGetSherlockProgressRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/progress", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockTasksRequest generates requests for GetSherlockTasks
func NewGetSherlockTasksRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSherlockTasksFlagRequest calls the generic PostSherlockTasksFlag builder with application/json body
func NewPostSherlockTasksFlagRequest(server string, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSherlockTasksFlagRequestWithBody(server, sherlockId, taskId, "application/json", bodyReader)
}

// NewPostSherlockTasksFlagRequestWithFormdataBody calls the generic PostSherlockTasksFlag builder with application/x-www-form-urlencoded body
func NewPostSherlockTasksFlagRequestWithFormdataBody(server string, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSherlockTasksFlagRequestWithBody(server, sherlockId, taskId, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSherlockTasksFlagRequestWithBody generates requests for PostSherlockTasksFlag with any type of body
func NewPostSherlockTasksFlagRequestWithBody(server string, sherlockId SherlockId, taskId TaskId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "taskId", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/tasks/%s/flag", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSherlockWriteupRequest generates requests for GetSherlockWriteup
func NewGetSherlockWriteupRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/writeup", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockWriteupOfficialRequest generates requests for GetSherlockWriteupOfficial
func NewGetSherlockWriteupOfficialRequest(server string, sherlockId SherlockId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockId", runtime.ParamLocationPath, sherlockId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s/writeup/official", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSherlockRequest generates requests for GetSherlock
func NewGetSherlockRequest(server string, sherlockSlug SherlockSlug) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "sherlockSlug", runtime.ParamLocationPath, sherlockSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sherlocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSidebarAnnouncementRequest generates requests for GetSidebarAnnouncement
func NewGetSidebarAnnouncementRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sidebar/announcement")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSidebarChangelogRequest generates requests for GetSidebarChangelog
func NewGetSidebarChangelogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sidebar/changelog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSPProfileRequest generates requests for GetSPProfile
func NewGetSPProfileRequest(server string, startingPointId StartingPointId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "startingPointId", runtime.ParamLocationPath, startingPointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSPTaskFlagRequest generates requests for PostSPTaskFlag
func NewPostSPTaskFlagRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/task/flag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSPTierRequest generates requests for GetSPTier
func NewGetSPTierRequest(server string, tierId TierId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tierId", runtime.ParamLocationPath, tierId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/tier/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSPTiersProgressRequest generates requests for GetSPTiersProgress
func NewGetSPTiersProgressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sp/tiers/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamActivityRequest generates requests for GetTeamActivity
func NewGetTeamActivityRequest(server string, teamId TeamId, params *GetTeamActivityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "n_past_days", runtime.ParamLocationQuery, params.NPastDays); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamChartChallengeCategoriesRequest generates requests for GetTeamChartChallengeCategories
func NewGetTeamChartChallengeCategoriesRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/chart/challenge/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamChartMachinesAttackRequest generates requests for GetTeamChartMachinesAttack
func NewGetTeamChartMachinesAttackRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/chart/machines/attack/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamGraphRequest generates requests for GetTeamGraph
func NewGetTeamGraphRequest(server string, teamId TeamId, params *GetTeamGraphParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/graph/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "period", runtime.ParamLocationQuery, params.Period); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamInfoRequest generates requests for GetTeamInfo
func NewGetTeamInfoRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/info/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamInvitationsRequest generates requests for GetTeamInvitations
func NewGetTeamInvitationsRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamKickUserRequest generates requests for PostTeamKickUser
func NewPostTeamKickUserRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/kick/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamMembersRequest generates requests for GetTeamMembers
func NewGetTeamMembersRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/members/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamStatsOwnsRequest generates requests for GetTeamStatsOwns
func NewGetTeamStatsOwnsRequest(server string, teamId TeamId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/stats/owns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTeamInviteAcceptRequest generates requests for PostTeamInviteAccept
func NewPostTeamInviteAcceptRequest(server string, requestId RequestId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/invite/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTeamInviteRejectRequest generates requests for DeleteTeamInviteReject
func NewDeleteTeamInviteRejectRequest(server string, requestId RequestId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team/%s/invite/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksRequest generates requests for GetTracks
func NewGetTracksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTracksEnrollRequest generates requests for PostTracksEnroll
func NewPostTracksEnrollRequest(server string, trackId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trackId", runtime.ParamLocationPath, trackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/enroll/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTracksLikeRequest generates requests for PostTracksLike
func NewPostTracksLikeRequest(server string, trackId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trackId", runtime.ParamLocationPath, trackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/like/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTracksIdRequest generates requests for GetTracksId
func NewGetTracksIdRequest(server string, trackId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "trackId", runtime.ParamLocationPath, trackId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tracks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityActivityRequest generates requests for GetUniversityActivity
func NewGetUniversityActivityRequest(server string, universityId UniversityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "universityId", runtime.ParamLocationPath, universityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityAllListRequest generates requests for GetUniversityAllList
func NewGetUniversityAllListRequest(server string, params *GetUniversityAllListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/all/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, params.Search); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityChartChallengeCategoriesRequest generates requests for GetUniversityChartChallengeCategories
func NewGetUniversityChartChallengeCategoriesRequest(server string, universityId UniversityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "universityId", runtime.ParamLocationPath, universityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/chart/challenge/categories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityChartMachinesAttackRequest generates requests for GetUniversityChartMachinesAttack
func NewGetUniversityChartMachinesAttackRequest(server string, universityId UniversityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "universityId", runtime.ParamLocationPath, universityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/chart/machines/attack/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityCountryListRequest generates requests for GetUniversityCountryList
func NewGetUniversityCountryListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/country/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityMembersRequest generates requests for GetUniversityMembers
func NewGetUniversityMembersRequest(server string, universityId UniversityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "universityId", runtime.ParamLocationPath, universityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/members/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityNewListRequest generates requests for GetUniversityNewList
func NewGetUniversityNewListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/new/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityProfileRequest generates requests for GetUniversityProfile
func NewGetUniversityProfileRequest(server string, universityId UniversityId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "universityId", runtime.ParamLocationPath, universityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/profile/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityStatsOwnsRequest generates requests for GetUniversityStatsOwns
func NewGetUniversityStatsOwnsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/stats/owns/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUniversityTopListRequest generates requests for GetUniversityTopList
func NewGetUniversityTopListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/university/top/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAchievementRequest generates requests for GetUserAchievement
func NewGetUserAchievementRequest(server string, targetType string, userId UserId, targetId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "targetType", runtime.ParamLocationPath, targetType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "targetId", runtime.ParamLocationPath, targetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/achievement/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserAnonymizedIdRequest generates requests for GetUserAnonymizedId
func NewGetUserAnonymizedIdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/anonymized/id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserApptokenCreateRequest calls the generic PostUserApptokenCreate builder with application/json body
func NewPostUserApptokenCreateRequest(server string, body PostUserApptokenCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserApptokenCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserApptokenCreateRequestWithBody generates requests for PostUserApptokenCreate with any type of body
func NewPostUserApptokenCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/apptoken/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserApptokenDeleteRequest calls the generic PostUserApptokenDelete builder with application/json body
func NewPostUserApptokenDeleteRequest(server string, body PostUserApptokenDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserApptokenDeleteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUserApptokenDeleteRequestWithBody generates requests for PostUserApptokenDelete with any type of body
func NewPostUserApptokenDeleteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/apptoken/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserApptokenListRequest generates requests for GetUserApptokenList
func NewGetUserApptokenListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/apptoken/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserBannedRequest generates requests for GetUserBanned
func NewGetUserBannedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/banned")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserConnectionStatusRequest generates requests for GetUserConnectionStatus
func NewGetUserConnectionStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/connection/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserDashboardRequest generates requests for GetUserDashboard
func NewGetUserDashboardRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/dashboard")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserDashboardTabloidRequest generates requests for GetUserDashboardTabloid
func NewGetUserDashboardTabloidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/dashboard/tabloid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserDisrespectRequest generates requests for PostUserDisrespect
func NewPostUserDisrespectRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/disrespect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserFollowRequest generates requests for PostUserFollow
func NewPostUserFollowRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/follow/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserFollowersRequest generates requests for GetUserFollowers
func NewGetUserFollowersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/followers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserInfoRequest generates requests for GetUserInfo
func NewGetUserInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileActivityRequest generates requests for GetUserProfileActivity
func NewGetUserProfileActivityRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/activity/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileBadgesRequest generates requests for GetUserProfileBadges
func NewGetUserProfileBadgesRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/badges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileBasicRequest generates requests for GetUserProfileBasic
func NewGetUserProfileBasicRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/basic/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileBloodsRequest generates requests for GetUserProfileBloods
func NewGetUserProfileBloodsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/bloods/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileChartMachinesAttackRequest generates requests for GetUserProfileChartMachinesAttack
func NewGetUserProfileChartMachinesAttackRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/chart/machines/attack/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileContentRequest generates requests for GetUserProfileContent
func NewGetUserProfileContentRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/content/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileGraphRequest generates requests for GetUserProfileGraph
func NewGetUserProfileGraphRequest(server string, period GetUserProfileGraphParamsPeriod, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "period", runtime.ParamLocationPath, period)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/graph/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileProgressChallengesRequest generates requests for GetUserProfileProgressChallenges
func NewGetUserProfileProgressChallengesRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/progress/challenges/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileProgressFortressRequest generates requests for GetUserProfileProgressFortress
func NewGetUserProfileProgressFortressRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/progress/fortress/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileProgressMachinesOsRequest generates requests for GetUserProfileProgressMachinesOs
func NewGetUserProfileProgressMachinesOsRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/progress/machines/os/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileProgressProlabRequest generates requests for GetUserProfileProgressProlab
func NewGetUserProfileProgressProlabRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/progress/prolab/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileProgressSherlocksRequest generates requests for GetUserProfileProgressSherlocks
func NewGetUserProfileProgressSherlocksRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/progress/sherlocks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserProfileSummaryRequest generates requests for GetUserProfileSummary
func NewGetUserProfileSummaryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/profile/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserRespectRequest generates requests for PostUserRespect
func NewPostUserRespectRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/respect/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserSettingsRequest generates requests for GetUserSettings
func NewGetUserSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserTracksRequest generates requests for GetUserTracks
func NewGetUserTracksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/tracks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUnfollowRequest generates requests for PostUserUnfollow
func NewPostUserUnfollowRequest(server string, userId UserId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/unfollow/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostVMExtendRequest calls the generic PostVMExtend builder with application/json body
func NewPostVMExtendRequest(server string, body PostVMExtendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVMExtendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVMExtendRequestWithFormdataBody calls the generic PostVMExtend builder with application/x-www-form-urlencoded body
func NewPostVMExtendRequestWithFormdataBody(server string, body PostVMExtendFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostVMExtendRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostVMExtendRequestWithBody generates requests for PostVMExtend with any type of body
func NewPostVMExtendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/extend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVMResetRequest calls the generic PostVMReset builder with application/json body
func NewPostVMResetRequest(server string, body PostVMResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVMResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVMResetRequestWithFormdataBody calls the generic PostVMReset builder with application/x-www-form-urlencoded body
func NewPostVMResetRequestWithFormdataBody(server string, body PostVMResetFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostVMResetRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostVMResetRequestWithBody generates requests for PostVMReset with any type of body
func NewPostVMResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVMResetVoteRequest calls the generic PostVMResetVote builder with application/json body
func NewPostVMResetVoteRequest(server string, body PostVMResetVoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVMResetVoteRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVMResetVoteRequestWithFormdataBody calls the generic PostVMResetVote builder with application/x-www-form-urlencoded body
func NewPostVMResetVoteRequestWithFormdataBody(server string, body PostVMResetVoteFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostVMResetVoteRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostVMResetVoteRequestWithBody generates requests for PostVMResetVote with any type of body
func NewPostVMResetVoteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/reset/vote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVMResetVoteAcceptRequest calls the generic PostVMResetVoteAccept builder with application/json body
func NewPostVMResetVoteAcceptRequest(server string, body PostVMResetVoteAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVMResetVoteAcceptRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVMResetVoteAcceptRequestWithFormdataBody calls the generic PostVMResetVoteAccept builder with application/x-www-form-urlencoded body
func NewPostVMResetVoteAcceptRequestWithFormdataBody(server string, body PostVMResetVoteAcceptFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostVMResetVoteAcceptRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostVMResetVoteAcceptRequestWithBody generates requests for PostVMResetVoteAccept with any type of body
func NewPostVMResetVoteAcceptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/reset/vote/accept")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVMSpawnRequest calls the generic PostVMSpawn builder with application/json body
func NewPostVMSpawnRequest(server string, body PostVMSpawnJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVMSpawnRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVMSpawnRequestWithFormdataBody calls the generic PostVMSpawn builder with application/x-www-form-urlencoded body
func NewPostVMSpawnRequestWithFormdataBody(server string, body PostVMSpawnFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostVMSpawnRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostVMSpawnRequestWithBody generates requests for PostVMSpawn with any type of body
func NewPostVMSpawnRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/spawn")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostVMTerminateRequest calls the generic PostVMTerminate builder with application/json body
func NewPostVMTerminateRequest(server string, body PostVMTerminateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostVMTerminateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostVMTerminateRequestWithFormdataBody calls the generic PostVMTerminate builder with application/x-www-form-urlencoded body
func NewPostVMTerminateRequestWithFormdataBody(server string, body PostVMTerminateFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostVMTerminateRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostVMTerminateRequestWithBody generates requests for PostVMTerminate with any type of body
func NewPostVMTerminateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vm/terminate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTodoUpdateRequest generates requests for PostTodoUpdate
func NewPostTodoUpdateRequest(server string, product PostTodoUpdateParamsProduct, productId ProductId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "product", runtime.ParamLocationPath, product)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productId", runtime.ParamLocationPath, productId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/todo/update/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccessOvpnfileVpnIdUDPWithResponse request
	GetAccessOvpnfileVpnIdUDPWithResponse(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*GetAccessOvpnfileVpnIdUDPResponse, error)

	// GetAccessOvpnfileVpnIdTCPWithResponse request
	GetAccessOvpnfileVpnIdTCPWithResponse(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*GetAccessOvpnfileVpnIdTCPResponse, error)

	// GetAnnouncementsWithResponse request
	GetAnnouncementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAnnouncementsResponse, error)

	// PostArenaOwnWithBodyWithResponse request with any body
	PostArenaOwnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArenaOwnResponse, error)

	PostArenaOwnWithResponse(ctx context.Context, body PostArenaOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArenaOwnResponse, error)

	PostArenaOwnWithFormdataBodyWithResponse(ctx context.Context, body PostArenaOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostArenaOwnResponse, error)

	// GetBadgesWithResponse request
	GetBadgesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBadgesResponse, error)

	// GetCareerCompaniesWithResponse request
	GetCareerCompaniesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerCompaniesResponse, error)

	// GetCareerCompanyWithResponse request
	GetCareerCompanyWithResponse(ctx context.Context, companyId CompanyId, params *GetCareerCompanyParams, reqEditors ...RequestEditorFn) (*GetCareerCompanyResponse, error)

	// GetCareerFeaturedWithResponse request
	GetCareerFeaturedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerFeaturedResponse, error)

	// GetCareerHistoryWithResponse request
	GetCareerHistoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerHistoryResponse, error)

	// GetCareerInfoWithResponse request
	GetCareerInfoWithResponse(ctx context.Context, jobId JobId, reqEditors ...RequestEditorFn) (*GetCareerInfoResponse, error)

	// GetCareerProfileWithResponse request
	GetCareerProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerProfileResponse, error)

	// GetCareerRequestsWithResponse request
	GetCareerRequestsWithResponse(ctx context.Context, params *GetCareerRequestsParams, reqEditors ...RequestEditorFn) (*GetCareerRequestsResponse, error)

	// GetCareerSearchWithResponse request
	GetCareerSearchWithResponse(ctx context.Context, params *GetCareerSearchParams, reqEditors ...RequestEditorFn) (*GetCareerSearchResponse, error)

	// GetCareerStatsWithResponse request
	GetCareerStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerStatsResponse, error)

	// PostCareerTemporaryContactOptinWithBodyWithResponse request with any body
	PostCareerTemporaryContactOptinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCareerTemporaryContactOptinResponse, error)

	PostCareerTemporaryContactOptinWithResponse(ctx context.Context, body PostCareerTemporaryContactOptinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCareerTemporaryContactOptinResponse, error)

	// GetChallengeActivityWithResponse request
	GetChallengeActivityWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeActivityResponse, error)

	// GetChallengeCategoriesListWithResponse request
	GetChallengeCategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeCategoriesListResponse, error)

	// GetChallengeChangelogWithResponse request
	GetChallengeChangelogWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeChangelogResponse, error)

	// GetChallengeDownloadWithResponse request
	GetChallengeDownloadWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeDownloadResponse, error)

	// GetChallengeInfoWithResponse request
	GetChallengeInfoWithResponse(ctx context.Context, challengeSlug ChallengeSlug, reqEditors ...RequestEditorFn) (*GetChallengeInfoResponse, error)

	// PostChallengeOwnWithBodyWithResponse request with any body
	PostChallengeOwnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeOwnResponse, error)

	PostChallengeOwnWithResponse(ctx context.Context, body PostChallengeOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeOwnResponse, error)

	PostChallengeOwnWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeOwnResponse, error)

	// GetChallengeRecommendedWithResponse request
	GetChallengeRecommendedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeRecommendedResponse, error)

	// GetChallengeRecommendedRetiredWithResponse request
	GetChallengeRecommendedRetiredWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeRecommendedRetiredResponse, error)

	// PostChallengeReviewWithBodyWithResponse request with any body
	PostChallengeReviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeReviewResponse, error)

	PostChallengeReviewWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeReviewResponse, error)

	// PostChallengeHelpfullWithResponse request
	PostChallengeHelpfullWithResponse(ctx context.Context, reviewId ReviewId, reqEditors ...RequestEditorFn) (*PostChallengeHelpfullResponse, error)

	// GetChallengeReviewsUserWithResponse request
	GetChallengeReviewsUserWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeReviewsUserResponse, error)

	// PostChallengeStartWithBodyWithResponse request with any body
	PostChallengeStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeStartResponse, error)

	PostChallengeStartWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeStartResponse, error)

	// PostChallengeStopWithBodyWithResponse request with any body
	PostChallengeStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeStopResponse, error)

	PostChallengeStopWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeStopResponse, error)

	// GetChallengeSuggestedWithResponse request
	GetChallengeSuggestedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeSuggestedResponse, error)

	// GetChallengeWriteupWithResponse request
	GetChallengeWriteupWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeWriteupResponse, error)

	// GetChallengeWriteupOfficialWithResponse request
	GetChallengeWriteupOfficialWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeWriteupOfficialResponse, error)

	// GetChallengesWithResponse request
	GetChallengesWithResponse(ctx context.Context, params *GetChallengesParams, reqEditors ...RequestEditorFn) (*GetChallengesResponse, error)

	// GetChangelogsWithResponse request
	GetChangelogsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChangelogsResponse, error)

	// GetConnectionStatusWithResponse request
	GetConnectionStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectionStatusResponse, error)

	// GetConnectionStatusProlabWithResponse request
	GetConnectionStatusProlabWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetConnectionStatusProlabResponse, error)

	// GetConnectionStatusProductnameWithResponse request
	GetConnectionStatusProductnameWithResponse(ctx context.Context, productName GetConnectionStatusProductnameParamsProductName, reqEditors ...RequestEditorFn) (*GetConnectionStatusProductnameResponse, error)

	// GetConnectionsWithResponse request
	GetConnectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectionsResponse, error)

	// GetConnectionsServersWithResponse request
	GetConnectionsServersWithResponse(ctx context.Context, params *GetConnectionsServersParams, reqEditors ...RequestEditorFn) (*GetConnectionsServersResponse, error)

	// GetConnectionsServersProlabWithResponse request
	GetConnectionsServersProlabWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetConnectionsServersProlabResponse, error)

	// PostConnectionsServersSwitchWithResponse request
	PostConnectionsServersSwitchWithResponse(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*PostConnectionsServersSwitchResponse, error)

	// GetContentStatsWithResponse request
	GetContentStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContentStatsResponse, error)

	// GetFortressWithResponse request
	GetFortressWithResponse(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*GetFortressResponse, error)

	// PostFortressFlagWithBodyWithResponse request with any body
	PostFortressFlagWithBodyWithResponse(ctx context.Context, fortressId FortressId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFortressFlagResponse, error)

	PostFortressFlagWithResponse(ctx context.Context, fortressId FortressId, body PostFortressFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFortressFlagResponse, error)

	PostFortressFlagWithFormdataBodyWithResponse(ctx context.Context, fortressId FortressId, body PostFortressFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostFortressFlagResponse, error)

	// GetFortressFlagsWithResponse request
	GetFortressFlagsWithResponse(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*GetFortressFlagsResponse, error)

	// PostFortressResetWithResponse request
	PostFortressResetWithResponse(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*PostFortressResetResponse, error)

	// GetFortressesWithResponse request
	GetFortressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFortressesResponse, error)

	// GetHomeBannerWithResponse request
	GetHomeBannerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeBannerResponse, error)

	// GetHomeRecommendedWithResponse request
	GetHomeRecommendedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeRecommendedResponse, error)

	// GetHomeUserProgressWithResponse request
	GetHomeUserProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeUserProgressResponse, error)

	// GetHomeUserTodoWithResponse request
	GetHomeUserTodoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeUserTodoResponse, error)

	// GetLabListWithResponse request
	GetLabListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLabListResponse, error)

	// GetMachineActiveWithResponse request
	GetMachineActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineActiveResponse, error)

	// GetMachineActivityWithResponse request
	GetMachineActivityWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineActivityResponse, error)

	// GetMachineChangelogWithResponse request
	GetMachineChangelogWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineChangelogResponse, error)

	// GetMachineCreatorsWithResponse request
	GetMachineCreatorsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineCreatorsResponse, error)

	// GetMachineGraphActivityWithResponse request
	GetMachineGraphActivityWithResponse(ctx context.Context, machineId MachineId, period GetMachineGraphActivityParamsPeriod, reqEditors ...RequestEditorFn) (*GetMachineGraphActivityResponse, error)

	// GetMachineGraphMatrixWithResponse request
	GetMachineGraphMatrixWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineGraphMatrixResponse, error)

	// GetMachineGraphOwnsDifficultyWithResponse request
	GetMachineGraphOwnsDifficultyWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineGraphOwnsDifficultyResponse, error)

	// GetMachineListRetiredPaginatedWithResponse request
	GetMachineListRetiredPaginatedWithResponse(ctx context.Context, params *GetMachineListRetiredPaginatedParams, reqEditors ...RequestEditorFn) (*GetMachineListRetiredPaginatedResponse, error)

	// PostMachineOwnWithBodyWithResponse request with any body
	PostMachineOwnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMachineOwnResponse, error)

	PostMachineOwnWithResponse(ctx context.Context, body PostMachineOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMachineOwnResponse, error)

	PostMachineOwnWithFormdataBodyWithResponse(ctx context.Context, body PostMachineOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMachineOwnResponse, error)

	// GetMachineOwnsTopWithResponse request
	GetMachineOwnsTopWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineOwnsTopResponse, error)

	// GetMachinePaginatedWithResponse request
	GetMachinePaginatedWithResponse(ctx context.Context, params *GetMachinePaginatedParams, reqEditors ...RequestEditorFn) (*GetMachinePaginatedResponse, error)

	// GetMachineProfileWithResponse request
	GetMachineProfileWithResponse(ctx context.Context, machineSlug MachineSlug, reqEditors ...RequestEditorFn) (*GetMachineProfileResponse, error)

	// GetMachineRecommendedWithResponse request
	GetMachineRecommendedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineRecommendedResponse, error)

	// GetMachineRecommendedRetiredWithResponse request
	GetMachineRecommendedRetiredWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineRecommendedRetiredResponse, error)

	// PostMachineReviewWithBodyWithResponse request with any body
	PostMachineReviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMachineReviewResponse, error)

	PostMachineReviewWithResponse(ctx context.Context, body PostMachineReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMachineReviewResponse, error)

	PostMachineReviewWithFormdataBodyWithResponse(ctx context.Context, body PostMachineReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMachineReviewResponse, error)

	// GetMachineReviewsUserWithResponse request
	GetMachineReviewsUserWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineReviewsUserResponse, error)

	// GetMachineReviewsWithResponse request
	GetMachineReviewsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineReviewsResponse, error)

	// GetMachineTagsListWithResponse request
	GetMachineTagsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineTagsListResponse, error)

	// GetMachineTagsWithResponse request
	GetMachineTagsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineTagsResponse, error)

	// GetMachineTodoPaginatedWithResponse request
	GetMachineTodoPaginatedWithResponse(ctx context.Context, params *GetMachineTodoPaginatedParams, reqEditors ...RequestEditorFn) (*GetMachineTodoPaginatedResponse, error)

	// GetMachineUnreleasedWithResponse request
	GetMachineUnreleasedWithResponse(ctx context.Context, params *GetMachineUnreleasedParams, reqEditors ...RequestEditorFn) (*GetMachineUnreleasedResponse, error)

	// GetMachineWalkthroughRandomWithResponse request
	GetMachineWalkthroughRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughRandomResponse, error)

	// GetMachineWalkthroughsLanguageListWithResponse request
	GetMachineWalkthroughsLanguageListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughsLanguageListResponse, error)

	// GetMachineWalkthroughOfficialFeedbackChoicesWithResponse request
	GetMachineWalkthroughOfficialFeedbackChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughOfficialFeedbackChoicesResponse, error)

	// GetMachineWalkthroughsWithResponse request
	GetMachineWalkthroughsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughsResponse, error)

	// GetMachineWriteupWithResponse request
	GetMachineWriteupWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineWriteupResponse, error)

	// GetMachineAdventureWithResponse request
	GetMachineAdventureWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineAdventureResponse, error)

	// GetMachineTasksWithResponse request
	GetMachineTasksWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineTasksResponse, error)

	// GetNavigationMainWithResponse request
	GetNavigationMainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNavigationMainResponse, error)

	// GetNoticesWithResponse request
	GetNoticesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNoticesResponse, error)

	// GetProlabChangelogsWithResponse request
	GetProlabChangelogsWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabChangelogsResponse, error)

	// GetProlabFaqWithResponse request
	GetProlabFaqWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabFaqResponse, error)

	// PostProlabFlagWithBodyWithResponse request with any body
	PostProlabFlagWithBodyWithResponse(ctx context.Context, prolabId ProlabId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProlabFlagResponse, error)

	PostProlabFlagWithResponse(ctx context.Context, prolabId ProlabId, body PostProlabFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProlabFlagResponse, error)

	PostProlabFlagWithFormdataBodyWithResponse(ctx context.Context, prolabId ProlabId, body PostProlabFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProlabFlagResponse, error)

	// GetProlabFlagsWithResponse request
	GetProlabFlagsWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabFlagsResponse, error)

	// GetProlabInfoWithResponse request
	GetProlabInfoWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabInfoResponse, error)

	// GetProlabMachinesWithResponse request
	GetProlabMachinesWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabMachinesResponse, error)

	// GetProlabOverviewWithResponse request
	GetProlabOverviewWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabOverviewResponse, error)

	// GetProlabProgressWithResponse request
	GetProlabProgressWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabProgressResponse, error)

	// GetProlabRatingWithResponse request
	GetProlabRatingWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabRatingResponse, error)

	// GetProlabReviewsWithResponse request
	GetProlabReviewsWithResponse(ctx context.Context, prolabId ProlabId, params *GetProlabReviewsParams, reqEditors ...RequestEditorFn) (*GetProlabReviewsResponse, error)

	// GetProlabReviewsOverviewWithResponse request
	GetProlabReviewsOverviewWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabReviewsOverviewResponse, error)

	// GetProlabSubscriptionWithResponse request
	GetProlabSubscriptionWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabSubscriptionResponse, error)

	// GetProlabsWithResponse request
	GetProlabsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProlabsResponse, error)

	// PostPwnboxStartWithBodyWithResponse request with any body
	PostPwnboxStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPwnboxStartResponse, error)

	PostPwnboxStartWithResponse(ctx context.Context, body PostPwnboxStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPwnboxStartResponse, error)

	PostPwnboxStartWithFormdataBodyWithResponse(ctx context.Context, body PostPwnboxStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPwnboxStartResponse, error)

	// GetPwnboxStatusWithResponse request
	GetPwnboxStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPwnboxStatusResponse, error)

	// PostPwnboxTerminateWithResponse request
	PostPwnboxTerminateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPwnboxTerminateResponse, error)

	// GetPwnboxUsageWithResponse request
	GetPwnboxUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPwnboxUsageResponse, error)

	// GetRankingsWithResponse request
	GetRankingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsResponse, error)

	// GetRankingsCountriesWithResponse request
	GetRankingsCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsCountriesResponse, error)

	// GetRankingsCountryBestWithResponse request
	GetRankingsCountryBestWithResponse(ctx context.Context, params *GetRankingsCountryBestParams, reqEditors ...RequestEditorFn) (*GetRankingsCountryBestResponse, error)

	// GetRankingsCountryOverviewWithResponse request
	GetRankingsCountryOverviewWithResponse(ctx context.Context, params *GetRankingsCountryOverviewParams, reqEditors ...RequestEditorFn) (*GetRankingsCountryOverviewResponse, error)

	// GetRankingsCountryRankingBracketWithResponse request
	GetRankingsCountryRankingBracketWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsCountryRankingBracketResponse, error)

	// GetRankingsCountryUSMembersWithResponse request
	GetRankingsCountryUSMembersWithResponse(ctx context.Context, countryShortName string, reqEditors ...RequestEditorFn) (*GetRankingsCountryUSMembersResponse, error)

	// GetRankingsTeamBestWithResponse request
	GetRankingsTeamBestWithResponse(ctx context.Context, params *GetRankingsTeamBestParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamBestResponse, error)

	// GetRankingsTeamBestIdWithResponse request
	GetRankingsTeamBestIdWithResponse(ctx context.Context, teamId TeamId, params *GetRankingsTeamBestIdParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamBestIdResponse, error)

	// GetRankingsTeamOverviewWithResponse request
	GetRankingsTeamOverviewWithResponse(ctx context.Context, params *GetRankingsTeamOverviewParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamOverviewResponse, error)

	// GetRankingsTeamOverviewIdWithResponse request
	GetRankingsTeamOverviewIdWithResponse(ctx context.Context, teamId TeamId, params *GetRankingsTeamOverviewIdParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamOverviewIdResponse, error)

	// GetRankingsTeamRankingBracketWithResponse request
	GetRankingsTeamRankingBracketWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsTeamRankingBracketResponse, error)

	// GetRankingsTeamRankingBracketIdWithResponse request
	GetRankingsTeamRankingBracketIdWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetRankingsTeamRankingBracketIdResponse, error)

	// GetRankingsTeamsWithResponse request
	GetRankingsTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsTeamsResponse, error)

	// GetRankingsUniversitiesWithResponse request
	GetRankingsUniversitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsUniversitiesResponse, error)

	// GetRankingsUniversityRankingBracketIdWithResponse request
	GetRankingsUniversityRankingBracketIdWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetRankingsUniversityRankingBracketIdResponse, error)

	// GetRankingsUserBestWithResponse request
	GetRankingsUserBestWithResponse(ctx context.Context, params *GetRankingsUserBestParams, reqEditors ...RequestEditorFn) (*GetRankingsUserBestResponse, error)

	// GetRankingsUserOverviewWithResponse request
	GetRankingsUserOverviewWithResponse(ctx context.Context, params *GetRankingsUserOverviewParams, reqEditors ...RequestEditorFn) (*GetRankingsUserOverviewResponse, error)

	// GetRankingsUserRankingBracketWithResponse request
	GetRankingsUserRankingBracketWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsUserRankingBracketResponse, error)

	// GetRankingsUsersWithResponse request
	GetRankingsUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsUsersResponse, error)

	// GetReviewWithResponse request
	GetReviewWithResponse(ctx context.Context, product GetReviewParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*GetReviewResponse, error)

	// GetReviewPaginatedWithResponse request
	GetReviewPaginatedWithResponse(ctx context.Context, product GetReviewPaginatedParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*GetReviewPaginatedResponse, error)

	// GetSearchFetchWithResponse request
	GetSearchFetchWithResponse(ctx context.Context, params *GetSearchFetchParams, reqEditors ...RequestEditorFn) (*GetSearchFetchResponse, error)

	// GetSeasonEndWithResponse request
	GetSeasonEndWithResponse(ctx context.Context, seasonId SeasonId, userId UserId, reqEditors ...RequestEditorFn) (*GetSeasonEndResponse, error)

	// GetSeasonListWithResponse request
	GetSeasonListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSeasonListResponse, error)

	// GetSeasonMachineActiveWithResponse request
	GetSeasonMachineActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSeasonMachineActiveResponse, error)

	// GetSeasonMachinesWithResponse request
	GetSeasonMachinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSeasonMachinesResponse, error)

	// GetSeasonMachinesCompletedWithResponse request
	GetSeasonMachinesCompletedWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonMachinesCompletedResponse, error)

	// GetSeasonRewardsWithResponse request
	GetSeasonRewardsWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonRewardsResponse, error)

	// GetSeasonUserFollowersWithResponse request
	GetSeasonUserFollowersWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonUserFollowersResponse, error)

	// GetSeasonUserRankWithResponse request
	GetSeasonUserRankWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonUserRankResponse, error)

	// GetSeasonLeaderboardWithResponse request
	GetSeasonLeaderboardWithResponse(ctx context.Context, leaderboard GetSeasonLeaderboardParamsLeaderboard, params *GetSeasonLeaderboardParams, reqEditors ...RequestEditorFn) (*GetSeasonLeaderboardResponse, error)

	// GetSeasonLeaderboardTopWithResponse request
	GetSeasonLeaderboardTopWithResponse(ctx context.Context, leaderboard GetSeasonLeaderboardTopParamsLeaderboard, seasonId SeasonId, params *GetSeasonLeaderboardTopParams, reqEditors ...RequestEditorFn) (*GetSeasonLeaderboardTopResponse, error)

	// GetSherlocksWithResponse request
	GetSherlocksWithResponse(ctx context.Context, params *GetSherlocksParams, reqEditors ...RequestEditorFn) (*GetSherlocksResponse, error)

	// GetSherlocksCategoriesListWithResponse request
	GetSherlocksCategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSherlocksCategoriesListResponse, error)

	// GetSherlockDownloadlinkWithResponse request
	GetSherlockDownloadlinkWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockDownloadlinkResponse, error)

	// GetSherlockInfoWithResponse request
	GetSherlockInfoWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockInfoResponse, error)

	// GetSherlockPlayWithResponse request
	GetSherlockPlayWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockPlayResponse, error)

	// GetSherlockProgressWithResponse request
	GetSherlockProgressWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockProgressResponse, error)

	// GetSherlockTasksWithResponse request
	GetSherlockTasksWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockTasksResponse, error)

	// PostSherlockTasksFlagWithBodyWithResponse request with any body
	PostSherlockTasksFlagWithBodyWithResponse(ctx context.Context, sherlockId SherlockId, taskId TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSherlockTasksFlagResponse, error)

	PostSherlockTasksFlagWithResponse(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSherlockTasksFlagResponse, error)

	PostSherlockTasksFlagWithFormdataBodyWithResponse(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSherlockTasksFlagResponse, error)

	// GetSherlockWriteupWithResponse request
	GetSherlockWriteupWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockWriteupResponse, error)

	// GetSherlockWriteupOfficialWithResponse request
	GetSherlockWriteupOfficialWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockWriteupOfficialResponse, error)

	// GetSherlockWithResponse request
	GetSherlockWithResponse(ctx context.Context, sherlockSlug SherlockSlug, reqEditors ...RequestEditorFn) (*GetSherlockResponse, error)

	// GetSidebarAnnouncementWithResponse request
	GetSidebarAnnouncementWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSidebarAnnouncementResponse, error)

	// GetSidebarChangelogWithResponse request
	GetSidebarChangelogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSidebarChangelogResponse, error)

	// GetSPProfileWithResponse request
	GetSPProfileWithResponse(ctx context.Context, startingPointId StartingPointId, reqEditors ...RequestEditorFn) (*GetSPProfileResponse, error)

	// PostSPTaskFlagWithResponse request
	PostSPTaskFlagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSPTaskFlagResponse, error)

	// GetSPTierWithResponse request
	GetSPTierWithResponse(ctx context.Context, tierId TierId, reqEditors ...RequestEditorFn) (*GetSPTierResponse, error)

	// GetSPTiersProgressWithResponse request
	GetSPTiersProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSPTiersProgressResponse, error)

	// GetTeamActivityWithResponse request
	GetTeamActivityWithResponse(ctx context.Context, teamId TeamId, params *GetTeamActivityParams, reqEditors ...RequestEditorFn) (*GetTeamActivityResponse, error)

	// GetTeamChartChallengeCategoriesWithResponse request
	GetTeamChartChallengeCategoriesWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamChartChallengeCategoriesResponse, error)

	// GetTeamChartMachinesAttackWithResponse request
	GetTeamChartMachinesAttackWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamChartMachinesAttackResponse, error)

	// GetTeamGraphWithResponse request
	GetTeamGraphWithResponse(ctx context.Context, teamId TeamId, params *GetTeamGraphParams, reqEditors ...RequestEditorFn) (*GetTeamGraphResponse, error)

	// GetTeamInfoWithResponse request
	GetTeamInfoWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamInfoResponse, error)

	// GetTeamInvitationsWithResponse request
	GetTeamInvitationsWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamInvitationsResponse, error)

	// PostTeamKickUserWithResponse request
	PostTeamKickUserWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostTeamKickUserResponse, error)

	// GetTeamMembersWithResponse request
	GetTeamMembersWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamMembersResponse, error)

	// GetTeamStatsOwnsWithResponse request
	GetTeamStatsOwnsWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamStatsOwnsResponse, error)

	// PostTeamInviteAcceptWithResponse request
	PostTeamInviteAcceptWithResponse(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*PostTeamInviteAcceptResponse, error)

	// DeleteTeamInviteRejectWithResponse request
	DeleteTeamInviteRejectWithResponse(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*DeleteTeamInviteRejectResponse, error)

	// GetTracksWithResponse request
	GetTracksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTracksResponse, error)

	// PostTracksEnrollWithResponse request
	PostTracksEnrollWithResponse(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*PostTracksEnrollResponse, error)

	// PostTracksLikeWithResponse request
	PostTracksLikeWithResponse(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*PostTracksLikeResponse, error)

	// GetTracksIdWithResponse request
	GetTracksIdWithResponse(ctx context.Context, trackId int, reqEditors ...RequestEditorFn) (*GetTracksIdResponse, error)

	// GetUniversityActivityWithResponse request
	GetUniversityActivityWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityActivityResponse, error)

	// GetUniversityAllListWithResponse request
	GetUniversityAllListWithResponse(ctx context.Context, params *GetUniversityAllListParams, reqEditors ...RequestEditorFn) (*GetUniversityAllListResponse, error)

	// GetUniversityChartChallengeCategoriesWithResponse request
	GetUniversityChartChallengeCategoriesWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityChartChallengeCategoriesResponse, error)

	// GetUniversityChartMachinesAttackWithResponse request
	GetUniversityChartMachinesAttackWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityChartMachinesAttackResponse, error)

	// GetUniversityCountryListWithResponse request
	GetUniversityCountryListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniversityCountryListResponse, error)

	// GetUniversityMembersWithResponse request
	GetUniversityMembersWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityMembersResponse, error)

	// GetUniversityNewListWithResponse request
	GetUniversityNewListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniversityNewListResponse, error)

	// GetUniversityProfileWithResponse request
	GetUniversityProfileWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityProfileResponse, error)

	// GetUniversityStatsOwnsWithResponse request
	GetUniversityStatsOwnsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUniversityStatsOwnsResponse, error)

	// GetUniversityTopListWithResponse request
	GetUniversityTopListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniversityTopListResponse, error)

	// GetUserAchievementWithResponse request
	GetUserAchievementWithResponse(ctx context.Context, targetType string, userId UserId, targetId int, reqEditors ...RequestEditorFn) (*GetUserAchievementResponse, error)

	// GetUserAnonymizedIdWithResponse request
	GetUserAnonymizedIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAnonymizedIdResponse, error)

	// PostUserApptokenCreateWithBodyWithResponse request with any body
	PostUserApptokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserApptokenCreateResponse, error)

	PostUserApptokenCreateWithResponse(ctx context.Context, body PostUserApptokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserApptokenCreateResponse, error)

	// PostUserApptokenDeleteWithBodyWithResponse request with any body
	PostUserApptokenDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserApptokenDeleteResponse, error)

	PostUserApptokenDeleteWithResponse(ctx context.Context, body PostUserApptokenDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserApptokenDeleteResponse, error)

	// GetUserApptokenListWithResponse request
	GetUserApptokenListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserApptokenListResponse, error)

	// GetUserBannedWithResponse request
	GetUserBannedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserBannedResponse, error)

	// GetUserConnectionStatusWithResponse request
	GetUserConnectionStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserConnectionStatusResponse, error)

	// GetUserDashboardWithResponse request
	GetUserDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDashboardResponse, error)

	// GetUserDashboardTabloidWithResponse request
	GetUserDashboardTabloidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDashboardTabloidResponse, error)

	// PostUserDisrespectWithResponse request
	PostUserDisrespectWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserDisrespectResponse, error)

	// PostUserFollowWithResponse request
	PostUserFollowWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserFollowResponse, error)

	// GetUserFollowersWithResponse request
	GetUserFollowersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserFollowersResponse, error)

	// GetUserInfoWithResponse request
	GetUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserInfoResponse, error)

	// GetUserProfileActivityWithResponse request
	GetUserProfileActivityWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileActivityResponse, error)

	// GetUserProfileBadgesWithResponse request
	GetUserProfileBadgesWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileBadgesResponse, error)

	// GetUserProfileBasicWithResponse request
	GetUserProfileBasicWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileBasicResponse, error)

	// GetUserProfileBloodsWithResponse request
	GetUserProfileBloodsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileBloodsResponse, error)

	// GetUserProfileChartMachinesAttackWithResponse request
	GetUserProfileChartMachinesAttackWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileChartMachinesAttackResponse, error)

	// GetUserProfileContentWithResponse request
	GetUserProfileContentWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileContentResponse, error)

	// GetUserProfileGraphWithResponse request
	GetUserProfileGraphWithResponse(ctx context.Context, period GetUserProfileGraphParamsPeriod, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileGraphResponse, error)

	// GetUserProfileProgressChallengesWithResponse request
	GetUserProfileProgressChallengesWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressChallengesResponse, error)

	// GetUserProfileProgressFortressWithResponse request
	GetUserProfileProgressFortressWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressFortressResponse, error)

	// GetUserProfileProgressMachinesOsWithResponse request
	GetUserProfileProgressMachinesOsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressMachinesOsResponse, error)

	// GetUserProfileProgressProlabWithResponse request
	GetUserProfileProgressProlabWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressProlabResponse, error)

	// GetUserProfileProgressSherlocksWithResponse request
	GetUserProfileProgressSherlocksWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressSherlocksResponse, error)

	// GetUserProfileSummaryWithResponse request
	GetUserProfileSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserProfileSummaryResponse, error)

	// PostUserRespectWithResponse request
	PostUserRespectWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserRespectResponse, error)

	// GetUserSettingsWithResponse request
	GetUserSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSettingsResponse, error)

	// GetUserTracksWithResponse request
	GetUserTracksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserTracksResponse, error)

	// PostUserUnfollowWithResponse request
	PostUserUnfollowWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserUnfollowResponse, error)

	// PostVMExtendWithBodyWithResponse request with any body
	PostVMExtendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMExtendResponse, error)

	PostVMExtendWithResponse(ctx context.Context, body PostVMExtendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMExtendResponse, error)

	PostVMExtendWithFormdataBodyWithResponse(ctx context.Context, body PostVMExtendFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMExtendResponse, error)

	// PostVMResetWithBodyWithResponse request with any body
	PostVMResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMResetResponse, error)

	PostVMResetWithResponse(ctx context.Context, body PostVMResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetResponse, error)

	PostVMResetWithFormdataBodyWithResponse(ctx context.Context, body PostVMResetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetResponse, error)

	// PostVMResetVoteWithBodyWithResponse request with any body
	PostVMResetVoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMResetVoteResponse, error)

	PostVMResetVoteWithResponse(ctx context.Context, body PostVMResetVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteResponse, error)

	PostVMResetVoteWithFormdataBodyWithResponse(ctx context.Context, body PostVMResetVoteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteResponse, error)

	// PostVMResetVoteAcceptWithBodyWithResponse request with any body
	PostVMResetVoteAcceptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMResetVoteAcceptResponse, error)

	PostVMResetVoteAcceptWithResponse(ctx context.Context, body PostVMResetVoteAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteAcceptResponse, error)

	PostVMResetVoteAcceptWithFormdataBodyWithResponse(ctx context.Context, body PostVMResetVoteAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteAcceptResponse, error)

	// PostVMSpawnWithBodyWithResponse request with any body
	PostVMSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMSpawnResponse, error)

	PostVMSpawnWithResponse(ctx context.Context, body PostVMSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMSpawnResponse, error)

	PostVMSpawnWithFormdataBodyWithResponse(ctx context.Context, body PostVMSpawnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMSpawnResponse, error)

	// PostVMTerminateWithBodyWithResponse request with any body
	PostVMTerminateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMTerminateResponse, error)

	PostVMTerminateWithResponse(ctx context.Context, body PostVMTerminateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMTerminateResponse, error)

	PostVMTerminateWithFormdataBodyWithResponse(ctx context.Context, body PostVMTerminateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMTerminateResponse, error)

	// PostTodoUpdateWithResponse request
	PostTodoUpdateWithResponse(ctx context.Context, product PostTodoUpdateParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*PostTodoUpdateResponse, error)
}

type GetAccessOvpnfileVpnIdUDPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetAccessOvpnfileVpnIdUDPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessOvpnfileVpnIdUDPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccessOvpnfileVpnIdTCPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetAccessOvpnfileVpnIdTCPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccessOvpnfileVpnIdTCPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnouncementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AnnouncementResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetAnnouncementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnouncementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostArenaOwnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MultiOwnResponse
	JSON400      *Generic400Error
	JSON500      *ArenaOwnErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostArenaOwnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostArenaOwnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BadgesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerCompaniesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerCompanyResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerFeaturedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerFeaturedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerFeaturedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerFeaturedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerHistoryResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerInfoResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerProfileResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerRequestsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerSearchResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCareerStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CareerStatsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetCareerStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCareerStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCareerTemporaryContactOptinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostCareerTemporaryContactOptinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCareerTemporaryContactOptinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeActivityResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeCategoriesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeCategoriesListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeCategoriesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeCategoriesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeChangelogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeChangelogChallengeIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeChangelogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeChangelogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeInfoChallengeResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChallengeOwnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OwnResponse
	JSON400      *MachineOwn400
}

// Status returns HTTPResponse.Status
func (r PostChallengeOwnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChallengeOwnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeRecommendedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeRecommendedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeRecommendedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeRecommendedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeRecommendedRetiredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeRecommendedRetiredResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeRecommendedRetiredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeRecommendedRetiredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChallengeReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostChallengeReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChallengeReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChallengeHelpfullResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostChallengeHelpfullResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChallengeHelpfullResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeReviewsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeReviewsUserChallengeIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeReviewsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeReviewsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChallengeStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeStartResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostChallengeStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChallengeStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostChallengeStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeStopResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostChallengeStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostChallengeStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeSuggestedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeSuggestedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeSuggestedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeSuggestedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeWriteupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeWriteupResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeWriteupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeWriteupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengeWriteupOfficialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengeWriteupOfficialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengeWriteupOfficialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChallengesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChallengeListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChallengesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChallengesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChangelogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChangelogsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetChangelogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChangelogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionStatusProlabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusProductResponse
	JSON400      *Generic400Error
}

// Status returns HTTPResponse.Status
func (r GetConnectionStatusProlabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionStatusProlabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionStatusProductnameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionStatusProductResponse
	JSON400      *Generic400Error
}

// Status returns HTTPResponse.Status
func (r GetConnectionStatusProductnameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionStatusProductnameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionsServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionsServersResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetConnectionsServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionsServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionsServersProlabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionsServersProlabResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetConnectionsServersProlabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionsServersProlabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectionsServersSwitchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionsServersSwitchVpnIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostConnectionsServersSwitchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectionsServersSwitchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContentStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContentStatsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetContentStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContentStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFortressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FortressFortressIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetFortressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFortressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFortressFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MultiOwnResponse
	JSON400      *MultiOwn400
}

// Status returns HTTPResponse.Status
func (r PostFortressFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFortressFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFortressFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductFlagsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetFortressFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFortressFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFortressResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameResetResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostFortressResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFortressResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFortressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FortressesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetFortressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFortressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeBannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeBannersResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetHomeBannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeBannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeRecommendedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeRecommendedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetHomeRecommendedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeRecommendedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeUserProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeUserProgressResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetHomeUserProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeUserProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHomeUserTodoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HomeUserTodoResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetHomeUserTodoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHomeUserTodoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLabListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LabListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetLabListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLabListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineActiveResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineActivityMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineChangelogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineChangelogMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineChangelogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineChangelogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineCreatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineCreatorResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineCreatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineCreatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineGraphActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineGraphActivityMachineIdPeriodResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineGraphActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineGraphActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineGraphMatrixResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineGraphMatrixMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineGraphMatrixResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineGraphMatrixResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineGraphOwnsDifficultyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineGraphOwnsDifficultyMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineGraphOwnsDifficultyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineGraphOwnsDifficultyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineListRetiredPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachinePaginatedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineListRetiredPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineListRetiredPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMachineOwnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OwnResponse
	JSON400      *MachineOwn400
}

// Status returns HTTPResponse.Status
func (r PostMachineOwnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMachineOwnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineOwnsTopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineOwnsTopMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineOwnsTopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineOwnsTopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachinePaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachinePaginatedResponse
	JSON400      *GenericError
	JSON422      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachinePaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachinePaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineProfileMachineResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineRecommendedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineRecommendedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineRecommendedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineRecommendedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineRecommendedRetiredResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineRecommendedRetiredResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineRecommendedRetiredResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineRecommendedRetiredResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMachineReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineReviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostMachineReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMachineReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineReviewsUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineReviewsUserMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineReviewsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineReviewsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineReviewsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineTagsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineTagsListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineTagsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineTagsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineTagsMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineTodoPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachinePaginatedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineTodoPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineTodoPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineUnreleasedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineUnreleasedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineUnreleasedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineUnreleasedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineWalkthroughRandomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineWalkthroughRandomResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineWalkthroughRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineWalkthroughRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineWalkthroughsLanguageListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineWalkthroughsLanguageListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineWalkthroughsLanguageListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineWalkthroughsLanguageListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineWalkthroughOfficialFeedbackChoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineWalkthroughOfficialFeedbackChoicesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineWalkthroughOfficialFeedbackChoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineWalkthroughOfficialFeedbackChoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineWalkthroughsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineWalkthroughsMachineIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineWalkthroughsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineWalkthroughsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineWriteupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineWriteupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineWriteupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineAdventureResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachinesAdventureResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineAdventureResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineAdventureResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMachineTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MachineTasksResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetMachineTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMachineTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNavigationMainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NavigationMainResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetNavigationMainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNavigationMainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNoticesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoticesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetNoticesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNoticesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabChangelogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   []map[string]interface{} `json:"data,omitempty"`
		Status bool                     `json:"status,omitempty"`
	}
	JSON400 *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabChangelogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabChangelogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabFaqResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabfaqResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabFaqResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabFaqResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProlabFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MultiOwnResponse
	JSON400      *MultiOwn400
}

// Status returns HTTPResponse.Status
func (r PostProlabFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProlabFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabFlagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProductFlagsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabFlagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabFlagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabinfoResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabmachinesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlaboverviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabProgressResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabRatingResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabreviewsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabReviewsOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabreviewsOverviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabReviewsOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabReviewsOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabSubscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabSubscriptionResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProlabsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProlabsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetProlabsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProlabsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPwnboxStartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PwnboxStartResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostPwnboxStartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPwnboxStartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPwnboxStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PwnboxStatusResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetPwnboxStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPwnboxStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPwnboxTerminateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostPwnboxTerminateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPwnboxTerminateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPwnboxUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PwnboxUsageResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetPwnboxUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPwnboxUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsCountriesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsCountryBestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsCountryBestResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsCountryBestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsCountryBestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsCountryOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsCountryOverviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsCountryOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsCountryOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsCountryRankingBracketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsCountryRankingBracketResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsCountryRankingBracketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsCountryRankingBracketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsCountryUSMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsCountryMembersResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsCountryUSMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsCountryUSMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamBestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamBestResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamBestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamBestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamBestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamBestResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamBestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamBestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamOverviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamOverviewIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamOverviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamOverviewIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamOverviewIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamRankingBracketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamRankingBracketResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamRankingBracketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamRankingBracketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamRankingBracketIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamRankingBracketResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamRankingBracketIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamRankingBracketIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsTeamsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsUniversitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsUniversitiesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsUniversitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsUniversitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsUniversityRankingBracketIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsUniversityRankingBracketByIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsUniversityRankingBracketIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsUniversityRankingBracketIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsUserBestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsUserBestResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsUserBestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsUserBestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsUserOverviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsUserOverviewResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsUserOverviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsUserOverviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsUserRankingBracketResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsUserRankingBracketResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsUserRankingBracketResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsUserRankingBracketResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRankingsUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RankingsUsersResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetRankingsUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRankingsUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReviewProductResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReviewPaginatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReviewProductPaginatedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetReviewPaginatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReviewPaginatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchFetchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSearchFetchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchFetchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonEndResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonEndResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonEndResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonEndResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonMachineActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonMachineActiveResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonMachineActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonMachineActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonMachinesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonMachinesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonMachinesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonMachinesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonMachinesCompletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonMachinesCompletedSeasonIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonMachinesCompletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonMachinesCompletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonRewardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonRewardsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonRewardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonRewardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonUserFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonUserFollowersSeasonIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonUserFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonUserFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonUserRankResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonUserRankSeasonIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonUserRankResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonUserRankResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonLeaderboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonPlayersLeaderboardResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonLeaderboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonLeaderboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSeasonLeaderboardTopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SeasonPlatersLeaderboardTopResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSeasonLeaderboardTopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSeasonLeaderboardTopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSherlocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlocksCategoriesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksCategoriesListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSherlocksCategoriesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlocksCategoriesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockDownloadlinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksDownloadLinkResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockDownloadlinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockDownloadlinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksSherlockIdInfoResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockPlayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksSherlockIdPlayResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockPlayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockPlayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksSherlockIdProgressResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksSherlockIdTasksResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSherlockTasksFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SherlocksSherlockIdTasksTaskIdFlag201
	JSON400      *SherlocksSherlockIdTasksTaskIdFlag400
}

// Status returns HTTPResponse.Status
func (r PostSherlockTasksFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSherlockTasksFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockWriteupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksSherlockIdWriteupResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockWriteupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockWriteupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockWriteupOfficialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSherlockWriteupOfficialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockWriteupOfficialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSherlockResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SherlocksNameResponse
}

// Status returns HTTPResponse.Status
func (r GetSherlockResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSherlockResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSidebarAnnouncementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SidebarAnnouncementResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSidebarAnnouncementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSidebarAnnouncementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSidebarChangelogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SidebarChangelogResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSidebarChangelogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSidebarChangelogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSPProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpProfileStartingPointIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSPProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSPProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSPTaskFlagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostSPTaskFlagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSPTaskFlagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSPTierResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpTierResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSPTierResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSPTierResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSPTiersProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpTiersProgressResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetSPTiersProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSPTiersProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamActivityTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamChartChallengeCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamChartChallengeTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamChartChallengeCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamChartChallengeCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamChartMachinesAttackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamChartMachinesAttackTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamChartMachinesAttackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamChartMachinesAttackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamGraphTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamInfoTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamInvitationsTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamKickUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostTeamKickUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamKickUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamMembersTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamStatsOwnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TeamStatsOwnsTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTeamStatsOwnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamStatsOwnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTeamInviteAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *Generic400Error
}

// Status returns HTTPResponse.Status
func (r PostTeamInviteAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTeamInviteAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamInviteRejectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *Generic400Error
}

// Status returns HTTPResponse.Status
func (r DeleteTeamInviteRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamInviteRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TracksResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTracksEnrollResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TracksEnrollResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostTracksEnrollResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTracksEnrollResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTracksLikeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TracksLikeResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostTracksLikeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTracksLikeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTracksIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TracksIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetTracksIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTracksIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityActivityResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityAllListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityAllListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityAllListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityAllListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityChartChallengeCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityChartChallengeCategoriesResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityChartChallengeCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityChartChallengeCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityChartMachinesAttackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityChartMachinesAttackResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityChartMachinesAttackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityChartMachinesAttackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityCountryListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityCountryListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityCountryListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityCountryListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityMembersTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityNewListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityNewListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityNewListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityNewListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityProfileTeamIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityStatsOwnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityStatsOwnsUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityStatsOwnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityStatsOwnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUniversityTopListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UniversityTopListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUniversityTopListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUniversityTopListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAchievementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAchievementTarTypeUserIdTarIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserAchievementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAchievementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserAnonymizedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserAnonymizedIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserAnonymizedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserAnonymizedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserApptokenCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserApptokenCreateResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostUserApptokenCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserApptokenCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserApptokenDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostUserApptokenDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserApptokenDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserApptokenListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserApptokenListResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserApptokenListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserApptokenListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBannedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserBannedResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserBannedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBannedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserConnectionStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserConnectionStatusResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserConnectionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserConnectionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDashboardResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDashboardTabloidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDashboardTabloidResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserDashboardTabloidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDashboardTabloidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserDisrespectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostUserDisrespectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserDisrespectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserFollowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostUserFollowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserFollowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserFollowersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserFollowersResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserFollowersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserFollowersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInfoResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileActivityUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileBadgesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileBadgesUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileBadgesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileBadgesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileBasicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileBasicUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileBasicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileBasicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileBloodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileBloodsUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileBloodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileBloodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileChartMachinesAttackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileChartMachinesAttackUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileChartMachinesAttackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileChartMachinesAttackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileContentUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileGraphResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileGraphPeriodUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileGraphResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileGraphResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileProgressChallengesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileProgressChallengesUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileProgressChallengesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileProgressChallengesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileProgressFortressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileProgressFortressUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileProgressFortressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileProgressFortressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileProgressMachinesOsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileProgressMachinesOsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileProgressMachinesOsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileProgressMachinesOsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileProgressProlabResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileProgressProlabUserIdResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileProgressProlabResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileProgressProlabResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileProgressSherlocksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileProgressSherlocksResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileProgressSherlocksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileProgressSherlocksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserProfileSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileSummaryResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserProfileSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserProfileSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserRespectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostUserRespectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserRespectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserSettingsResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTracksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserTracksResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r GetUserTracksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTracksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUnfollowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GenericSuccess2xx
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostUserUnfollowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUnfollowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVMExtendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VMExtendResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostVMExtendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVMExtendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVMResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VMResponse
}

// Status returns HTTPResponse.Status
func (r PostVMResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVMResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVMResetVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VMResponse
}

// Status returns HTTPResponse.Status
func (r PostVMResetVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVMResetVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVMResetVoteAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VMResponse
}

// Status returns HTTPResponse.Status
func (r PostVMResetVoteAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVMResetVoteAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVMSpawnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VMResponse
	JSON400      *GenericError
	JSON500      *GenericError5xx
}

// Status returns HTTPResponse.Status
func (r PostVMSpawnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVMSpawnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostVMTerminateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VMResponse
	JSON400      *GenericError
	JSON500      *GenericError5xx
}

// Status returns HTTPResponse.Status
func (r PostVMTerminateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostVMTerminateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTodoUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TodoUpdateResponse
	JSON400      *GenericError
}

// Status returns HTTPResponse.Status
func (r PostTodoUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTodoUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccessOvpnfileVpnIdUDPWithResponse request returning *GetAccessOvpnfileVpnIdUDPResponse
func (c *ClientWithResponses) GetAccessOvpnfileVpnIdUDPWithResponse(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*GetAccessOvpnfileVpnIdUDPResponse, error) {
	rsp, err := c.GetAccessOvpnfileVpnIdUDP(ctx, vpnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessOvpnfileVpnIdUDPResponse(rsp)
}

// GetAccessOvpnfileVpnIdTCPWithResponse request returning *GetAccessOvpnfileVpnIdTCPResponse
func (c *ClientWithResponses) GetAccessOvpnfileVpnIdTCPWithResponse(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*GetAccessOvpnfileVpnIdTCPResponse, error) {
	rsp, err := c.GetAccessOvpnfileVpnIdTCP(ctx, vpnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccessOvpnfileVpnIdTCPResponse(rsp)
}

// GetAnnouncementsWithResponse request returning *GetAnnouncementsResponse
func (c *ClientWithResponses) GetAnnouncementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAnnouncementsResponse, error) {
	rsp, err := c.GetAnnouncements(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnouncementsResponse(rsp)
}

// PostArenaOwnWithBodyWithResponse request with arbitrary body returning *PostArenaOwnResponse
func (c *ClientWithResponses) PostArenaOwnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostArenaOwnResponse, error) {
	rsp, err := c.PostArenaOwnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArenaOwnResponse(rsp)
}

func (c *ClientWithResponses) PostArenaOwnWithResponse(ctx context.Context, body PostArenaOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostArenaOwnResponse, error) {
	rsp, err := c.PostArenaOwn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArenaOwnResponse(rsp)
}

func (c *ClientWithResponses) PostArenaOwnWithFormdataBodyWithResponse(ctx context.Context, body PostArenaOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostArenaOwnResponse, error) {
	rsp, err := c.PostArenaOwnWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostArenaOwnResponse(rsp)
}

// GetBadgesWithResponse request returning *GetBadgesResponse
func (c *ClientWithResponses) GetBadgesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBadgesResponse, error) {
	rsp, err := c.GetBadges(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBadgesResponse(rsp)
}

// GetCareerCompaniesWithResponse request returning *GetCareerCompaniesResponse
func (c *ClientWithResponses) GetCareerCompaniesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerCompaniesResponse, error) {
	rsp, err := c.GetCareerCompanies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerCompaniesResponse(rsp)
}

// GetCareerCompanyWithResponse request returning *GetCareerCompanyResponse
func (c *ClientWithResponses) GetCareerCompanyWithResponse(ctx context.Context, companyId CompanyId, params *GetCareerCompanyParams, reqEditors ...RequestEditorFn) (*GetCareerCompanyResponse, error) {
	rsp, err := c.GetCareerCompany(ctx, companyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerCompanyResponse(rsp)
}

// GetCareerFeaturedWithResponse request returning *GetCareerFeaturedResponse
func (c *ClientWithResponses) GetCareerFeaturedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerFeaturedResponse, error) {
	rsp, err := c.GetCareerFeatured(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerFeaturedResponse(rsp)
}

// GetCareerHistoryWithResponse request returning *GetCareerHistoryResponse
func (c *ClientWithResponses) GetCareerHistoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerHistoryResponse, error) {
	rsp, err := c.GetCareerHistory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerHistoryResponse(rsp)
}

// GetCareerInfoWithResponse request returning *GetCareerInfoResponse
func (c *ClientWithResponses) GetCareerInfoWithResponse(ctx context.Context, jobId JobId, reqEditors ...RequestEditorFn) (*GetCareerInfoResponse, error) {
	rsp, err := c.GetCareerInfo(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerInfoResponse(rsp)
}

// GetCareerProfileWithResponse request returning *GetCareerProfileResponse
func (c *ClientWithResponses) GetCareerProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerProfileResponse, error) {
	rsp, err := c.GetCareerProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerProfileResponse(rsp)
}

// GetCareerRequestsWithResponse request returning *GetCareerRequestsResponse
func (c *ClientWithResponses) GetCareerRequestsWithResponse(ctx context.Context, params *GetCareerRequestsParams, reqEditors ...RequestEditorFn) (*GetCareerRequestsResponse, error) {
	rsp, err := c.GetCareerRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerRequestsResponse(rsp)
}

// GetCareerSearchWithResponse request returning *GetCareerSearchResponse
func (c *ClientWithResponses) GetCareerSearchWithResponse(ctx context.Context, params *GetCareerSearchParams, reqEditors ...RequestEditorFn) (*GetCareerSearchResponse, error) {
	rsp, err := c.GetCareerSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerSearchResponse(rsp)
}

// GetCareerStatsWithResponse request returning *GetCareerStatsResponse
func (c *ClientWithResponses) GetCareerStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCareerStatsResponse, error) {
	rsp, err := c.GetCareerStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCareerStatsResponse(rsp)
}

// PostCareerTemporaryContactOptinWithBodyWithResponse request with arbitrary body returning *PostCareerTemporaryContactOptinResponse
func (c *ClientWithResponses) PostCareerTemporaryContactOptinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCareerTemporaryContactOptinResponse, error) {
	rsp, err := c.PostCareerTemporaryContactOptinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCareerTemporaryContactOptinResponse(rsp)
}

func (c *ClientWithResponses) PostCareerTemporaryContactOptinWithResponse(ctx context.Context, body PostCareerTemporaryContactOptinJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCareerTemporaryContactOptinResponse, error) {
	rsp, err := c.PostCareerTemporaryContactOptin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCareerTemporaryContactOptinResponse(rsp)
}

// GetChallengeActivityWithResponse request returning *GetChallengeActivityResponse
func (c *ClientWithResponses) GetChallengeActivityWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeActivityResponse, error) {
	rsp, err := c.GetChallengeActivity(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeActivityResponse(rsp)
}

// GetChallengeCategoriesListWithResponse request returning *GetChallengeCategoriesListResponse
func (c *ClientWithResponses) GetChallengeCategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeCategoriesListResponse, error) {
	rsp, err := c.GetChallengeCategoriesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeCategoriesListResponse(rsp)
}

// GetChallengeChangelogWithResponse request returning *GetChallengeChangelogResponse
func (c *ClientWithResponses) GetChallengeChangelogWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeChangelogResponse, error) {
	rsp, err := c.GetChallengeChangelog(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeChangelogResponse(rsp)
}

// GetChallengeDownloadWithResponse request returning *GetChallengeDownloadResponse
func (c *ClientWithResponses) GetChallengeDownloadWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeDownloadResponse, error) {
	rsp, err := c.GetChallengeDownload(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeDownloadResponse(rsp)
}

// GetChallengeInfoWithResponse request returning *GetChallengeInfoResponse
func (c *ClientWithResponses) GetChallengeInfoWithResponse(ctx context.Context, challengeSlug ChallengeSlug, reqEditors ...RequestEditorFn) (*GetChallengeInfoResponse, error) {
	rsp, err := c.GetChallengeInfo(ctx, challengeSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeInfoResponse(rsp)
}

// PostChallengeOwnWithBodyWithResponse request with arbitrary body returning *PostChallengeOwnResponse
func (c *ClientWithResponses) PostChallengeOwnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeOwnResponse, error) {
	rsp, err := c.PostChallengeOwnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeOwnResponse(rsp)
}

func (c *ClientWithResponses) PostChallengeOwnWithResponse(ctx context.Context, body PostChallengeOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeOwnResponse, error) {
	rsp, err := c.PostChallengeOwn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeOwnResponse(rsp)
}

func (c *ClientWithResponses) PostChallengeOwnWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeOwnResponse, error) {
	rsp, err := c.PostChallengeOwnWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeOwnResponse(rsp)
}

// GetChallengeRecommendedWithResponse request returning *GetChallengeRecommendedResponse
func (c *ClientWithResponses) GetChallengeRecommendedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeRecommendedResponse, error) {
	rsp, err := c.GetChallengeRecommended(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeRecommendedResponse(rsp)
}

// GetChallengeRecommendedRetiredWithResponse request returning *GetChallengeRecommendedRetiredResponse
func (c *ClientWithResponses) GetChallengeRecommendedRetiredWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeRecommendedRetiredResponse, error) {
	rsp, err := c.GetChallengeRecommendedRetired(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeRecommendedRetiredResponse(rsp)
}

// PostChallengeReviewWithBodyWithResponse request with arbitrary body returning *PostChallengeReviewResponse
func (c *ClientWithResponses) PostChallengeReviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeReviewResponse, error) {
	rsp, err := c.PostChallengeReviewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeReviewResponse(rsp)
}

func (c *ClientWithResponses) PostChallengeReviewWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeReviewResponse, error) {
	rsp, err := c.PostChallengeReviewWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeReviewResponse(rsp)
}

// PostChallengeHelpfullWithResponse request returning *PostChallengeHelpfullResponse
func (c *ClientWithResponses) PostChallengeHelpfullWithResponse(ctx context.Context, reviewId ReviewId, reqEditors ...RequestEditorFn) (*PostChallengeHelpfullResponse, error) {
	rsp, err := c.PostChallengeHelpfull(ctx, reviewId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeHelpfullResponse(rsp)
}

// GetChallengeReviewsUserWithResponse request returning *GetChallengeReviewsUserResponse
func (c *ClientWithResponses) GetChallengeReviewsUserWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeReviewsUserResponse, error) {
	rsp, err := c.GetChallengeReviewsUser(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeReviewsUserResponse(rsp)
}

// PostChallengeStartWithBodyWithResponse request with arbitrary body returning *PostChallengeStartResponse
func (c *ClientWithResponses) PostChallengeStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeStartResponse, error) {
	rsp, err := c.PostChallengeStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeStartResponse(rsp)
}

func (c *ClientWithResponses) PostChallengeStartWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeStartResponse, error) {
	rsp, err := c.PostChallengeStartWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeStartResponse(rsp)
}

// PostChallengeStopWithBodyWithResponse request with arbitrary body returning *PostChallengeStopResponse
func (c *ClientWithResponses) PostChallengeStopWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostChallengeStopResponse, error) {
	rsp, err := c.PostChallengeStopWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeStopResponse(rsp)
}

func (c *ClientWithResponses) PostChallengeStopWithFormdataBodyWithResponse(ctx context.Context, body PostChallengeStopFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostChallengeStopResponse, error) {
	rsp, err := c.PostChallengeStopWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostChallengeStopResponse(rsp)
}

// GetChallengeSuggestedWithResponse request returning *GetChallengeSuggestedResponse
func (c *ClientWithResponses) GetChallengeSuggestedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChallengeSuggestedResponse, error) {
	rsp, err := c.GetChallengeSuggested(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeSuggestedResponse(rsp)
}

// GetChallengeWriteupWithResponse request returning *GetChallengeWriteupResponse
func (c *ClientWithResponses) GetChallengeWriteupWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeWriteupResponse, error) {
	rsp, err := c.GetChallengeWriteup(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeWriteupResponse(rsp)
}

// GetChallengeWriteupOfficialWithResponse request returning *GetChallengeWriteupOfficialResponse
func (c *ClientWithResponses) GetChallengeWriteupOfficialWithResponse(ctx context.Context, challengeId ChallengeId, reqEditors ...RequestEditorFn) (*GetChallengeWriteupOfficialResponse, error) {
	rsp, err := c.GetChallengeWriteupOfficial(ctx, challengeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengeWriteupOfficialResponse(rsp)
}

// GetChallengesWithResponse request returning *GetChallengesResponse
func (c *ClientWithResponses) GetChallengesWithResponse(ctx context.Context, params *GetChallengesParams, reqEditors ...RequestEditorFn) (*GetChallengesResponse, error) {
	rsp, err := c.GetChallenges(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChallengesResponse(rsp)
}

// GetChangelogsWithResponse request returning *GetChangelogsResponse
func (c *ClientWithResponses) GetChangelogsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetChangelogsResponse, error) {
	rsp, err := c.GetChangelogs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetChangelogsResponse(rsp)
}

// GetConnectionStatusWithResponse request returning *GetConnectionStatusResponse
func (c *ClientWithResponses) GetConnectionStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectionStatusResponse, error) {
	rsp, err := c.GetConnectionStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionStatusResponse(rsp)
}

// GetConnectionStatusProlabWithResponse request returning *GetConnectionStatusProlabResponse
func (c *ClientWithResponses) GetConnectionStatusProlabWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetConnectionStatusProlabResponse, error) {
	rsp, err := c.GetConnectionStatusProlab(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionStatusProlabResponse(rsp)
}

// GetConnectionStatusProductnameWithResponse request returning *GetConnectionStatusProductnameResponse
func (c *ClientWithResponses) GetConnectionStatusProductnameWithResponse(ctx context.Context, productName GetConnectionStatusProductnameParamsProductName, reqEditors ...RequestEditorFn) (*GetConnectionStatusProductnameResponse, error) {
	rsp, err := c.GetConnectionStatusProductname(ctx, productName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionStatusProductnameResponse(rsp)
}

// GetConnectionsWithResponse request returning *GetConnectionsResponse
func (c *ClientWithResponses) GetConnectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConnectionsResponse, error) {
	rsp, err := c.GetConnections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionsResponse(rsp)
}

// GetConnectionsServersWithResponse request returning *GetConnectionsServersResponse
func (c *ClientWithResponses) GetConnectionsServersWithResponse(ctx context.Context, params *GetConnectionsServersParams, reqEditors ...RequestEditorFn) (*GetConnectionsServersResponse, error) {
	rsp, err := c.GetConnectionsServers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionsServersResponse(rsp)
}

// GetConnectionsServersProlabWithResponse request returning *GetConnectionsServersProlabResponse
func (c *ClientWithResponses) GetConnectionsServersProlabWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetConnectionsServersProlabResponse, error) {
	rsp, err := c.GetConnectionsServersProlab(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionsServersProlabResponse(rsp)
}

// PostConnectionsServersSwitchWithResponse request returning *PostConnectionsServersSwitchResponse
func (c *ClientWithResponses) PostConnectionsServersSwitchWithResponse(ctx context.Context, vpnId VpnId, reqEditors ...RequestEditorFn) (*PostConnectionsServersSwitchResponse, error) {
	rsp, err := c.PostConnectionsServersSwitch(ctx, vpnId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectionsServersSwitchResponse(rsp)
}

// GetContentStatsWithResponse request returning *GetContentStatsResponse
func (c *ClientWithResponses) GetContentStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetContentStatsResponse, error) {
	rsp, err := c.GetContentStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContentStatsResponse(rsp)
}

// GetFortressWithResponse request returning *GetFortressResponse
func (c *ClientWithResponses) GetFortressWithResponse(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*GetFortressResponse, error) {
	rsp, err := c.GetFortress(ctx, fortressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFortressResponse(rsp)
}

// PostFortressFlagWithBodyWithResponse request with arbitrary body returning *PostFortressFlagResponse
func (c *ClientWithResponses) PostFortressFlagWithBodyWithResponse(ctx context.Context, fortressId FortressId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFortressFlagResponse, error) {
	rsp, err := c.PostFortressFlagWithBody(ctx, fortressId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFortressFlagResponse(rsp)
}

func (c *ClientWithResponses) PostFortressFlagWithResponse(ctx context.Context, fortressId FortressId, body PostFortressFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFortressFlagResponse, error) {
	rsp, err := c.PostFortressFlag(ctx, fortressId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFortressFlagResponse(rsp)
}

func (c *ClientWithResponses) PostFortressFlagWithFormdataBodyWithResponse(ctx context.Context, fortressId FortressId, body PostFortressFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostFortressFlagResponse, error) {
	rsp, err := c.PostFortressFlagWithFormdataBody(ctx, fortressId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFortressFlagResponse(rsp)
}

// GetFortressFlagsWithResponse request returning *GetFortressFlagsResponse
func (c *ClientWithResponses) GetFortressFlagsWithResponse(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*GetFortressFlagsResponse, error) {
	rsp, err := c.GetFortressFlags(ctx, fortressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFortressFlagsResponse(rsp)
}

// PostFortressResetWithResponse request returning *PostFortressResetResponse
func (c *ClientWithResponses) PostFortressResetWithResponse(ctx context.Context, fortressId FortressId, reqEditors ...RequestEditorFn) (*PostFortressResetResponse, error) {
	rsp, err := c.PostFortressReset(ctx, fortressId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFortressResetResponse(rsp)
}

// GetFortressesWithResponse request returning *GetFortressesResponse
func (c *ClientWithResponses) GetFortressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFortressesResponse, error) {
	rsp, err := c.GetFortresses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFortressesResponse(rsp)
}

// GetHomeBannerWithResponse request returning *GetHomeBannerResponse
func (c *ClientWithResponses) GetHomeBannerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeBannerResponse, error) {
	rsp, err := c.GetHomeBanner(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeBannerResponse(rsp)
}

// GetHomeRecommendedWithResponse request returning *GetHomeRecommendedResponse
func (c *ClientWithResponses) GetHomeRecommendedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeRecommendedResponse, error) {
	rsp, err := c.GetHomeRecommended(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeRecommendedResponse(rsp)
}

// GetHomeUserProgressWithResponse request returning *GetHomeUserProgressResponse
func (c *ClientWithResponses) GetHomeUserProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeUserProgressResponse, error) {
	rsp, err := c.GetHomeUserProgress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeUserProgressResponse(rsp)
}

// GetHomeUserTodoWithResponse request returning *GetHomeUserTodoResponse
func (c *ClientWithResponses) GetHomeUserTodoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHomeUserTodoResponse, error) {
	rsp, err := c.GetHomeUserTodo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHomeUserTodoResponse(rsp)
}

// GetLabListWithResponse request returning *GetLabListResponse
func (c *ClientWithResponses) GetLabListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLabListResponse, error) {
	rsp, err := c.GetLabList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLabListResponse(rsp)
}

// GetMachineActiveWithResponse request returning *GetMachineActiveResponse
func (c *ClientWithResponses) GetMachineActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineActiveResponse, error) {
	rsp, err := c.GetMachineActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineActiveResponse(rsp)
}

// GetMachineActivityWithResponse request returning *GetMachineActivityResponse
func (c *ClientWithResponses) GetMachineActivityWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineActivityResponse, error) {
	rsp, err := c.GetMachineActivity(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineActivityResponse(rsp)
}

// GetMachineChangelogWithResponse request returning *GetMachineChangelogResponse
func (c *ClientWithResponses) GetMachineChangelogWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineChangelogResponse, error) {
	rsp, err := c.GetMachineChangelog(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineChangelogResponse(rsp)
}

// GetMachineCreatorsWithResponse request returning *GetMachineCreatorsResponse
func (c *ClientWithResponses) GetMachineCreatorsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineCreatorsResponse, error) {
	rsp, err := c.GetMachineCreators(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineCreatorsResponse(rsp)
}

// GetMachineGraphActivityWithResponse request returning *GetMachineGraphActivityResponse
func (c *ClientWithResponses) GetMachineGraphActivityWithResponse(ctx context.Context, machineId MachineId, period GetMachineGraphActivityParamsPeriod, reqEditors ...RequestEditorFn) (*GetMachineGraphActivityResponse, error) {
	rsp, err := c.GetMachineGraphActivity(ctx, machineId, period, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineGraphActivityResponse(rsp)
}

// GetMachineGraphMatrixWithResponse request returning *GetMachineGraphMatrixResponse
func (c *ClientWithResponses) GetMachineGraphMatrixWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineGraphMatrixResponse, error) {
	rsp, err := c.GetMachineGraphMatrix(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineGraphMatrixResponse(rsp)
}

// GetMachineGraphOwnsDifficultyWithResponse request returning *GetMachineGraphOwnsDifficultyResponse
func (c *ClientWithResponses) GetMachineGraphOwnsDifficultyWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineGraphOwnsDifficultyResponse, error) {
	rsp, err := c.GetMachineGraphOwnsDifficulty(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineGraphOwnsDifficultyResponse(rsp)
}

// GetMachineListRetiredPaginatedWithResponse request returning *GetMachineListRetiredPaginatedResponse
func (c *ClientWithResponses) GetMachineListRetiredPaginatedWithResponse(ctx context.Context, params *GetMachineListRetiredPaginatedParams, reqEditors ...RequestEditorFn) (*GetMachineListRetiredPaginatedResponse, error) {
	rsp, err := c.GetMachineListRetiredPaginated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineListRetiredPaginatedResponse(rsp)
}

// PostMachineOwnWithBodyWithResponse request with arbitrary body returning *PostMachineOwnResponse
func (c *ClientWithResponses) PostMachineOwnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMachineOwnResponse, error) {
	rsp, err := c.PostMachineOwnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineOwnResponse(rsp)
}

func (c *ClientWithResponses) PostMachineOwnWithResponse(ctx context.Context, body PostMachineOwnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMachineOwnResponse, error) {
	rsp, err := c.PostMachineOwn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineOwnResponse(rsp)
}

func (c *ClientWithResponses) PostMachineOwnWithFormdataBodyWithResponse(ctx context.Context, body PostMachineOwnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMachineOwnResponse, error) {
	rsp, err := c.PostMachineOwnWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineOwnResponse(rsp)
}

// GetMachineOwnsTopWithResponse request returning *GetMachineOwnsTopResponse
func (c *ClientWithResponses) GetMachineOwnsTopWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineOwnsTopResponse, error) {
	rsp, err := c.GetMachineOwnsTop(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineOwnsTopResponse(rsp)
}

// GetMachinePaginatedWithResponse request returning *GetMachinePaginatedResponse
func (c *ClientWithResponses) GetMachinePaginatedWithResponse(ctx context.Context, params *GetMachinePaginatedParams, reqEditors ...RequestEditorFn) (*GetMachinePaginatedResponse, error) {
	rsp, err := c.GetMachinePaginated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachinePaginatedResponse(rsp)
}

// GetMachineProfileWithResponse request returning *GetMachineProfileResponse
func (c *ClientWithResponses) GetMachineProfileWithResponse(ctx context.Context, machineSlug MachineSlug, reqEditors ...RequestEditorFn) (*GetMachineProfileResponse, error) {
	rsp, err := c.GetMachineProfile(ctx, machineSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineProfileResponse(rsp)
}

// GetMachineRecommendedWithResponse request returning *GetMachineRecommendedResponse
func (c *ClientWithResponses) GetMachineRecommendedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineRecommendedResponse, error) {
	rsp, err := c.GetMachineRecommended(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineRecommendedResponse(rsp)
}

// GetMachineRecommendedRetiredWithResponse request returning *GetMachineRecommendedRetiredResponse
func (c *ClientWithResponses) GetMachineRecommendedRetiredWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineRecommendedRetiredResponse, error) {
	rsp, err := c.GetMachineRecommendedRetired(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineRecommendedRetiredResponse(rsp)
}

// PostMachineReviewWithBodyWithResponse request with arbitrary body returning *PostMachineReviewResponse
func (c *ClientWithResponses) PostMachineReviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMachineReviewResponse, error) {
	rsp, err := c.PostMachineReviewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineReviewResponse(rsp)
}

func (c *ClientWithResponses) PostMachineReviewWithResponse(ctx context.Context, body PostMachineReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMachineReviewResponse, error) {
	rsp, err := c.PostMachineReview(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineReviewResponse(rsp)
}

func (c *ClientWithResponses) PostMachineReviewWithFormdataBodyWithResponse(ctx context.Context, body PostMachineReviewFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostMachineReviewResponse, error) {
	rsp, err := c.PostMachineReviewWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMachineReviewResponse(rsp)
}

// GetMachineReviewsUserWithResponse request returning *GetMachineReviewsUserResponse
func (c *ClientWithResponses) GetMachineReviewsUserWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineReviewsUserResponse, error) {
	rsp, err := c.GetMachineReviewsUser(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineReviewsUserResponse(rsp)
}

// GetMachineReviewsWithResponse request returning *GetMachineReviewsResponse
func (c *ClientWithResponses) GetMachineReviewsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineReviewsResponse, error) {
	rsp, err := c.GetMachineReviews(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineReviewsResponse(rsp)
}

// GetMachineTagsListWithResponse request returning *GetMachineTagsListResponse
func (c *ClientWithResponses) GetMachineTagsListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineTagsListResponse, error) {
	rsp, err := c.GetMachineTagsList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineTagsListResponse(rsp)
}

// GetMachineTagsWithResponse request returning *GetMachineTagsResponse
func (c *ClientWithResponses) GetMachineTagsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineTagsResponse, error) {
	rsp, err := c.GetMachineTags(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineTagsResponse(rsp)
}

// GetMachineTodoPaginatedWithResponse request returning *GetMachineTodoPaginatedResponse
func (c *ClientWithResponses) GetMachineTodoPaginatedWithResponse(ctx context.Context, params *GetMachineTodoPaginatedParams, reqEditors ...RequestEditorFn) (*GetMachineTodoPaginatedResponse, error) {
	rsp, err := c.GetMachineTodoPaginated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineTodoPaginatedResponse(rsp)
}

// GetMachineUnreleasedWithResponse request returning *GetMachineUnreleasedResponse
func (c *ClientWithResponses) GetMachineUnreleasedWithResponse(ctx context.Context, params *GetMachineUnreleasedParams, reqEditors ...RequestEditorFn) (*GetMachineUnreleasedResponse, error) {
	rsp, err := c.GetMachineUnreleased(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineUnreleasedResponse(rsp)
}

// GetMachineWalkthroughRandomWithResponse request returning *GetMachineWalkthroughRandomResponse
func (c *ClientWithResponses) GetMachineWalkthroughRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughRandomResponse, error) {
	rsp, err := c.GetMachineWalkthroughRandom(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineWalkthroughRandomResponse(rsp)
}

// GetMachineWalkthroughsLanguageListWithResponse request returning *GetMachineWalkthroughsLanguageListResponse
func (c *ClientWithResponses) GetMachineWalkthroughsLanguageListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughsLanguageListResponse, error) {
	rsp, err := c.GetMachineWalkthroughsLanguageList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineWalkthroughsLanguageListResponse(rsp)
}

// GetMachineWalkthroughOfficialFeedbackChoicesWithResponse request returning *GetMachineWalkthroughOfficialFeedbackChoicesResponse
func (c *ClientWithResponses) GetMachineWalkthroughOfficialFeedbackChoicesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughOfficialFeedbackChoicesResponse, error) {
	rsp, err := c.GetMachineWalkthroughOfficialFeedbackChoices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineWalkthroughOfficialFeedbackChoicesResponse(rsp)
}

// GetMachineWalkthroughsWithResponse request returning *GetMachineWalkthroughsResponse
func (c *ClientWithResponses) GetMachineWalkthroughsWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineWalkthroughsResponse, error) {
	rsp, err := c.GetMachineWalkthroughs(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineWalkthroughsResponse(rsp)
}

// GetMachineWriteupWithResponse request returning *GetMachineWriteupResponse
func (c *ClientWithResponses) GetMachineWriteupWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineWriteupResponse, error) {
	rsp, err := c.GetMachineWriteup(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineWriteupResponse(rsp)
}

// GetMachineAdventureWithResponse request returning *GetMachineAdventureResponse
func (c *ClientWithResponses) GetMachineAdventureWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineAdventureResponse, error) {
	rsp, err := c.GetMachineAdventure(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineAdventureResponse(rsp)
}

// GetMachineTasksWithResponse request returning *GetMachineTasksResponse
func (c *ClientWithResponses) GetMachineTasksWithResponse(ctx context.Context, machineId MachineId, reqEditors ...RequestEditorFn) (*GetMachineTasksResponse, error) {
	rsp, err := c.GetMachineTasks(ctx, machineId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMachineTasksResponse(rsp)
}

// GetNavigationMainWithResponse request returning *GetNavigationMainResponse
func (c *ClientWithResponses) GetNavigationMainWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNavigationMainResponse, error) {
	rsp, err := c.GetNavigationMain(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNavigationMainResponse(rsp)
}

// GetNoticesWithResponse request returning *GetNoticesResponse
func (c *ClientWithResponses) GetNoticesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNoticesResponse, error) {
	rsp, err := c.GetNotices(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNoticesResponse(rsp)
}

// GetProlabChangelogsWithResponse request returning *GetProlabChangelogsResponse
func (c *ClientWithResponses) GetProlabChangelogsWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabChangelogsResponse, error) {
	rsp, err := c.GetProlabChangelogs(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabChangelogsResponse(rsp)
}

// GetProlabFaqWithResponse request returning *GetProlabFaqResponse
func (c *ClientWithResponses) GetProlabFaqWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabFaqResponse, error) {
	rsp, err := c.GetProlabFaq(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabFaqResponse(rsp)
}

// PostProlabFlagWithBodyWithResponse request with arbitrary body returning *PostProlabFlagResponse
func (c *ClientWithResponses) PostProlabFlagWithBodyWithResponse(ctx context.Context, prolabId ProlabId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProlabFlagResponse, error) {
	rsp, err := c.PostProlabFlagWithBody(ctx, prolabId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProlabFlagResponse(rsp)
}

func (c *ClientWithResponses) PostProlabFlagWithResponse(ctx context.Context, prolabId ProlabId, body PostProlabFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProlabFlagResponse, error) {
	rsp, err := c.PostProlabFlag(ctx, prolabId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProlabFlagResponse(rsp)
}

func (c *ClientWithResponses) PostProlabFlagWithFormdataBodyWithResponse(ctx context.Context, prolabId ProlabId, body PostProlabFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProlabFlagResponse, error) {
	rsp, err := c.PostProlabFlagWithFormdataBody(ctx, prolabId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProlabFlagResponse(rsp)
}

// GetProlabFlagsWithResponse request returning *GetProlabFlagsResponse
func (c *ClientWithResponses) GetProlabFlagsWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabFlagsResponse, error) {
	rsp, err := c.GetProlabFlags(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabFlagsResponse(rsp)
}

// GetProlabInfoWithResponse request returning *GetProlabInfoResponse
func (c *ClientWithResponses) GetProlabInfoWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabInfoResponse, error) {
	rsp, err := c.GetProlabInfo(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabInfoResponse(rsp)
}

// GetProlabMachinesWithResponse request returning *GetProlabMachinesResponse
func (c *ClientWithResponses) GetProlabMachinesWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabMachinesResponse, error) {
	rsp, err := c.GetProlabMachines(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabMachinesResponse(rsp)
}

// GetProlabOverviewWithResponse request returning *GetProlabOverviewResponse
func (c *ClientWithResponses) GetProlabOverviewWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabOverviewResponse, error) {
	rsp, err := c.GetProlabOverview(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabOverviewResponse(rsp)
}

// GetProlabProgressWithResponse request returning *GetProlabProgressResponse
func (c *ClientWithResponses) GetProlabProgressWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabProgressResponse, error) {
	rsp, err := c.GetProlabProgress(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabProgressResponse(rsp)
}

// GetProlabRatingWithResponse request returning *GetProlabRatingResponse
func (c *ClientWithResponses) GetProlabRatingWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabRatingResponse, error) {
	rsp, err := c.GetProlabRating(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabRatingResponse(rsp)
}

// GetProlabReviewsWithResponse request returning *GetProlabReviewsResponse
func (c *ClientWithResponses) GetProlabReviewsWithResponse(ctx context.Context, prolabId ProlabId, params *GetProlabReviewsParams, reqEditors ...RequestEditorFn) (*GetProlabReviewsResponse, error) {
	rsp, err := c.GetProlabReviews(ctx, prolabId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabReviewsResponse(rsp)
}

// GetProlabReviewsOverviewWithResponse request returning *GetProlabReviewsOverviewResponse
func (c *ClientWithResponses) GetProlabReviewsOverviewWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabReviewsOverviewResponse, error) {
	rsp, err := c.GetProlabReviewsOverview(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabReviewsOverviewResponse(rsp)
}

// GetProlabSubscriptionWithResponse request returning *GetProlabSubscriptionResponse
func (c *ClientWithResponses) GetProlabSubscriptionWithResponse(ctx context.Context, prolabId ProlabId, reqEditors ...RequestEditorFn) (*GetProlabSubscriptionResponse, error) {
	rsp, err := c.GetProlabSubscription(ctx, prolabId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabSubscriptionResponse(rsp)
}

// GetProlabsWithResponse request returning *GetProlabsResponse
func (c *ClientWithResponses) GetProlabsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProlabsResponse, error) {
	rsp, err := c.GetProlabs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProlabsResponse(rsp)
}

// PostPwnboxStartWithBodyWithResponse request with arbitrary body returning *PostPwnboxStartResponse
func (c *ClientWithResponses) PostPwnboxStartWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPwnboxStartResponse, error) {
	rsp, err := c.PostPwnboxStartWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPwnboxStartResponse(rsp)
}

func (c *ClientWithResponses) PostPwnboxStartWithResponse(ctx context.Context, body PostPwnboxStartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPwnboxStartResponse, error) {
	rsp, err := c.PostPwnboxStart(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPwnboxStartResponse(rsp)
}

func (c *ClientWithResponses) PostPwnboxStartWithFormdataBodyWithResponse(ctx context.Context, body PostPwnboxStartFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostPwnboxStartResponse, error) {
	rsp, err := c.PostPwnboxStartWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPwnboxStartResponse(rsp)
}

// GetPwnboxStatusWithResponse request returning *GetPwnboxStatusResponse
func (c *ClientWithResponses) GetPwnboxStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPwnboxStatusResponse, error) {
	rsp, err := c.GetPwnboxStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPwnboxStatusResponse(rsp)
}

// PostPwnboxTerminateWithResponse request returning *PostPwnboxTerminateResponse
func (c *ClientWithResponses) PostPwnboxTerminateWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostPwnboxTerminateResponse, error) {
	rsp, err := c.PostPwnboxTerminate(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPwnboxTerminateResponse(rsp)
}

// GetPwnboxUsageWithResponse request returning *GetPwnboxUsageResponse
func (c *ClientWithResponses) GetPwnboxUsageWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPwnboxUsageResponse, error) {
	rsp, err := c.GetPwnboxUsage(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPwnboxUsageResponse(rsp)
}

// GetRankingsWithResponse request returning *GetRankingsResponse
func (c *ClientWithResponses) GetRankingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsResponse, error) {
	rsp, err := c.GetRankings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsResponse(rsp)
}

// GetRankingsCountriesWithResponse request returning *GetRankingsCountriesResponse
func (c *ClientWithResponses) GetRankingsCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsCountriesResponse, error) {
	rsp, err := c.GetRankingsCountries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsCountriesResponse(rsp)
}

// GetRankingsCountryBestWithResponse request returning *GetRankingsCountryBestResponse
func (c *ClientWithResponses) GetRankingsCountryBestWithResponse(ctx context.Context, params *GetRankingsCountryBestParams, reqEditors ...RequestEditorFn) (*GetRankingsCountryBestResponse, error) {
	rsp, err := c.GetRankingsCountryBest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsCountryBestResponse(rsp)
}

// GetRankingsCountryOverviewWithResponse request returning *GetRankingsCountryOverviewResponse
func (c *ClientWithResponses) GetRankingsCountryOverviewWithResponse(ctx context.Context, params *GetRankingsCountryOverviewParams, reqEditors ...RequestEditorFn) (*GetRankingsCountryOverviewResponse, error) {
	rsp, err := c.GetRankingsCountryOverview(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsCountryOverviewResponse(rsp)
}

// GetRankingsCountryRankingBracketWithResponse request returning *GetRankingsCountryRankingBracketResponse
func (c *ClientWithResponses) GetRankingsCountryRankingBracketWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsCountryRankingBracketResponse, error) {
	rsp, err := c.GetRankingsCountryRankingBracket(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsCountryRankingBracketResponse(rsp)
}

// GetRankingsCountryUSMembersWithResponse request returning *GetRankingsCountryUSMembersResponse
func (c *ClientWithResponses) GetRankingsCountryUSMembersWithResponse(ctx context.Context, countryShortName string, reqEditors ...RequestEditorFn) (*GetRankingsCountryUSMembersResponse, error) {
	rsp, err := c.GetRankingsCountryUSMembers(ctx, countryShortName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsCountryUSMembersResponse(rsp)
}

// GetRankingsTeamBestWithResponse request returning *GetRankingsTeamBestResponse
func (c *ClientWithResponses) GetRankingsTeamBestWithResponse(ctx context.Context, params *GetRankingsTeamBestParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamBestResponse, error) {
	rsp, err := c.GetRankingsTeamBest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamBestResponse(rsp)
}

// GetRankingsTeamBestIdWithResponse request returning *GetRankingsTeamBestIdResponse
func (c *ClientWithResponses) GetRankingsTeamBestIdWithResponse(ctx context.Context, teamId TeamId, params *GetRankingsTeamBestIdParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamBestIdResponse, error) {
	rsp, err := c.GetRankingsTeamBestId(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamBestIdResponse(rsp)
}

// GetRankingsTeamOverviewWithResponse request returning *GetRankingsTeamOverviewResponse
func (c *ClientWithResponses) GetRankingsTeamOverviewWithResponse(ctx context.Context, params *GetRankingsTeamOverviewParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamOverviewResponse, error) {
	rsp, err := c.GetRankingsTeamOverview(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamOverviewResponse(rsp)
}

// GetRankingsTeamOverviewIdWithResponse request returning *GetRankingsTeamOverviewIdResponse
func (c *ClientWithResponses) GetRankingsTeamOverviewIdWithResponse(ctx context.Context, teamId TeamId, params *GetRankingsTeamOverviewIdParams, reqEditors ...RequestEditorFn) (*GetRankingsTeamOverviewIdResponse, error) {
	rsp, err := c.GetRankingsTeamOverviewId(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamOverviewIdResponse(rsp)
}

// GetRankingsTeamRankingBracketWithResponse request returning *GetRankingsTeamRankingBracketResponse
func (c *ClientWithResponses) GetRankingsTeamRankingBracketWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsTeamRankingBracketResponse, error) {
	rsp, err := c.GetRankingsTeamRankingBracket(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamRankingBracketResponse(rsp)
}

// GetRankingsTeamRankingBracketIdWithResponse request returning *GetRankingsTeamRankingBracketIdResponse
func (c *ClientWithResponses) GetRankingsTeamRankingBracketIdWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetRankingsTeamRankingBracketIdResponse, error) {
	rsp, err := c.GetRankingsTeamRankingBracketId(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamRankingBracketIdResponse(rsp)
}

// GetRankingsTeamsWithResponse request returning *GetRankingsTeamsResponse
func (c *ClientWithResponses) GetRankingsTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsTeamsResponse, error) {
	rsp, err := c.GetRankingsTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsTeamsResponse(rsp)
}

// GetRankingsUniversitiesWithResponse request returning *GetRankingsUniversitiesResponse
func (c *ClientWithResponses) GetRankingsUniversitiesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsUniversitiesResponse, error) {
	rsp, err := c.GetRankingsUniversities(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsUniversitiesResponse(rsp)
}

// GetRankingsUniversityRankingBracketIdWithResponse request returning *GetRankingsUniversityRankingBracketIdResponse
func (c *ClientWithResponses) GetRankingsUniversityRankingBracketIdWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetRankingsUniversityRankingBracketIdResponse, error) {
	rsp, err := c.GetRankingsUniversityRankingBracketId(ctx, universityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsUniversityRankingBracketIdResponse(rsp)
}

// GetRankingsUserBestWithResponse request returning *GetRankingsUserBestResponse
func (c *ClientWithResponses) GetRankingsUserBestWithResponse(ctx context.Context, params *GetRankingsUserBestParams, reqEditors ...RequestEditorFn) (*GetRankingsUserBestResponse, error) {
	rsp, err := c.GetRankingsUserBest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsUserBestResponse(rsp)
}

// GetRankingsUserOverviewWithResponse request returning *GetRankingsUserOverviewResponse
func (c *ClientWithResponses) GetRankingsUserOverviewWithResponse(ctx context.Context, params *GetRankingsUserOverviewParams, reqEditors ...RequestEditorFn) (*GetRankingsUserOverviewResponse, error) {
	rsp, err := c.GetRankingsUserOverview(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsUserOverviewResponse(rsp)
}

// GetRankingsUserRankingBracketWithResponse request returning *GetRankingsUserRankingBracketResponse
func (c *ClientWithResponses) GetRankingsUserRankingBracketWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsUserRankingBracketResponse, error) {
	rsp, err := c.GetRankingsUserRankingBracket(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsUserRankingBracketResponse(rsp)
}

// GetRankingsUsersWithResponse request returning *GetRankingsUsersResponse
func (c *ClientWithResponses) GetRankingsUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRankingsUsersResponse, error) {
	rsp, err := c.GetRankingsUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRankingsUsersResponse(rsp)
}

// GetReviewWithResponse request returning *GetReviewResponse
func (c *ClientWithResponses) GetReviewWithResponse(ctx context.Context, product GetReviewParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*GetReviewResponse, error) {
	rsp, err := c.GetReview(ctx, product, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReviewResponse(rsp)
}

// GetReviewPaginatedWithResponse request returning *GetReviewPaginatedResponse
func (c *ClientWithResponses) GetReviewPaginatedWithResponse(ctx context.Context, product GetReviewPaginatedParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*GetReviewPaginatedResponse, error) {
	rsp, err := c.GetReviewPaginated(ctx, product, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReviewPaginatedResponse(rsp)
}

// GetSearchFetchWithResponse request returning *GetSearchFetchResponse
func (c *ClientWithResponses) GetSearchFetchWithResponse(ctx context.Context, params *GetSearchFetchParams, reqEditors ...RequestEditorFn) (*GetSearchFetchResponse, error) {
	rsp, err := c.GetSearchFetch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchFetchResponse(rsp)
}

// GetSeasonEndWithResponse request returning *GetSeasonEndResponse
func (c *ClientWithResponses) GetSeasonEndWithResponse(ctx context.Context, seasonId SeasonId, userId UserId, reqEditors ...RequestEditorFn) (*GetSeasonEndResponse, error) {
	rsp, err := c.GetSeasonEnd(ctx, seasonId, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonEndResponse(rsp)
}

// GetSeasonListWithResponse request returning *GetSeasonListResponse
func (c *ClientWithResponses) GetSeasonListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSeasonListResponse, error) {
	rsp, err := c.GetSeasonList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonListResponse(rsp)
}

// GetSeasonMachineActiveWithResponse request returning *GetSeasonMachineActiveResponse
func (c *ClientWithResponses) GetSeasonMachineActiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSeasonMachineActiveResponse, error) {
	rsp, err := c.GetSeasonMachineActive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonMachineActiveResponse(rsp)
}

// GetSeasonMachinesWithResponse request returning *GetSeasonMachinesResponse
func (c *ClientWithResponses) GetSeasonMachinesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSeasonMachinesResponse, error) {
	rsp, err := c.GetSeasonMachines(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonMachinesResponse(rsp)
}

// GetSeasonMachinesCompletedWithResponse request returning *GetSeasonMachinesCompletedResponse
func (c *ClientWithResponses) GetSeasonMachinesCompletedWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonMachinesCompletedResponse, error) {
	rsp, err := c.GetSeasonMachinesCompleted(ctx, seasonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonMachinesCompletedResponse(rsp)
}

// GetSeasonRewardsWithResponse request returning *GetSeasonRewardsResponse
func (c *ClientWithResponses) GetSeasonRewardsWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonRewardsResponse, error) {
	rsp, err := c.GetSeasonRewards(ctx, seasonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonRewardsResponse(rsp)
}

// GetSeasonUserFollowersWithResponse request returning *GetSeasonUserFollowersResponse
func (c *ClientWithResponses) GetSeasonUserFollowersWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonUserFollowersResponse, error) {
	rsp, err := c.GetSeasonUserFollowers(ctx, seasonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonUserFollowersResponse(rsp)
}

// GetSeasonUserRankWithResponse request returning *GetSeasonUserRankResponse
func (c *ClientWithResponses) GetSeasonUserRankWithResponse(ctx context.Context, seasonId SeasonId, reqEditors ...RequestEditorFn) (*GetSeasonUserRankResponse, error) {
	rsp, err := c.GetSeasonUserRank(ctx, seasonId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonUserRankResponse(rsp)
}

// GetSeasonLeaderboardWithResponse request returning *GetSeasonLeaderboardResponse
func (c *ClientWithResponses) GetSeasonLeaderboardWithResponse(ctx context.Context, leaderboard GetSeasonLeaderboardParamsLeaderboard, params *GetSeasonLeaderboardParams, reqEditors ...RequestEditorFn) (*GetSeasonLeaderboardResponse, error) {
	rsp, err := c.GetSeasonLeaderboard(ctx, leaderboard, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonLeaderboardResponse(rsp)
}

// GetSeasonLeaderboardTopWithResponse request returning *GetSeasonLeaderboardTopResponse
func (c *ClientWithResponses) GetSeasonLeaderboardTopWithResponse(ctx context.Context, leaderboard GetSeasonLeaderboardTopParamsLeaderboard, seasonId SeasonId, params *GetSeasonLeaderboardTopParams, reqEditors ...RequestEditorFn) (*GetSeasonLeaderboardTopResponse, error) {
	rsp, err := c.GetSeasonLeaderboardTop(ctx, leaderboard, seasonId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSeasonLeaderboardTopResponse(rsp)
}

// GetSherlocksWithResponse request returning *GetSherlocksResponse
func (c *ClientWithResponses) GetSherlocksWithResponse(ctx context.Context, params *GetSherlocksParams, reqEditors ...RequestEditorFn) (*GetSherlocksResponse, error) {
	rsp, err := c.GetSherlocks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlocksResponse(rsp)
}

// GetSherlocksCategoriesListWithResponse request returning *GetSherlocksCategoriesListResponse
func (c *ClientWithResponses) GetSherlocksCategoriesListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSherlocksCategoriesListResponse, error) {
	rsp, err := c.GetSherlocksCategoriesList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlocksCategoriesListResponse(rsp)
}

// GetSherlockDownloadlinkWithResponse request returning *GetSherlockDownloadlinkResponse
func (c *ClientWithResponses) GetSherlockDownloadlinkWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockDownloadlinkResponse, error) {
	rsp, err := c.GetSherlockDownloadlink(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockDownloadlinkResponse(rsp)
}

// GetSherlockInfoWithResponse request returning *GetSherlockInfoResponse
func (c *ClientWithResponses) GetSherlockInfoWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockInfoResponse, error) {
	rsp, err := c.GetSherlockInfo(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockInfoResponse(rsp)
}

// GetSherlockPlayWithResponse request returning *GetSherlockPlayResponse
func (c *ClientWithResponses) GetSherlockPlayWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockPlayResponse, error) {
	rsp, err := c.GetSherlockPlay(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockPlayResponse(rsp)
}

// GetSherlockProgressWithResponse request returning *GetSherlockProgressResponse
func (c *ClientWithResponses) GetSherlockProgressWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockProgressResponse, error) {
	rsp, err := c.GetSherlockProgress(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockProgressResponse(rsp)
}

// GetSherlockTasksWithResponse request returning *GetSherlockTasksResponse
func (c *ClientWithResponses) GetSherlockTasksWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockTasksResponse, error) {
	rsp, err := c.GetSherlockTasks(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockTasksResponse(rsp)
}

// PostSherlockTasksFlagWithBodyWithResponse request with arbitrary body returning *PostSherlockTasksFlagResponse
func (c *ClientWithResponses) PostSherlockTasksFlagWithBodyWithResponse(ctx context.Context, sherlockId SherlockId, taskId TaskId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSherlockTasksFlagResponse, error) {
	rsp, err := c.PostSherlockTasksFlagWithBody(ctx, sherlockId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSherlockTasksFlagResponse(rsp)
}

func (c *ClientWithResponses) PostSherlockTasksFlagWithResponse(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSherlockTasksFlagResponse, error) {
	rsp, err := c.PostSherlockTasksFlag(ctx, sherlockId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSherlockTasksFlagResponse(rsp)
}

func (c *ClientWithResponses) PostSherlockTasksFlagWithFormdataBodyWithResponse(ctx context.Context, sherlockId SherlockId, taskId TaskId, body PostSherlockTasksFlagFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSherlockTasksFlagResponse, error) {
	rsp, err := c.PostSherlockTasksFlagWithFormdataBody(ctx, sherlockId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSherlockTasksFlagResponse(rsp)
}

// GetSherlockWriteupWithResponse request returning *GetSherlockWriteupResponse
func (c *ClientWithResponses) GetSherlockWriteupWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockWriteupResponse, error) {
	rsp, err := c.GetSherlockWriteup(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockWriteupResponse(rsp)
}

// GetSherlockWriteupOfficialWithResponse request returning *GetSherlockWriteupOfficialResponse
func (c *ClientWithResponses) GetSherlockWriteupOfficialWithResponse(ctx context.Context, sherlockId SherlockId, reqEditors ...RequestEditorFn) (*GetSherlockWriteupOfficialResponse, error) {
	rsp, err := c.GetSherlockWriteupOfficial(ctx, sherlockId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockWriteupOfficialResponse(rsp)
}

// GetSherlockWithResponse request returning *GetSherlockResponse
func (c *ClientWithResponses) GetSherlockWithResponse(ctx context.Context, sherlockSlug SherlockSlug, reqEditors ...RequestEditorFn) (*GetSherlockResponse, error) {
	rsp, err := c.GetSherlock(ctx, sherlockSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSherlockResponse(rsp)
}

// GetSidebarAnnouncementWithResponse request returning *GetSidebarAnnouncementResponse
func (c *ClientWithResponses) GetSidebarAnnouncementWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSidebarAnnouncementResponse, error) {
	rsp, err := c.GetSidebarAnnouncement(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSidebarAnnouncementResponse(rsp)
}

// GetSidebarChangelogWithResponse request returning *GetSidebarChangelogResponse
func (c *ClientWithResponses) GetSidebarChangelogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSidebarChangelogResponse, error) {
	rsp, err := c.GetSidebarChangelog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSidebarChangelogResponse(rsp)
}

// GetSPProfileWithResponse request returning *GetSPProfileResponse
func (c *ClientWithResponses) GetSPProfileWithResponse(ctx context.Context, startingPointId StartingPointId, reqEditors ...RequestEditorFn) (*GetSPProfileResponse, error) {
	rsp, err := c.GetSPProfile(ctx, startingPointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSPProfileResponse(rsp)
}

// PostSPTaskFlagWithResponse request returning *PostSPTaskFlagResponse
func (c *ClientWithResponses) PostSPTaskFlagWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSPTaskFlagResponse, error) {
	rsp, err := c.PostSPTaskFlag(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSPTaskFlagResponse(rsp)
}

// GetSPTierWithResponse request returning *GetSPTierResponse
func (c *ClientWithResponses) GetSPTierWithResponse(ctx context.Context, tierId TierId, reqEditors ...RequestEditorFn) (*GetSPTierResponse, error) {
	rsp, err := c.GetSPTier(ctx, tierId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSPTierResponse(rsp)
}

// GetSPTiersProgressWithResponse request returning *GetSPTiersProgressResponse
func (c *ClientWithResponses) GetSPTiersProgressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSPTiersProgressResponse, error) {
	rsp, err := c.GetSPTiersProgress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSPTiersProgressResponse(rsp)
}

// GetTeamActivityWithResponse request returning *GetTeamActivityResponse
func (c *ClientWithResponses) GetTeamActivityWithResponse(ctx context.Context, teamId TeamId, params *GetTeamActivityParams, reqEditors ...RequestEditorFn) (*GetTeamActivityResponse, error) {
	rsp, err := c.GetTeamActivity(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamActivityResponse(rsp)
}

// GetTeamChartChallengeCategoriesWithResponse request returning *GetTeamChartChallengeCategoriesResponse
func (c *ClientWithResponses) GetTeamChartChallengeCategoriesWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamChartChallengeCategoriesResponse, error) {
	rsp, err := c.GetTeamChartChallengeCategories(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamChartChallengeCategoriesResponse(rsp)
}

// GetTeamChartMachinesAttackWithResponse request returning *GetTeamChartMachinesAttackResponse
func (c *ClientWithResponses) GetTeamChartMachinesAttackWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamChartMachinesAttackResponse, error) {
	rsp, err := c.GetTeamChartMachinesAttack(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamChartMachinesAttackResponse(rsp)
}

// GetTeamGraphWithResponse request returning *GetTeamGraphResponse
func (c *ClientWithResponses) GetTeamGraphWithResponse(ctx context.Context, teamId TeamId, params *GetTeamGraphParams, reqEditors ...RequestEditorFn) (*GetTeamGraphResponse, error) {
	rsp, err := c.GetTeamGraph(ctx, teamId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamGraphResponse(rsp)
}

// GetTeamInfoWithResponse request returning *GetTeamInfoResponse
func (c *ClientWithResponses) GetTeamInfoWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamInfoResponse, error) {
	rsp, err := c.GetTeamInfo(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamInfoResponse(rsp)
}

// GetTeamInvitationsWithResponse request returning *GetTeamInvitationsResponse
func (c *ClientWithResponses) GetTeamInvitationsWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamInvitationsResponse, error) {
	rsp, err := c.GetTeamInvitations(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamInvitationsResponse(rsp)
}

// PostTeamKickUserWithResponse request returning *PostTeamKickUserResponse
func (c *ClientWithResponses) PostTeamKickUserWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostTeamKickUserResponse, error) {
	rsp, err := c.PostTeamKickUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamKickUserResponse(rsp)
}

// GetTeamMembersWithResponse request returning *GetTeamMembersResponse
func (c *ClientWithResponses) GetTeamMembersWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamMembersResponse, error) {
	rsp, err := c.GetTeamMembers(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamMembersResponse(rsp)
}

// GetTeamStatsOwnsWithResponse request returning *GetTeamStatsOwnsResponse
func (c *ClientWithResponses) GetTeamStatsOwnsWithResponse(ctx context.Context, teamId TeamId, reqEditors ...RequestEditorFn) (*GetTeamStatsOwnsResponse, error) {
	rsp, err := c.GetTeamStatsOwns(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamStatsOwnsResponse(rsp)
}

// PostTeamInviteAcceptWithResponse request returning *PostTeamInviteAcceptResponse
func (c *ClientWithResponses) PostTeamInviteAcceptWithResponse(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*PostTeamInviteAcceptResponse, error) {
	rsp, err := c.PostTeamInviteAccept(ctx, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTeamInviteAcceptResponse(rsp)
}

// DeleteTeamInviteRejectWithResponse request returning *DeleteTeamInviteRejectResponse
func (c *ClientWithResponses) DeleteTeamInviteRejectWithResponse(ctx context.Context, requestId RequestId, reqEditors ...RequestEditorFn) (*DeleteTeamInviteRejectResponse, error) {
	rsp, err := c.DeleteTeamInviteReject(ctx, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamInviteRejectResponse(rsp)
}

// GetTracksWithResponse request returning *GetTracksResponse
func (c *ClientWithResponses) GetTracksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTracksResponse, error) {
	rsp, err := c.GetTracks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksResponse(rsp)
}

// PostTracksEnrollWithResponse request returning *PostTracksEnrollResponse
func (c *ClientWithResponses) PostTracksEnrollWithResponse(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*PostTracksEnrollResponse, error) {
	rsp, err := c.PostTracksEnroll(ctx, trackId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTracksEnrollResponse(rsp)
}

// PostTracksLikeWithResponse request returning *PostTracksLikeResponse
func (c *ClientWithResponses) PostTracksLikeWithResponse(ctx context.Context, trackId string, reqEditors ...RequestEditorFn) (*PostTracksLikeResponse, error) {
	rsp, err := c.PostTracksLike(ctx, trackId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTracksLikeResponse(rsp)
}

// GetTracksIdWithResponse request returning *GetTracksIdResponse
func (c *ClientWithResponses) GetTracksIdWithResponse(ctx context.Context, trackId int, reqEditors ...RequestEditorFn) (*GetTracksIdResponse, error) {
	rsp, err := c.GetTracksId(ctx, trackId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTracksIdResponse(rsp)
}

// GetUniversityActivityWithResponse request returning *GetUniversityActivityResponse
func (c *ClientWithResponses) GetUniversityActivityWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityActivityResponse, error) {
	rsp, err := c.GetUniversityActivity(ctx, universityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityActivityResponse(rsp)
}

// GetUniversityAllListWithResponse request returning *GetUniversityAllListResponse
func (c *ClientWithResponses) GetUniversityAllListWithResponse(ctx context.Context, params *GetUniversityAllListParams, reqEditors ...RequestEditorFn) (*GetUniversityAllListResponse, error) {
	rsp, err := c.GetUniversityAllList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityAllListResponse(rsp)
}

// GetUniversityChartChallengeCategoriesWithResponse request returning *GetUniversityChartChallengeCategoriesResponse
func (c *ClientWithResponses) GetUniversityChartChallengeCategoriesWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityChartChallengeCategoriesResponse, error) {
	rsp, err := c.GetUniversityChartChallengeCategories(ctx, universityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityChartChallengeCategoriesResponse(rsp)
}

// GetUniversityChartMachinesAttackWithResponse request returning *GetUniversityChartMachinesAttackResponse
func (c *ClientWithResponses) GetUniversityChartMachinesAttackWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityChartMachinesAttackResponse, error) {
	rsp, err := c.GetUniversityChartMachinesAttack(ctx, universityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityChartMachinesAttackResponse(rsp)
}

// GetUniversityCountryListWithResponse request returning *GetUniversityCountryListResponse
func (c *ClientWithResponses) GetUniversityCountryListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniversityCountryListResponse, error) {
	rsp, err := c.GetUniversityCountryList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityCountryListResponse(rsp)
}

// GetUniversityMembersWithResponse request returning *GetUniversityMembersResponse
func (c *ClientWithResponses) GetUniversityMembersWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityMembersResponse, error) {
	rsp, err := c.GetUniversityMembers(ctx, universityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityMembersResponse(rsp)
}

// GetUniversityNewListWithResponse request returning *GetUniversityNewListResponse
func (c *ClientWithResponses) GetUniversityNewListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniversityNewListResponse, error) {
	rsp, err := c.GetUniversityNewList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityNewListResponse(rsp)
}

// GetUniversityProfileWithResponse request returning *GetUniversityProfileResponse
func (c *ClientWithResponses) GetUniversityProfileWithResponse(ctx context.Context, universityId UniversityId, reqEditors ...RequestEditorFn) (*GetUniversityProfileResponse, error) {
	rsp, err := c.GetUniversityProfile(ctx, universityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityProfileResponse(rsp)
}

// GetUniversityStatsOwnsWithResponse request returning *GetUniversityStatsOwnsResponse
func (c *ClientWithResponses) GetUniversityStatsOwnsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUniversityStatsOwnsResponse, error) {
	rsp, err := c.GetUniversityStatsOwns(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityStatsOwnsResponse(rsp)
}

// GetUniversityTopListWithResponse request returning *GetUniversityTopListResponse
func (c *ClientWithResponses) GetUniversityTopListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUniversityTopListResponse, error) {
	rsp, err := c.GetUniversityTopList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUniversityTopListResponse(rsp)
}

// GetUserAchievementWithResponse request returning *GetUserAchievementResponse
func (c *ClientWithResponses) GetUserAchievementWithResponse(ctx context.Context, targetType string, userId UserId, targetId int, reqEditors ...RequestEditorFn) (*GetUserAchievementResponse, error) {
	rsp, err := c.GetUserAchievement(ctx, targetType, userId, targetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAchievementResponse(rsp)
}

// GetUserAnonymizedIdWithResponse request returning *GetUserAnonymizedIdResponse
func (c *ClientWithResponses) GetUserAnonymizedIdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserAnonymizedIdResponse, error) {
	rsp, err := c.GetUserAnonymizedId(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserAnonymizedIdResponse(rsp)
}

// PostUserApptokenCreateWithBodyWithResponse request with arbitrary body returning *PostUserApptokenCreateResponse
func (c *ClientWithResponses) PostUserApptokenCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserApptokenCreateResponse, error) {
	rsp, err := c.PostUserApptokenCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserApptokenCreateResponse(rsp)
}

func (c *ClientWithResponses) PostUserApptokenCreateWithResponse(ctx context.Context, body PostUserApptokenCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserApptokenCreateResponse, error) {
	rsp, err := c.PostUserApptokenCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserApptokenCreateResponse(rsp)
}

// PostUserApptokenDeleteWithBodyWithResponse request with arbitrary body returning *PostUserApptokenDeleteResponse
func (c *ClientWithResponses) PostUserApptokenDeleteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserApptokenDeleteResponse, error) {
	rsp, err := c.PostUserApptokenDeleteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserApptokenDeleteResponse(rsp)
}

func (c *ClientWithResponses) PostUserApptokenDeleteWithResponse(ctx context.Context, body PostUserApptokenDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserApptokenDeleteResponse, error) {
	rsp, err := c.PostUserApptokenDelete(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserApptokenDeleteResponse(rsp)
}

// GetUserApptokenListWithResponse request returning *GetUserApptokenListResponse
func (c *ClientWithResponses) GetUserApptokenListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserApptokenListResponse, error) {
	rsp, err := c.GetUserApptokenList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserApptokenListResponse(rsp)
}

// GetUserBannedWithResponse request returning *GetUserBannedResponse
func (c *ClientWithResponses) GetUserBannedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserBannedResponse, error) {
	rsp, err := c.GetUserBanned(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBannedResponse(rsp)
}

// GetUserConnectionStatusWithResponse request returning *GetUserConnectionStatusResponse
func (c *ClientWithResponses) GetUserConnectionStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserConnectionStatusResponse, error) {
	rsp, err := c.GetUserConnectionStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserConnectionStatusResponse(rsp)
}

// GetUserDashboardWithResponse request returning *GetUserDashboardResponse
func (c *ClientWithResponses) GetUserDashboardWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDashboardResponse, error) {
	rsp, err := c.GetUserDashboard(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDashboardResponse(rsp)
}

// GetUserDashboardTabloidWithResponse request returning *GetUserDashboardTabloidResponse
func (c *ClientWithResponses) GetUserDashboardTabloidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserDashboardTabloidResponse, error) {
	rsp, err := c.GetUserDashboardTabloid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDashboardTabloidResponse(rsp)
}

// PostUserDisrespectWithResponse request returning *PostUserDisrespectResponse
func (c *ClientWithResponses) PostUserDisrespectWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserDisrespectResponse, error) {
	rsp, err := c.PostUserDisrespect(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserDisrespectResponse(rsp)
}

// PostUserFollowWithResponse request returning *PostUserFollowResponse
func (c *ClientWithResponses) PostUserFollowWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserFollowResponse, error) {
	rsp, err := c.PostUserFollow(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserFollowResponse(rsp)
}

// GetUserFollowersWithResponse request returning *GetUserFollowersResponse
func (c *ClientWithResponses) GetUserFollowersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserFollowersResponse, error) {
	rsp, err := c.GetUserFollowers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserFollowersResponse(rsp)
}

// GetUserInfoWithResponse request returning *GetUserInfoResponse
func (c *ClientWithResponses) GetUserInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserInfoResponse, error) {
	rsp, err := c.GetUserInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserInfoResponse(rsp)
}

// GetUserProfileActivityWithResponse request returning *GetUserProfileActivityResponse
func (c *ClientWithResponses) GetUserProfileActivityWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileActivityResponse, error) {
	rsp, err := c.GetUserProfileActivity(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileActivityResponse(rsp)
}

// GetUserProfileBadgesWithResponse request returning *GetUserProfileBadgesResponse
func (c *ClientWithResponses) GetUserProfileBadgesWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileBadgesResponse, error) {
	rsp, err := c.GetUserProfileBadges(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileBadgesResponse(rsp)
}

// GetUserProfileBasicWithResponse request returning *GetUserProfileBasicResponse
func (c *ClientWithResponses) GetUserProfileBasicWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileBasicResponse, error) {
	rsp, err := c.GetUserProfileBasic(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileBasicResponse(rsp)
}

// GetUserProfileBloodsWithResponse request returning *GetUserProfileBloodsResponse
func (c *ClientWithResponses) GetUserProfileBloodsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileBloodsResponse, error) {
	rsp, err := c.GetUserProfileBloods(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileBloodsResponse(rsp)
}

// GetUserProfileChartMachinesAttackWithResponse request returning *GetUserProfileChartMachinesAttackResponse
func (c *ClientWithResponses) GetUserProfileChartMachinesAttackWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileChartMachinesAttackResponse, error) {
	rsp, err := c.GetUserProfileChartMachinesAttack(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileChartMachinesAttackResponse(rsp)
}

// GetUserProfileContentWithResponse request returning *GetUserProfileContentResponse
func (c *ClientWithResponses) GetUserProfileContentWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileContentResponse, error) {
	rsp, err := c.GetUserProfileContent(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileContentResponse(rsp)
}

// GetUserProfileGraphWithResponse request returning *GetUserProfileGraphResponse
func (c *ClientWithResponses) GetUserProfileGraphWithResponse(ctx context.Context, period GetUserProfileGraphParamsPeriod, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileGraphResponse, error) {
	rsp, err := c.GetUserProfileGraph(ctx, period, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileGraphResponse(rsp)
}

// GetUserProfileProgressChallengesWithResponse request returning *GetUserProfileProgressChallengesResponse
func (c *ClientWithResponses) GetUserProfileProgressChallengesWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressChallengesResponse, error) {
	rsp, err := c.GetUserProfileProgressChallenges(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileProgressChallengesResponse(rsp)
}

// GetUserProfileProgressFortressWithResponse request returning *GetUserProfileProgressFortressResponse
func (c *ClientWithResponses) GetUserProfileProgressFortressWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressFortressResponse, error) {
	rsp, err := c.GetUserProfileProgressFortress(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileProgressFortressResponse(rsp)
}

// GetUserProfileProgressMachinesOsWithResponse request returning *GetUserProfileProgressMachinesOsResponse
func (c *ClientWithResponses) GetUserProfileProgressMachinesOsWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressMachinesOsResponse, error) {
	rsp, err := c.GetUserProfileProgressMachinesOs(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileProgressMachinesOsResponse(rsp)
}

// GetUserProfileProgressProlabWithResponse request returning *GetUserProfileProgressProlabResponse
func (c *ClientWithResponses) GetUserProfileProgressProlabWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressProlabResponse, error) {
	rsp, err := c.GetUserProfileProgressProlab(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileProgressProlabResponse(rsp)
}

// GetUserProfileProgressSherlocksWithResponse request returning *GetUserProfileProgressSherlocksResponse
func (c *ClientWithResponses) GetUserProfileProgressSherlocksWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*GetUserProfileProgressSherlocksResponse, error) {
	rsp, err := c.GetUserProfileProgressSherlocks(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileProgressSherlocksResponse(rsp)
}

// GetUserProfileSummaryWithResponse request returning *GetUserProfileSummaryResponse
func (c *ClientWithResponses) GetUserProfileSummaryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserProfileSummaryResponse, error) {
	rsp, err := c.GetUserProfileSummary(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserProfileSummaryResponse(rsp)
}

// PostUserRespectWithResponse request returning *PostUserRespectResponse
func (c *ClientWithResponses) PostUserRespectWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserRespectResponse, error) {
	rsp, err := c.PostUserRespect(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserRespectResponse(rsp)
}

// GetUserSettingsWithResponse request returning *GetUserSettingsResponse
func (c *ClientWithResponses) GetUserSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSettingsResponse, error) {
	rsp, err := c.GetUserSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSettingsResponse(rsp)
}

// GetUserTracksWithResponse request returning *GetUserTracksResponse
func (c *ClientWithResponses) GetUserTracksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserTracksResponse, error) {
	rsp, err := c.GetUserTracks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTracksResponse(rsp)
}

// PostUserUnfollowWithResponse request returning *PostUserUnfollowResponse
func (c *ClientWithResponses) PostUserUnfollowWithResponse(ctx context.Context, userId UserId, reqEditors ...RequestEditorFn) (*PostUserUnfollowResponse, error) {
	rsp, err := c.PostUserUnfollow(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUnfollowResponse(rsp)
}

// PostVMExtendWithBodyWithResponse request with arbitrary body returning *PostVMExtendResponse
func (c *ClientWithResponses) PostVMExtendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMExtendResponse, error) {
	rsp, err := c.PostVMExtendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMExtendResponse(rsp)
}

func (c *ClientWithResponses) PostVMExtendWithResponse(ctx context.Context, body PostVMExtendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMExtendResponse, error) {
	rsp, err := c.PostVMExtend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMExtendResponse(rsp)
}

func (c *ClientWithResponses) PostVMExtendWithFormdataBodyWithResponse(ctx context.Context, body PostVMExtendFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMExtendResponse, error) {
	rsp, err := c.PostVMExtendWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMExtendResponse(rsp)
}

// PostVMResetWithBodyWithResponse request with arbitrary body returning *PostVMResetResponse
func (c *ClientWithResponses) PostVMResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMResetResponse, error) {
	rsp, err := c.PostVMResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetResponse(rsp)
}

func (c *ClientWithResponses) PostVMResetWithResponse(ctx context.Context, body PostVMResetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetResponse, error) {
	rsp, err := c.PostVMReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetResponse(rsp)
}

func (c *ClientWithResponses) PostVMResetWithFormdataBodyWithResponse(ctx context.Context, body PostVMResetFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetResponse, error) {
	rsp, err := c.PostVMResetWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetResponse(rsp)
}

// PostVMResetVoteWithBodyWithResponse request with arbitrary body returning *PostVMResetVoteResponse
func (c *ClientWithResponses) PostVMResetVoteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMResetVoteResponse, error) {
	rsp, err := c.PostVMResetVoteWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetVoteResponse(rsp)
}

func (c *ClientWithResponses) PostVMResetVoteWithResponse(ctx context.Context, body PostVMResetVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteResponse, error) {
	rsp, err := c.PostVMResetVote(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetVoteResponse(rsp)
}

func (c *ClientWithResponses) PostVMResetVoteWithFormdataBodyWithResponse(ctx context.Context, body PostVMResetVoteFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteResponse, error) {
	rsp, err := c.PostVMResetVoteWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetVoteResponse(rsp)
}

// PostVMResetVoteAcceptWithBodyWithResponse request with arbitrary body returning *PostVMResetVoteAcceptResponse
func (c *ClientWithResponses) PostVMResetVoteAcceptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMResetVoteAcceptResponse, error) {
	rsp, err := c.PostVMResetVoteAcceptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetVoteAcceptResponse(rsp)
}

func (c *ClientWithResponses) PostVMResetVoteAcceptWithResponse(ctx context.Context, body PostVMResetVoteAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteAcceptResponse, error) {
	rsp, err := c.PostVMResetVoteAccept(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetVoteAcceptResponse(rsp)
}

func (c *ClientWithResponses) PostVMResetVoteAcceptWithFormdataBodyWithResponse(ctx context.Context, body PostVMResetVoteAcceptFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMResetVoteAcceptResponse, error) {
	rsp, err := c.PostVMResetVoteAcceptWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMResetVoteAcceptResponse(rsp)
}

// PostVMSpawnWithBodyWithResponse request with arbitrary body returning *PostVMSpawnResponse
func (c *ClientWithResponses) PostVMSpawnWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMSpawnResponse, error) {
	rsp, err := c.PostVMSpawnWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMSpawnResponse(rsp)
}

func (c *ClientWithResponses) PostVMSpawnWithResponse(ctx context.Context, body PostVMSpawnJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMSpawnResponse, error) {
	rsp, err := c.PostVMSpawn(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMSpawnResponse(rsp)
}

func (c *ClientWithResponses) PostVMSpawnWithFormdataBodyWithResponse(ctx context.Context, body PostVMSpawnFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMSpawnResponse, error) {
	rsp, err := c.PostVMSpawnWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMSpawnResponse(rsp)
}

// PostVMTerminateWithBodyWithResponse request with arbitrary body returning *PostVMTerminateResponse
func (c *ClientWithResponses) PostVMTerminateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostVMTerminateResponse, error) {
	rsp, err := c.PostVMTerminateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMTerminateResponse(rsp)
}

func (c *ClientWithResponses) PostVMTerminateWithResponse(ctx context.Context, body PostVMTerminateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostVMTerminateResponse, error) {
	rsp, err := c.PostVMTerminate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMTerminateResponse(rsp)
}

func (c *ClientWithResponses) PostVMTerminateWithFormdataBodyWithResponse(ctx context.Context, body PostVMTerminateFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostVMTerminateResponse, error) {
	rsp, err := c.PostVMTerminateWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostVMTerminateResponse(rsp)
}

// PostTodoUpdateWithResponse request returning *PostTodoUpdateResponse
func (c *ClientWithResponses) PostTodoUpdateWithResponse(ctx context.Context, product PostTodoUpdateParamsProduct, productId ProductId, reqEditors ...RequestEditorFn) (*PostTodoUpdateResponse, error) {
	rsp, err := c.PostTodoUpdate(ctx, product, productId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTodoUpdateResponse(rsp)
}

// ParseGetAccessOvpnfileVpnIdUDPResponse parses an HTTP response from a GetAccessOvpnfileVpnIdUDPWithResponse call
func ParseGetAccessOvpnfileVpnIdUDPResponse(rsp *http.Response) (*GetAccessOvpnfileVpnIdUDPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessOvpnfileVpnIdUDPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAccessOvpnfileVpnIdTCPResponse parses an HTTP response from a GetAccessOvpnfileVpnIdTCPWithResponse call
func ParseGetAccessOvpnfileVpnIdTCPResponse(rsp *http.Response) (*GetAccessOvpnfileVpnIdTCPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccessOvpnfileVpnIdTCPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAnnouncementsResponse parses an HTTP response from a GetAnnouncementsWithResponse call
func ParseGetAnnouncementsResponse(rsp *http.Response) (*GetAnnouncementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnouncementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AnnouncementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostArenaOwnResponse parses an HTTP response from a PostArenaOwnWithResponse call
func ParsePostArenaOwnResponse(rsp *http.Response) (*PostArenaOwnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostArenaOwnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MultiOwnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Generic400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ArenaOwnErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBadgesResponse parses an HTTP response from a GetBadgesWithResponse call
func ParseGetBadgesResponse(rsp *http.Response) (*GetBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BadgesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerCompaniesResponse parses an HTTP response from a GetCareerCompaniesWithResponse call
func ParseGetCareerCompaniesResponse(rsp *http.Response) (*GetCareerCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerCompaniesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerCompanyResponse parses an HTTP response from a GetCareerCompanyWithResponse call
func ParseGetCareerCompanyResponse(rsp *http.Response) (*GetCareerCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerCompanyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerFeaturedResponse parses an HTTP response from a GetCareerFeaturedWithResponse call
func ParseGetCareerFeaturedResponse(rsp *http.Response) (*GetCareerFeaturedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerFeaturedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerFeaturedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerHistoryResponse parses an HTTP response from a GetCareerHistoryWithResponse call
func ParseGetCareerHistoryResponse(rsp *http.Response) (*GetCareerHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerHistoryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerInfoResponse parses an HTTP response from a GetCareerInfoWithResponse call
func ParseGetCareerInfoResponse(rsp *http.Response) (*GetCareerInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerProfileResponse parses an HTTP response from a GetCareerProfileWithResponse call
func ParseGetCareerProfileResponse(rsp *http.Response) (*GetCareerProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerProfileResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerRequestsResponse parses an HTTP response from a GetCareerRequestsWithResponse call
func ParseGetCareerRequestsResponse(rsp *http.Response) (*GetCareerRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerRequestsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerSearchResponse parses an HTTP response from a GetCareerSearchWithResponse call
func ParseGetCareerSearchResponse(rsp *http.Response) (*GetCareerSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerSearchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetCareerStatsResponse parses an HTTP response from a GetCareerStatsWithResponse call
func ParseGetCareerStatsResponse(rsp *http.Response) (*GetCareerStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCareerStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CareerStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostCareerTemporaryContactOptinResponse parses an HTTP response from a PostCareerTemporaryContactOptinWithResponse call
func ParsePostCareerTemporaryContactOptinResponse(rsp *http.Response) (*PostCareerTemporaryContactOptinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCareerTemporaryContactOptinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeActivityResponse parses an HTTP response from a GetChallengeActivityWithResponse call
func ParseGetChallengeActivityResponse(rsp *http.Response) (*GetChallengeActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeActivityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeCategoriesListResponse parses an HTTP response from a GetChallengeCategoriesListWithResponse call
func ParseGetChallengeCategoriesListResponse(rsp *http.Response) (*GetChallengeCategoriesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeCategoriesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeCategoriesListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeChangelogResponse parses an HTTP response from a GetChallengeChangelogWithResponse call
func ParseGetChallengeChangelogResponse(rsp *http.Response) (*GetChallengeChangelogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeChangelogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeChangelogChallengeIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeDownloadResponse parses an HTTP response from a GetChallengeDownloadWithResponse call
func ParseGetChallengeDownloadResponse(rsp *http.Response) (*GetChallengeDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeInfoResponse parses an HTTP response from a GetChallengeInfoWithResponse call
func ParseGetChallengeInfoResponse(rsp *http.Response) (*GetChallengeInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeInfoChallengeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostChallengeOwnResponse parses an HTTP response from a PostChallengeOwnWithResponse call
func ParsePostChallengeOwnResponse(rsp *http.Response) (*PostChallengeOwnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChallengeOwnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OwnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MachineOwn400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeRecommendedResponse parses an HTTP response from a GetChallengeRecommendedWithResponse call
func ParseGetChallengeRecommendedResponse(rsp *http.Response) (*GetChallengeRecommendedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeRecommendedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeRecommendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeRecommendedRetiredResponse parses an HTTP response from a GetChallengeRecommendedRetiredWithResponse call
func ParseGetChallengeRecommendedRetiredResponse(rsp *http.Response) (*GetChallengeRecommendedRetiredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeRecommendedRetiredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeRecommendedRetiredResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostChallengeReviewResponse parses an HTTP response from a PostChallengeReviewWithResponse call
func ParsePostChallengeReviewResponse(rsp *http.Response) (*PostChallengeReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChallengeReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostChallengeHelpfullResponse parses an HTTP response from a PostChallengeHelpfullWithResponse call
func ParsePostChallengeHelpfullResponse(rsp *http.Response) (*PostChallengeHelpfullResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChallengeHelpfullResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeReviewsUserResponse parses an HTTP response from a GetChallengeReviewsUserWithResponse call
func ParseGetChallengeReviewsUserResponse(rsp *http.Response) (*GetChallengeReviewsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeReviewsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeReviewsUserChallengeIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostChallengeStartResponse parses an HTTP response from a PostChallengeStartWithResponse call
func ParsePostChallengeStartResponse(rsp *http.Response) (*PostChallengeStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChallengeStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeStartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostChallengeStopResponse parses an HTTP response from a PostChallengeStopWithResponse call
func ParsePostChallengeStopResponse(rsp *http.Response) (*PostChallengeStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostChallengeStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeStopResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeSuggestedResponse parses an HTTP response from a GetChallengeSuggestedWithResponse call
func ParseGetChallengeSuggestedResponse(rsp *http.Response) (*GetChallengeSuggestedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeSuggestedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeSuggestedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeWriteupResponse parses an HTTP response from a GetChallengeWriteupWithResponse call
func ParseGetChallengeWriteupResponse(rsp *http.Response) (*GetChallengeWriteupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeWriteupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeWriteupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengeWriteupOfficialResponse parses an HTTP response from a GetChallengeWriteupOfficialWithResponse call
func ParseGetChallengeWriteupOfficialResponse(rsp *http.Response) (*GetChallengeWriteupOfficialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengeWriteupOfficialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChallengesResponse parses an HTTP response from a GetChallengesWithResponse call
func ParseGetChallengesResponse(rsp *http.Response) (*GetChallengesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChallengesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChallengeListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetChangelogsResponse parses an HTTP response from a GetChangelogsWithResponse call
func ParseGetChangelogsResponse(rsp *http.Response) (*GetChangelogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetChangelogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChangelogsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConnectionStatusResponse parses an HTTP response from a GetConnectionStatusWithResponse call
func ParseGetConnectionStatusResponse(rsp *http.Response) (*GetConnectionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConnectionStatusProlabResponse parses an HTTP response from a GetConnectionStatusProlabWithResponse call
func ParseGetConnectionStatusProlabResponse(rsp *http.Response) (*GetConnectionStatusProlabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionStatusProlabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Generic400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConnectionStatusProductnameResponse parses an HTTP response from a GetConnectionStatusProductnameWithResponse call
func ParseGetConnectionStatusProductnameResponse(rsp *http.Response) (*GetConnectionStatusProductnameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionStatusProductnameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionStatusProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Generic400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConnectionsResponse parses an HTTP response from a GetConnectionsWithResponse call
func ParseGetConnectionsResponse(rsp *http.Response) (*GetConnectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConnectionsServersResponse parses an HTTP response from a GetConnectionsServersWithResponse call
func ParseGetConnectionsServersResponse(rsp *http.Response) (*GetConnectionsServersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionsServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionsServersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetConnectionsServersProlabResponse parses an HTTP response from a GetConnectionsServersProlabWithResponse call
func ParseGetConnectionsServersProlabResponse(rsp *http.Response) (*GetConnectionsServersProlabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionsServersProlabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionsServersProlabResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostConnectionsServersSwitchResponse parses an HTTP response from a PostConnectionsServersSwitchWithResponse call
func ParsePostConnectionsServersSwitchResponse(rsp *http.Response) (*PostConnectionsServersSwitchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConnectionsServersSwitchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionsServersSwitchVpnIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetContentStatsResponse parses an HTTP response from a GetContentStatsWithResponse call
func ParseGetContentStatsResponse(rsp *http.Response) (*GetContentStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContentStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContentStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFortressResponse parses an HTTP response from a GetFortressWithResponse call
func ParseGetFortressResponse(rsp *http.Response) (*GetFortressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFortressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FortressFortressIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostFortressFlagResponse parses an HTTP response from a PostFortressFlagWithResponse call
func ParsePostFortressFlagResponse(rsp *http.Response) (*PostFortressFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFortressFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MultiOwnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MultiOwn400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFortressFlagsResponse parses an HTTP response from a GetFortressFlagsWithResponse call
func ParseGetFortressFlagsResponse(rsp *http.Response) (*GetFortressFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFortressFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductFlagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostFortressResetResponse parses an HTTP response from a PostFortressResetWithResponse call
func ParsePostFortressResetResponse(rsp *http.Response) (*PostFortressResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFortressResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameResetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetFortressesResponse parses an HTTP response from a GetFortressesWithResponse call
func ParseGetFortressesResponse(rsp *http.Response) (*GetFortressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFortressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FortressesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetHomeBannerResponse parses an HTTP response from a GetHomeBannerWithResponse call
func ParseGetHomeBannerResponse(rsp *http.Response) (*GetHomeBannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeBannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeBannersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetHomeRecommendedResponse parses an HTTP response from a GetHomeRecommendedWithResponse call
func ParseGetHomeRecommendedResponse(rsp *http.Response) (*GetHomeRecommendedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeRecommendedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeRecommendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetHomeUserProgressResponse parses an HTTP response from a GetHomeUserProgressWithResponse call
func ParseGetHomeUserProgressResponse(rsp *http.Response) (*GetHomeUserProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeUserProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeUserProgressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetHomeUserTodoResponse parses an HTTP response from a GetHomeUserTodoWithResponse call
func ParseGetHomeUserTodoResponse(rsp *http.Response) (*GetHomeUserTodoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHomeUserTodoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HomeUserTodoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetLabListResponse parses an HTTP response from a GetLabListWithResponse call
func ParseGetLabListResponse(rsp *http.Response) (*GetLabListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLabListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LabListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineActiveResponse parses an HTTP response from a GetMachineActiveWithResponse call
func ParseGetMachineActiveResponse(rsp *http.Response) (*GetMachineActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineActiveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineActivityResponse parses an HTTP response from a GetMachineActivityWithResponse call
func ParseGetMachineActivityResponse(rsp *http.Response) (*GetMachineActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineActivityMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineChangelogResponse parses an HTTP response from a GetMachineChangelogWithResponse call
func ParseGetMachineChangelogResponse(rsp *http.Response) (*GetMachineChangelogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineChangelogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineChangelogMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineCreatorsResponse parses an HTTP response from a GetMachineCreatorsWithResponse call
func ParseGetMachineCreatorsResponse(rsp *http.Response) (*GetMachineCreatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineCreatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineCreatorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineGraphActivityResponse parses an HTTP response from a GetMachineGraphActivityWithResponse call
func ParseGetMachineGraphActivityResponse(rsp *http.Response) (*GetMachineGraphActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineGraphActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineGraphActivityMachineIdPeriodResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineGraphMatrixResponse parses an HTTP response from a GetMachineGraphMatrixWithResponse call
func ParseGetMachineGraphMatrixResponse(rsp *http.Response) (*GetMachineGraphMatrixResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineGraphMatrixResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineGraphMatrixMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineGraphOwnsDifficultyResponse parses an HTTP response from a GetMachineGraphOwnsDifficultyWithResponse call
func ParseGetMachineGraphOwnsDifficultyResponse(rsp *http.Response) (*GetMachineGraphOwnsDifficultyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineGraphOwnsDifficultyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineGraphOwnsDifficultyMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineListRetiredPaginatedResponse parses an HTTP response from a GetMachineListRetiredPaginatedWithResponse call
func ParseGetMachineListRetiredPaginatedResponse(rsp *http.Response) (*GetMachineListRetiredPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineListRetiredPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachinePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostMachineOwnResponse parses an HTTP response from a PostMachineOwnWithResponse call
func ParsePostMachineOwnResponse(rsp *http.Response) (*PostMachineOwnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMachineOwnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OwnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MachineOwn400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineOwnsTopResponse parses an HTTP response from a GetMachineOwnsTopWithResponse call
func ParseGetMachineOwnsTopResponse(rsp *http.Response) (*GetMachineOwnsTopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineOwnsTopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineOwnsTopMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachinePaginatedResponse parses an HTTP response from a GetMachinePaginatedWithResponse call
func ParseGetMachinePaginatedResponse(rsp *http.Response) (*GetMachinePaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachinePaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachinePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetMachineProfileResponse parses an HTTP response from a GetMachineProfileWithResponse call
func ParseGetMachineProfileResponse(rsp *http.Response) (*GetMachineProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineProfileMachineResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineRecommendedResponse parses an HTTP response from a GetMachineRecommendedWithResponse call
func ParseGetMachineRecommendedResponse(rsp *http.Response) (*GetMachineRecommendedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineRecommendedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineRecommendedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineRecommendedRetiredResponse parses an HTTP response from a GetMachineRecommendedRetiredWithResponse call
func ParseGetMachineRecommendedRetiredResponse(rsp *http.Response) (*GetMachineRecommendedRetiredResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineRecommendedRetiredResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineRecommendedRetiredResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostMachineReviewResponse parses an HTTP response from a PostMachineReviewWithResponse call
func ParsePostMachineReviewResponse(rsp *http.Response) (*PostMachineReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMachineReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineReviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineReviewsUserResponse parses an HTTP response from a GetMachineReviewsUserWithResponse call
func ParseGetMachineReviewsUserResponse(rsp *http.Response) (*GetMachineReviewsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineReviewsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineReviewsUserMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineReviewsResponse parses an HTTP response from a GetMachineReviewsWithResponse call
func ParseGetMachineReviewsResponse(rsp *http.Response) (*GetMachineReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineReviewsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineTagsListResponse parses an HTTP response from a GetMachineTagsListWithResponse call
func ParseGetMachineTagsListResponse(rsp *http.Response) (*GetMachineTagsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineTagsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineTagsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineTagsResponse parses an HTTP response from a GetMachineTagsWithResponse call
func ParseGetMachineTagsResponse(rsp *http.Response) (*GetMachineTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineTagsMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineTodoPaginatedResponse parses an HTTP response from a GetMachineTodoPaginatedWithResponse call
func ParseGetMachineTodoPaginatedResponse(rsp *http.Response) (*GetMachineTodoPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineTodoPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachinePaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineUnreleasedResponse parses an HTTP response from a GetMachineUnreleasedWithResponse call
func ParseGetMachineUnreleasedResponse(rsp *http.Response) (*GetMachineUnreleasedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineUnreleasedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineUnreleasedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineWalkthroughRandomResponse parses an HTTP response from a GetMachineWalkthroughRandomWithResponse call
func ParseGetMachineWalkthroughRandomResponse(rsp *http.Response) (*GetMachineWalkthroughRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineWalkthroughRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineWalkthroughRandomResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineWalkthroughsLanguageListResponse parses an HTTP response from a GetMachineWalkthroughsLanguageListWithResponse call
func ParseGetMachineWalkthroughsLanguageListResponse(rsp *http.Response) (*GetMachineWalkthroughsLanguageListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineWalkthroughsLanguageListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineWalkthroughsLanguageListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineWalkthroughOfficialFeedbackChoicesResponse parses an HTTP response from a GetMachineWalkthroughOfficialFeedbackChoicesWithResponse call
func ParseGetMachineWalkthroughOfficialFeedbackChoicesResponse(rsp *http.Response) (*GetMachineWalkthroughOfficialFeedbackChoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineWalkthroughOfficialFeedbackChoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineWalkthroughOfficialFeedbackChoicesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineWalkthroughsResponse parses an HTTP response from a GetMachineWalkthroughsWithResponse call
func ParseGetMachineWalkthroughsResponse(rsp *http.Response) (*GetMachineWalkthroughsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineWalkthroughsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineWalkthroughsMachineIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineWriteupResponse parses an HTTP response from a GetMachineWriteupWithResponse call
func ParseGetMachineWriteupResponse(rsp *http.Response) (*GetMachineWriteupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineWriteupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineAdventureResponse parses an HTTP response from a GetMachineAdventureWithResponse call
func ParseGetMachineAdventureResponse(rsp *http.Response) (*GetMachineAdventureResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineAdventureResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachinesAdventureResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetMachineTasksResponse parses an HTTP response from a GetMachineTasksWithResponse call
func ParseGetMachineTasksResponse(rsp *http.Response) (*GetMachineTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMachineTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MachineTasksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNavigationMainResponse parses an HTTP response from a GetNavigationMainWithResponse call
func ParseGetNavigationMainResponse(rsp *http.Response) (*GetNavigationMainResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNavigationMainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NavigationMainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetNoticesResponse parses an HTTP response from a GetNoticesWithResponse call
func ParseGetNoticesResponse(rsp *http.Response) (*GetNoticesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNoticesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoticesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabChangelogsResponse parses an HTTP response from a GetProlabChangelogsWithResponse call
func ParseGetProlabChangelogsResponse(rsp *http.Response) (*GetProlabChangelogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabChangelogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   []map[string]interface{} `json:"data,omitempty"`
			Status bool                     `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabFaqResponse parses an HTTP response from a GetProlabFaqWithResponse call
func ParseGetProlabFaqResponse(rsp *http.Response) (*GetProlabFaqResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabFaqResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabfaqResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostProlabFlagResponse parses an HTTP response from a PostProlabFlagWithResponse call
func ParsePostProlabFlagResponse(rsp *http.Response) (*PostProlabFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProlabFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MultiOwnResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest MultiOwn400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabFlagsResponse parses an HTTP response from a GetProlabFlagsWithResponse call
func ParseGetProlabFlagsResponse(rsp *http.Response) (*GetProlabFlagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabFlagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProductFlagsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabInfoResponse parses an HTTP response from a GetProlabInfoWithResponse call
func ParseGetProlabInfoResponse(rsp *http.Response) (*GetProlabInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabinfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabMachinesResponse parses an HTTP response from a GetProlabMachinesWithResponse call
func ParseGetProlabMachinesResponse(rsp *http.Response) (*GetProlabMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabmachinesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabOverviewResponse parses an HTTP response from a GetProlabOverviewWithResponse call
func ParseGetProlabOverviewResponse(rsp *http.Response) (*GetProlabOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlaboverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabProgressResponse parses an HTTP response from a GetProlabProgressWithResponse call
func ParseGetProlabProgressResponse(rsp *http.Response) (*GetProlabProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabProgressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabRatingResponse parses an HTTP response from a GetProlabRatingWithResponse call
func ParseGetProlabRatingResponse(rsp *http.Response) (*GetProlabRatingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabRatingResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabReviewsResponse parses an HTTP response from a GetProlabReviewsWithResponse call
func ParseGetProlabReviewsResponse(rsp *http.Response) (*GetProlabReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabreviewsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabReviewsOverviewResponse parses an HTTP response from a GetProlabReviewsOverviewWithResponse call
func ParseGetProlabReviewsOverviewResponse(rsp *http.Response) (*GetProlabReviewsOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabReviewsOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabreviewsOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabSubscriptionResponse parses an HTTP response from a GetProlabSubscriptionWithResponse call
func ParseGetProlabSubscriptionResponse(rsp *http.Response) (*GetProlabSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetProlabsResponse parses an HTTP response from a GetProlabsWithResponse call
func ParseGetProlabsResponse(rsp *http.Response) (*GetProlabsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProlabsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProlabsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostPwnboxStartResponse parses an HTTP response from a PostPwnboxStartWithResponse call
func ParsePostPwnboxStartResponse(rsp *http.Response) (*PostPwnboxStartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPwnboxStartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PwnboxStartResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPwnboxStatusResponse parses an HTTP response from a GetPwnboxStatusWithResponse call
func ParseGetPwnboxStatusResponse(rsp *http.Response) (*GetPwnboxStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPwnboxStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PwnboxStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostPwnboxTerminateResponse parses an HTTP response from a PostPwnboxTerminateWithResponse call
func ParsePostPwnboxTerminateResponse(rsp *http.Response) (*PostPwnboxTerminateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPwnboxTerminateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPwnboxUsageResponse parses an HTTP response from a GetPwnboxUsageWithResponse call
func ParseGetPwnboxUsageResponse(rsp *http.Response) (*GetPwnboxUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPwnboxUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PwnboxUsageResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsResponse parses an HTTP response from a GetRankingsWithResponse call
func ParseGetRankingsResponse(rsp *http.Response) (*GetRankingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsCountriesResponse parses an HTTP response from a GetRankingsCountriesWithResponse call
func ParseGetRankingsCountriesResponse(rsp *http.Response) (*GetRankingsCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsCountriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsCountryBestResponse parses an HTTP response from a GetRankingsCountryBestWithResponse call
func ParseGetRankingsCountryBestResponse(rsp *http.Response) (*GetRankingsCountryBestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsCountryBestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsCountryBestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsCountryOverviewResponse parses an HTTP response from a GetRankingsCountryOverviewWithResponse call
func ParseGetRankingsCountryOverviewResponse(rsp *http.Response) (*GetRankingsCountryOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsCountryOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsCountryOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsCountryRankingBracketResponse parses an HTTP response from a GetRankingsCountryRankingBracketWithResponse call
func ParseGetRankingsCountryRankingBracketResponse(rsp *http.Response) (*GetRankingsCountryRankingBracketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsCountryRankingBracketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsCountryRankingBracketResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsCountryUSMembersResponse parses an HTTP response from a GetRankingsCountryUSMembersWithResponse call
func ParseGetRankingsCountryUSMembersResponse(rsp *http.Response) (*GetRankingsCountryUSMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsCountryUSMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsCountryMembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamBestResponse parses an HTTP response from a GetRankingsTeamBestWithResponse call
func ParseGetRankingsTeamBestResponse(rsp *http.Response) (*GetRankingsTeamBestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamBestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamBestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamBestIdResponse parses an HTTP response from a GetRankingsTeamBestIdWithResponse call
func ParseGetRankingsTeamBestIdResponse(rsp *http.Response) (*GetRankingsTeamBestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamBestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamBestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamOverviewResponse parses an HTTP response from a GetRankingsTeamOverviewWithResponse call
func ParseGetRankingsTeamOverviewResponse(rsp *http.Response) (*GetRankingsTeamOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamOverviewIdResponse parses an HTTP response from a GetRankingsTeamOverviewIdWithResponse call
func ParseGetRankingsTeamOverviewIdResponse(rsp *http.Response) (*GetRankingsTeamOverviewIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamOverviewIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamRankingBracketResponse parses an HTTP response from a GetRankingsTeamRankingBracketWithResponse call
func ParseGetRankingsTeamRankingBracketResponse(rsp *http.Response) (*GetRankingsTeamRankingBracketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamRankingBracketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamRankingBracketResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamRankingBracketIdResponse parses an HTTP response from a GetRankingsTeamRankingBracketIdWithResponse call
func ParseGetRankingsTeamRankingBracketIdResponse(rsp *http.Response) (*GetRankingsTeamRankingBracketIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamRankingBracketIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamRankingBracketResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsTeamsResponse parses an HTTP response from a GetRankingsTeamsWithResponse call
func ParseGetRankingsTeamsResponse(rsp *http.Response) (*GetRankingsTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsTeamsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsUniversitiesResponse parses an HTTP response from a GetRankingsUniversitiesWithResponse call
func ParseGetRankingsUniversitiesResponse(rsp *http.Response) (*GetRankingsUniversitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsUniversitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsUniversitiesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsUniversityRankingBracketIdResponse parses an HTTP response from a GetRankingsUniversityRankingBracketIdWithResponse call
func ParseGetRankingsUniversityRankingBracketIdResponse(rsp *http.Response) (*GetRankingsUniversityRankingBracketIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsUniversityRankingBracketIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsUniversityRankingBracketByIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsUserBestResponse parses an HTTP response from a GetRankingsUserBestWithResponse call
func ParseGetRankingsUserBestResponse(rsp *http.Response) (*GetRankingsUserBestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsUserBestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsUserBestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsUserOverviewResponse parses an HTTP response from a GetRankingsUserOverviewWithResponse call
func ParseGetRankingsUserOverviewResponse(rsp *http.Response) (*GetRankingsUserOverviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsUserOverviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsUserOverviewResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsUserRankingBracketResponse parses an HTTP response from a GetRankingsUserRankingBracketWithResponse call
func ParseGetRankingsUserRankingBracketResponse(rsp *http.Response) (*GetRankingsUserRankingBracketResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsUserRankingBracketResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsUserRankingBracketResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRankingsUsersResponse parses an HTTP response from a GetRankingsUsersWithResponse call
func ParseGetRankingsUsersResponse(rsp *http.Response) (*GetRankingsUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRankingsUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RankingsUsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReviewResponse parses an HTTP response from a GetReviewWithResponse call
func ParseGetReviewResponse(rsp *http.Response) (*GetReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReviewProductResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetReviewPaginatedResponse parses an HTTP response from a GetReviewPaginatedWithResponse call
func ParseGetReviewPaginatedResponse(rsp *http.Response) (*GetReviewPaginatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReviewPaginatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReviewProductPaginatedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSearchFetchResponse parses an HTTP response from a GetSearchFetchWithResponse call
func ParseGetSearchFetchResponse(rsp *http.Response) (*GetSearchFetchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchFetchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonEndResponse parses an HTTP response from a GetSeasonEndWithResponse call
func ParseGetSeasonEndResponse(rsp *http.Response) (*GetSeasonEndResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonEndResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonEndResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonListResponse parses an HTTP response from a GetSeasonListWithResponse call
func ParseGetSeasonListResponse(rsp *http.Response) (*GetSeasonListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonMachineActiveResponse parses an HTTP response from a GetSeasonMachineActiveWithResponse call
func ParseGetSeasonMachineActiveResponse(rsp *http.Response) (*GetSeasonMachineActiveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonMachineActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonMachineActiveResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonMachinesResponse parses an HTTP response from a GetSeasonMachinesWithResponse call
func ParseGetSeasonMachinesResponse(rsp *http.Response) (*GetSeasonMachinesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonMachinesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonMachinesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonMachinesCompletedResponse parses an HTTP response from a GetSeasonMachinesCompletedWithResponse call
func ParseGetSeasonMachinesCompletedResponse(rsp *http.Response) (*GetSeasonMachinesCompletedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonMachinesCompletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonMachinesCompletedSeasonIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonRewardsResponse parses an HTTP response from a GetSeasonRewardsWithResponse call
func ParseGetSeasonRewardsResponse(rsp *http.Response) (*GetSeasonRewardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonRewardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonRewardsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonUserFollowersResponse parses an HTTP response from a GetSeasonUserFollowersWithResponse call
func ParseGetSeasonUserFollowersResponse(rsp *http.Response) (*GetSeasonUserFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonUserFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonUserFollowersSeasonIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonUserRankResponse parses an HTTP response from a GetSeasonUserRankWithResponse call
func ParseGetSeasonUserRankResponse(rsp *http.Response) (*GetSeasonUserRankResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonUserRankResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonUserRankSeasonIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonLeaderboardResponse parses an HTTP response from a GetSeasonLeaderboardWithResponse call
func ParseGetSeasonLeaderboardResponse(rsp *http.Response) (*GetSeasonLeaderboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonLeaderboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonPlayersLeaderboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSeasonLeaderboardTopResponse parses an HTTP response from a GetSeasonLeaderboardTopWithResponse call
func ParseGetSeasonLeaderboardTopResponse(rsp *http.Response) (*GetSeasonLeaderboardTopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSeasonLeaderboardTopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SeasonPlatersLeaderboardTopResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSherlocksResponse parses an HTTP response from a GetSherlocksWithResponse call
func ParseGetSherlocksResponse(rsp *http.Response) (*GetSherlocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSherlocksCategoriesListResponse parses an HTTP response from a GetSherlocksCategoriesListWithResponse call
func ParseGetSherlocksCategoriesListResponse(rsp *http.Response) (*GetSherlocksCategoriesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlocksCategoriesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksCategoriesListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSherlockDownloadlinkResponse parses an HTTP response from a GetSherlockDownloadlinkWithResponse call
func ParseGetSherlockDownloadlinkResponse(rsp *http.Response) (*GetSherlockDownloadlinkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockDownloadlinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksDownloadLinkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSherlockInfoResponse parses an HTTP response from a GetSherlockInfoWithResponse call
func ParseGetSherlockInfoResponse(rsp *http.Response) (*GetSherlockInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksSherlockIdInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSherlockPlayResponse parses an HTTP response from a GetSherlockPlayWithResponse call
func ParseGetSherlockPlayResponse(rsp *http.Response) (*GetSherlockPlayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockPlayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksSherlockIdPlayResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSherlockProgressResponse parses an HTTP response from a GetSherlockProgressWithResponse call
func ParseGetSherlockProgressResponse(rsp *http.Response) (*GetSherlockProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksSherlockIdProgressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSherlockTasksResponse parses an HTTP response from a GetSherlockTasksWithResponse call
func ParseGetSherlockTasksResponse(rsp *http.Response) (*GetSherlockTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksSherlockIdTasksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSherlockTasksFlagResponse parses an HTTP response from a PostSherlockTasksFlagWithResponse call
func ParsePostSherlockTasksFlagResponse(rsp *http.Response) (*PostSherlockTasksFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSherlockTasksFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SherlocksSherlockIdTasksTaskIdFlag201
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest SherlocksSherlockIdTasksTaskIdFlag400
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSherlockWriteupResponse parses an HTTP response from a GetSherlockWriteupWithResponse call
func ParseGetSherlockWriteupResponse(rsp *http.Response) (*GetSherlockWriteupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockWriteupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksSherlockIdWriteupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSherlockWriteupOfficialResponse parses an HTTP response from a GetSherlockWriteupOfficialWithResponse call
func ParseGetSherlockWriteupOfficialResponse(rsp *http.Response) (*GetSherlockWriteupOfficialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockWriteupOfficialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSherlockResponse parses an HTTP response from a GetSherlockWithResponse call
func ParseGetSherlockResponse(rsp *http.Response) (*GetSherlockResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSherlockResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SherlocksNameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSidebarAnnouncementResponse parses an HTTP response from a GetSidebarAnnouncementWithResponse call
func ParseGetSidebarAnnouncementResponse(rsp *http.Response) (*GetSidebarAnnouncementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSidebarAnnouncementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SidebarAnnouncementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSidebarChangelogResponse parses an HTTP response from a GetSidebarChangelogWithResponse call
func ParseGetSidebarChangelogResponse(rsp *http.Response) (*GetSidebarChangelogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSidebarChangelogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SidebarChangelogResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSPProfileResponse parses an HTTP response from a GetSPProfileWithResponse call
func ParseGetSPProfileResponse(rsp *http.Response) (*GetSPProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSPProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpProfileStartingPointIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostSPTaskFlagResponse parses an HTTP response from a PostSPTaskFlagWithResponse call
func ParsePostSPTaskFlagResponse(rsp *http.Response) (*PostSPTaskFlagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSPTaskFlagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSPTierResponse parses an HTTP response from a GetSPTierWithResponse call
func ParseGetSPTierResponse(rsp *http.Response) (*GetSPTierResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSPTierResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpTierResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetSPTiersProgressResponse parses an HTTP response from a GetSPTiersProgressWithResponse call
func ParseGetSPTiersProgressResponse(rsp *http.Response) (*GetSPTiersProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSPTiersProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpTiersProgressResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamActivityResponse parses an HTTP response from a GetTeamActivityWithResponse call
func ParseGetTeamActivityResponse(rsp *http.Response) (*GetTeamActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamActivityTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamChartChallengeCategoriesResponse parses an HTTP response from a GetTeamChartChallengeCategoriesWithResponse call
func ParseGetTeamChartChallengeCategoriesResponse(rsp *http.Response) (*GetTeamChartChallengeCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamChartChallengeCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamChartChallengeTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamChartMachinesAttackResponse parses an HTTP response from a GetTeamChartMachinesAttackWithResponse call
func ParseGetTeamChartMachinesAttackResponse(rsp *http.Response) (*GetTeamChartMachinesAttackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamChartMachinesAttackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamChartMachinesAttackTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamGraphResponse parses an HTTP response from a GetTeamGraphWithResponse call
func ParseGetTeamGraphResponse(rsp *http.Response) (*GetTeamGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamGraphTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamInfoResponse parses an HTTP response from a GetTeamInfoWithResponse call
func ParseGetTeamInfoResponse(rsp *http.Response) (*GetTeamInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamInfoTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamInvitationsResponse parses an HTTP response from a GetTeamInvitationsWithResponse call
func ParseGetTeamInvitationsResponse(rsp *http.Response) (*GetTeamInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamInvitationsTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTeamKickUserResponse parses an HTTP response from a PostTeamKickUserWithResponse call
func ParsePostTeamKickUserResponse(rsp *http.Response) (*PostTeamKickUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamKickUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamMembersResponse parses an HTTP response from a GetTeamMembersWithResponse call
func ParseGetTeamMembersResponse(rsp *http.Response) (*GetTeamMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamMembersTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTeamStatsOwnsResponse parses an HTTP response from a GetTeamStatsOwnsWithResponse call
func ParseGetTeamStatsOwnsResponse(rsp *http.Response) (*GetTeamStatsOwnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamStatsOwnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TeamStatsOwnsTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTeamInviteAcceptResponse parses an HTTP response from a PostTeamInviteAcceptWithResponse call
func ParsePostTeamInviteAcceptResponse(rsp *http.Response) (*PostTeamInviteAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTeamInviteAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Generic400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteTeamInviteRejectResponse parses an HTTP response from a DeleteTeamInviteRejectWithResponse call
func ParseDeleteTeamInviteRejectResponse(rsp *http.Response) (*DeleteTeamInviteRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamInviteRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Generic400Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTracksResponse parses an HTTP response from a GetTracksWithResponse call
func ParseGetTracksResponse(rsp *http.Response) (*GetTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTracksEnrollResponse parses an HTTP response from a PostTracksEnrollWithResponse call
func ParsePostTracksEnrollResponse(rsp *http.Response) (*PostTracksEnrollResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTracksEnrollResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksEnrollResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostTracksLikeResponse parses an HTTP response from a PostTracksLikeWithResponse call
func ParsePostTracksLikeResponse(rsp *http.Response) (*PostTracksLikeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTracksLikeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksLikeResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetTracksIdResponse parses an HTTP response from a GetTracksIdWithResponse call
func ParseGetTracksIdResponse(rsp *http.Response) (*GetTracksIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTracksIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TracksIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityActivityResponse parses an HTTP response from a GetUniversityActivityWithResponse call
func ParseGetUniversityActivityResponse(rsp *http.Response) (*GetUniversityActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityActivityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityAllListResponse parses an HTTP response from a GetUniversityAllListWithResponse call
func ParseGetUniversityAllListResponse(rsp *http.Response) (*GetUniversityAllListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityAllListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityAllListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityChartChallengeCategoriesResponse parses an HTTP response from a GetUniversityChartChallengeCategoriesWithResponse call
func ParseGetUniversityChartChallengeCategoriesResponse(rsp *http.Response) (*GetUniversityChartChallengeCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityChartChallengeCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityChartChallengeCategoriesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityChartMachinesAttackResponse parses an HTTP response from a GetUniversityChartMachinesAttackWithResponse call
func ParseGetUniversityChartMachinesAttackResponse(rsp *http.Response) (*GetUniversityChartMachinesAttackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityChartMachinesAttackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityChartMachinesAttackResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityCountryListResponse parses an HTTP response from a GetUniversityCountryListWithResponse call
func ParseGetUniversityCountryListResponse(rsp *http.Response) (*GetUniversityCountryListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityCountryListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityCountryListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityMembersResponse parses an HTTP response from a GetUniversityMembersWithResponse call
func ParseGetUniversityMembersResponse(rsp *http.Response) (*GetUniversityMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityMembersTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityNewListResponse parses an HTTP response from a GetUniversityNewListWithResponse call
func ParseGetUniversityNewListResponse(rsp *http.Response) (*GetUniversityNewListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityNewListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityNewListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityProfileResponse parses an HTTP response from a GetUniversityProfileWithResponse call
func ParseGetUniversityProfileResponse(rsp *http.Response) (*GetUniversityProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityProfileTeamIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityStatsOwnsResponse parses an HTTP response from a GetUniversityStatsOwnsWithResponse call
func ParseGetUniversityStatsOwnsResponse(rsp *http.Response) (*GetUniversityStatsOwnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityStatsOwnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityStatsOwnsUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUniversityTopListResponse parses an HTTP response from a GetUniversityTopListWithResponse call
func ParseGetUniversityTopListResponse(rsp *http.Response) (*GetUniversityTopListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUniversityTopListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UniversityTopListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserAchievementResponse parses an HTTP response from a GetUserAchievementWithResponse call
func ParseGetUserAchievementResponse(rsp *http.Response) (*GetUserAchievementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAchievementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAchievementTarTypeUserIdTarIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserAnonymizedIdResponse parses an HTTP response from a GetUserAnonymizedIdWithResponse call
func ParseGetUserAnonymizedIdResponse(rsp *http.Response) (*GetUserAnonymizedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserAnonymizedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserAnonymizedIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostUserApptokenCreateResponse parses an HTTP response from a PostUserApptokenCreateWithResponse call
func ParsePostUserApptokenCreateResponse(rsp *http.Response) (*PostUserApptokenCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserApptokenCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserApptokenCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostUserApptokenDeleteResponse parses an HTTP response from a PostUserApptokenDeleteWithResponse call
func ParsePostUserApptokenDeleteResponse(rsp *http.Response) (*PostUserApptokenDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserApptokenDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserApptokenListResponse parses an HTTP response from a GetUserApptokenListWithResponse call
func ParseGetUserApptokenListResponse(rsp *http.Response) (*GetUserApptokenListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserApptokenListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserApptokenListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserBannedResponse parses an HTTP response from a GetUserBannedWithResponse call
func ParseGetUserBannedResponse(rsp *http.Response) (*GetUserBannedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBannedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserBannedResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserConnectionStatusResponse parses an HTTP response from a GetUserConnectionStatusWithResponse call
func ParseGetUserConnectionStatusResponse(rsp *http.Response) (*GetUserConnectionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserConnectionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserConnectionStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserDashboardResponse parses an HTTP response from a GetUserDashboardWithResponse call
func ParseGetUserDashboardResponse(rsp *http.Response) (*GetUserDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDashboardResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserDashboardTabloidResponse parses an HTTP response from a GetUserDashboardTabloidWithResponse call
func ParseGetUserDashboardTabloidResponse(rsp *http.Response) (*GetUserDashboardTabloidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDashboardTabloidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDashboardTabloidResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostUserDisrespectResponse parses an HTTP response from a PostUserDisrespectWithResponse call
func ParsePostUserDisrespectResponse(rsp *http.Response) (*PostUserDisrespectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserDisrespectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostUserFollowResponse parses an HTTP response from a PostUserFollowWithResponse call
func ParsePostUserFollowResponse(rsp *http.Response) (*PostUserFollowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserFollowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserFollowersResponse parses an HTTP response from a GetUserFollowersWithResponse call
func ParseGetUserFollowersResponse(rsp *http.Response) (*GetUserFollowersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserFollowersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserFollowersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserInfoResponse parses an HTTP response from a GetUserInfoWithResponse call
func ParseGetUserInfoResponse(rsp *http.Response) (*GetUserInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileActivityResponse parses an HTTP response from a GetUserProfileActivityWithResponse call
func ParseGetUserProfileActivityResponse(rsp *http.Response) (*GetUserProfileActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileActivityUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileBadgesResponse parses an HTTP response from a GetUserProfileBadgesWithResponse call
func ParseGetUserProfileBadgesResponse(rsp *http.Response) (*GetUserProfileBadgesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileBadgesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileBadgesUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileBasicResponse parses an HTTP response from a GetUserProfileBasicWithResponse call
func ParseGetUserProfileBasicResponse(rsp *http.Response) (*GetUserProfileBasicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileBasicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileBasicUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileBloodsResponse parses an HTTP response from a GetUserProfileBloodsWithResponse call
func ParseGetUserProfileBloodsResponse(rsp *http.Response) (*GetUserProfileBloodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileBloodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileBloodsUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileChartMachinesAttackResponse parses an HTTP response from a GetUserProfileChartMachinesAttackWithResponse call
func ParseGetUserProfileChartMachinesAttackResponse(rsp *http.Response) (*GetUserProfileChartMachinesAttackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileChartMachinesAttackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileChartMachinesAttackUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileContentResponse parses an HTTP response from a GetUserProfileContentWithResponse call
func ParseGetUserProfileContentResponse(rsp *http.Response) (*GetUserProfileContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileContentUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileGraphResponse parses an HTTP response from a GetUserProfileGraphWithResponse call
func ParseGetUserProfileGraphResponse(rsp *http.Response) (*GetUserProfileGraphResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileGraphResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileGraphPeriodUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileProgressChallengesResponse parses an HTTP response from a GetUserProfileProgressChallengesWithResponse call
func ParseGetUserProfileProgressChallengesResponse(rsp *http.Response) (*GetUserProfileProgressChallengesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileProgressChallengesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileProgressChallengesUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileProgressFortressResponse parses an HTTP response from a GetUserProfileProgressFortressWithResponse call
func ParseGetUserProfileProgressFortressResponse(rsp *http.Response) (*GetUserProfileProgressFortressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileProgressFortressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileProgressFortressUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileProgressMachinesOsResponse parses an HTTP response from a GetUserProfileProgressMachinesOsWithResponse call
func ParseGetUserProfileProgressMachinesOsResponse(rsp *http.Response) (*GetUserProfileProgressMachinesOsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileProgressMachinesOsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileProgressMachinesOsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileProgressProlabResponse parses an HTTP response from a GetUserProfileProgressProlabWithResponse call
func ParseGetUserProfileProgressProlabResponse(rsp *http.Response) (*GetUserProfileProgressProlabResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileProgressProlabResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileProgressProlabUserIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileProgressSherlocksResponse parses an HTTP response from a GetUserProfileProgressSherlocksWithResponse call
func ParseGetUserProfileProgressSherlocksResponse(rsp *http.Response) (*GetUserProfileProgressSherlocksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileProgressSherlocksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileProgressSherlocksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserProfileSummaryResponse parses an HTTP response from a GetUserProfileSummaryWithResponse call
func ParseGetUserProfileSummaryResponse(rsp *http.Response) (*GetUserProfileSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserProfileSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileSummaryResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostUserRespectResponse parses an HTTP response from a PostUserRespectWithResponse call
func ParsePostUserRespectResponse(rsp *http.Response) (*PostUserRespectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserRespectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserSettingsResponse parses an HTTP response from a GetUserSettingsWithResponse call
func ParseGetUserSettingsResponse(rsp *http.Response) (*GetUserSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserSettingsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetUserTracksResponse parses an HTTP response from a GetUserTracksWithResponse call
func ParseGetUserTracksResponse(rsp *http.Response) (*GetUserTracksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserTracksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserTracksResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostUserUnfollowResponse parses an HTTP response from a PostUserUnfollowWithResponse call
func ParsePostUserUnfollowResponse(rsp *http.Response) (*PostUserUnfollowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUnfollowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GenericSuccess2xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostVMExtendResponse parses an HTTP response from a PostVMExtendWithResponse call
func ParsePostVMExtendResponse(rsp *http.Response) (*PostVMExtendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVMExtendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VMExtendResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostVMResetResponse parses an HTTP response from a PostVMResetWithResponse call
func ParsePostVMResetResponse(rsp *http.Response) (*PostVMResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVMResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VMResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVMResetVoteResponse parses an HTTP response from a PostVMResetVoteWithResponse call
func ParsePostVMResetVoteResponse(rsp *http.Response) (*PostVMResetVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVMResetVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VMResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVMResetVoteAcceptResponse parses an HTTP response from a PostVMResetVoteAcceptWithResponse call
func ParsePostVMResetVoteAcceptResponse(rsp *http.Response) (*PostVMResetVoteAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVMResetVoteAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VMResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostVMSpawnResponse parses an HTTP response from a PostVMSpawnWithResponse call
func ParsePostVMSpawnResponse(rsp *http.Response) (*PostVMSpawnResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVMSpawnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VMResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GenericError5xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostVMTerminateResponse parses an HTTP response from a PostVMTerminateWithResponse call
func ParsePostVMTerminateResponse(rsp *http.Response) (*PostVMTerminateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostVMTerminateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VMResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest GenericError5xx
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostTodoUpdateResponse parses an HTTP response from a PostTodoUpdateWithResponse call
func ParsePostTodoUpdateResponse(rsp *http.Response) (*PostTodoUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTodoUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TodoUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
